question_num = 12
q=2
feature_data = subset(feature_data_8, qID == q)
feature_data = getFeatureMatrices(
beta = c('sameC', 'sameA', 'dist'),
format_data = feature_data,
deltaM_value = 9,
option_num = 7
)
sim_data = simulateChoice(beta_true,
delta_true,
alpha_true,
feature_data,
option_num,
question_num,
seed_no = 1)
temp = feature_data_8[feature_data_8$qID == q, c('qID', paste0('dist_', 1:option_num))]
temp$qID=1
sim_data = getFormatData(sim_data,temp,cluster_num = 3)
x = getStanFit (
c('sameC', 'sameA','dist'),
deltaM_value = 9,
option_num = 7,
sim_data,
save_model_file = NULL,
init_values = "random",
iter_num = 1000,
chain_num = 3,
warmup_num = 500,
core_num = 3,
adapt_delta = 0.999,
stepsize = 0.01,
max_treedepth = 20,
save_warmup = FALSE,
refresh = 200,
init_r = 0.5,
hier_value = 0
)
getParaSummary(x)
sampinfo::getModelDiag(stan_data_fit = x)
beta_true = c(0,.5,-.5)
delta_true = 0.5
alpha_true = c(-.6,-.4,-.2,.2,.4,.6,0)
option_num = 7
question_num = 12
q=5
feature_data = subset(feature_data_8, qID == q)
feature_data = getFeatureMatrices(
beta = c('sameC', 'sameA', 'dist'),
format_data = feature_data,
deltaM_value = 9,
option_num = 7
)
sim_data = simulateChoice(beta_true,
delta_true,
alpha_true,
feature_data,
option_num,
question_num,
seed_no = 1)
temp = feature_data_8[feature_data_8$qID == q, c('qID', paste0('dist_', 1:option_num))]
temp$qID=1
sim_data = getFormatData(sim_data,temp,cluster_num = 3)
x = getStanFit (
c('sameC', 'sameA','dist'),
deltaM_value = 9,
option_num = 7,
sim_data,
save_model_file = NULL,
init_values = "random",
iter_num = 1000,
chain_num = 3,
warmup_num = 500,
core_num = 3,
adapt_delta = 0.999,
stepsize = 0.01,
max_treedepth = 20,
save_warmup = FALSE,
refresh = 200,
init_r = 0.5,
hier_value = 0
)
getParaSummary(x)
sampinfo::getModelDiag(stan_data_fit = x)
question_num = 16
q=5
feature_data = subset(feature_data_8, qID == q)
feature_data = getFeatureMatrices(
beta = c('sameC', 'sameA', 'dist'),
format_data = feature_data,
deltaM_value = 9,
option_num = 7
)
sim_data = simulateChoice(beta_true,
delta_true,
alpha_true,
feature_data,
option_num,
question_num,
seed_no = 1)
temp = feature_data_8[feature_data_8$qID == q, c('qID', paste0('dist_', 1:option_num))]
temp$qID=1
sim_data = getFormatData(sim_data,temp,cluster_num = 3)
x = getStanFit (
c('sameC', 'sameA','dist'),
deltaM_value = 9,
option_num = 7,
sim_data,
save_model_file = NULL,
init_values = "random",
iter_num = 1000,
chain_num = 3,
warmup_num = 500,
core_num = 3,
adapt_delta = 0.999,
stepsize = 0.01,
max_treedepth = 20,
save_warmup = FALSE,
refresh = 200,
init_r = 0.5,
hier_value = 0
)
getParaSummary(x)
sampinfo::getModelDiag(stan_data_fit = x)
beta_true = c(0,.5,-.5)
delta_true = 0.5
alpha_true = c(-.6,-.4,-.2,.2,.4,.6,0)
option_num = 7
question_num = 32
q=5
feature_data = subset(feature_data_8, qID == q)
feature_data = getFeatureMatrices(
beta = c('sameC', 'sameA', 'dist'),
format_data = feature_data,
deltaM_value = 9,
option_num = 7
)
sim_data = simulateChoice(beta_true,
delta_true,
alpha_true,
feature_data,
option_num,
question_num,
seed_no = 1)
temp = feature_data_8[feature_data_8$qID == q, c('qID', paste0('dist_', 1:option_num))]
temp$qID=1
sim_data = getFormatData(sim_data,temp,cluster_num = 3)
x = getStanFit (
c('sameC', 'sameA','dist'),
deltaM_value = 9,
option_num = 7,
sim_data,
save_model_file = NULL,
init_values = "random",
iter_num = 1000,
chain_num = 3,
warmup_num = 500,
core_num = 3,
adapt_delta = 0.999,
stepsize = 0.01,
max_treedepth = 20,
save_warmup = FALSE,
refresh = 200,
init_r = 0.5,
hier_value = 0
)
getParaSummary(x)
question_num = 50
q=5
feature_data = subset(feature_data_8, qID == q)
feature_data = getFeatureMatrices(
beta = c('sameC', 'sameA', 'dist'),
format_data = feature_data,
deltaM_value = 9,
option_num = 7
)
sim_data = simulateChoice(beta_true,
delta_true,
alpha_true,
feature_data,
option_num,
question_num,
seed_no = 1)
temp = feature_data_8[feature_data_8$qID == q, c('qID', paste0('dist_', 1:option_num))]
temp$qID=1
sim_data = getFormatData(sim_data,temp,cluster_num = 3)
x = getStanFit (
c('sameC', 'sameA','dist'),
deltaM_value = 9,
option_num = 7,
sim_data,
save_model_file = NULL,
init_values = "random",
iter_num = 1000,
chain_num = 3,
warmup_num = 500,
core_num = 3,
adapt_delta = 0.999,
stepsize = 0.01,
max_treedepth = 20,
save_warmup = FALSE,
refresh = 200,
init_r = 0.5,
hier_value = 0
)
getParaSummary(x)
beta_true = c(0,.5,-.5)
delta_true = 0.5
alpha_true = c(-.6,-.4,-.2,.2,.4,.6,0)
option_num = 7
question_num = 100
q=5
feature_data = subset(feature_data_8, qID == q)
feature_data = getFeatureMatrices(
beta = c('sameC', 'sameA', 'dist'),
format_data = feature_data,
deltaM_value = 9,
option_num = 7
)
sim_data = simulateChoice(beta_true,
delta_true,
alpha_true,
feature_data,
option_num,
question_num,
seed_no = 1)
temp = feature_data_8[feature_data_8$qID == q, c('qID', paste0('dist_', 1:option_num))]
temp$qID=1
sim_data = getFormatData(sim_data,temp,cluster_num = 3)
x = getStanFit (
c('sameC', 'sameA','dist'),
deltaM_value = 9,
option_num = 7,
sim_data,
save_model_file = NULL,
init_values = "random",
iter_num = 1000,
chain_num = 3,
warmup_num = 500,
core_num = 3,
adapt_delta = 0.999,
stepsize = 0.01,
max_treedepth = 20,
save_warmup = FALSE,
refresh = 200,
init_r = 0.5,
hier_value = 0
)
getParaSummary(x)
sampinfo::getModelDiag(stan_data_fit = x)
beta_true = c(0,.5,-.5)
delta_true = 0.5
alpha_true = c(-.6,-.4,-.2,.2,.4,.6,0)
option_num = 7
question_num = 250
q=5
feature_data = subset(feature_data_8, qID == q)
feature_data = getFeatureMatrices(
beta = c('sameC', 'sameA', 'dist'),
format_data = feature_data,
deltaM_value = 9,
option_num = 7
)
sim_data = simulateChoice(beta_true,
delta_true,
alpha_true,
feature_data,
option_num,
question_num,
seed_no = 1)
temp = feature_data_8[feature_data_8$qID == q, c('qID', paste0('dist_', 1:option_num))]
temp$qID=1
sim_data = getFormatData(sim_data,temp,cluster_num = 3)
x = getStanFit (
c('sameC', 'sameA','dist'),
deltaM_value = 9,
option_num = 7,
sim_data,
save_model_file = NULL,
init_values = "random",
iter_num = 1000,
chain_num = 3,
warmup_num = 500,
core_num = 3,
adapt_delta = 0.999,
stepsize = 0.01,
max_treedepth = 20,
save_warmup = FALSE,
refresh = 200,
init_r = 0.5,
hier_value = 0
)
getParaSummary(x)
sampinfo::getModelDiag(stan_data_fit = x)
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
feature_data_8
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
?truncnorm
?msm
install.packages(MSM)
\"msm"
install.packages("msm")
# I finally found the solution. It is important to write the
# following lines of code in the NAMESPACE file, otherwise you will have the error mentioned above.
#
import(msm)
require(dzevtools)
# I finally found the solution. It is important to write the
# following lines of code in the NAMESPACE file, otherwise you will have the error mentioned above.
#
import(msm)
require(dzevtools)
require(devtools)
# I finally found the solution. It is important to write the
# following lines of code in the NAMESPACE file, otherwise you will have the error mentioned above.
#
import(msm)
require(dplyr)
use_package('msm')
?truncnorm
require(msm)
?truncnorm
install.packages('truncnorm')
use_package('truncnorm')
?truncnorm
truncnorm
?truncnorm::truncnorm
require(truncnorm)
?truncnorm::truncnorm
help(truncnorm::truncnorm)
truncnorm
help(truncnorm)
help(rtruncnorm)
rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5)
rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5)
rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5)
rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5)
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
devtools::install(quick = t)##MUST BE FALSE THE FIRST TIME
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
devtools::load_all(".")
getaStanCode
?getStanCode
getStanCode(1,0)
pkgbuild::compile_dll(force = TRUE)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
devtools::load_all(".")
getStanCode(1)
getStanCode(9)
getStanCode(9,1)
getStanCode(9,0)
library(sampinfo)
library(bayesplot)
library(rstan)
library(knitr)
getStanCode
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
getStanCode(9,0)
require(devtools)
pkgbuild::compile_dll(force = TRUE)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
build_vignettes()
require(devtools)
build_vignettes()
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
build_vignettes()
devtools::build_vignettes()
require(devtools)
pkgbuild::compile_dll(force = TRUE)
pkgbuild::compile_dll(force = TRUE)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
require(devtools)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
import(Rcpp)
import(methods)
importFrom(rstan, sampling)
useDynLib(sampinfo)
require(devtools)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
load_all()
use_package('plyr')
use_package('dplyr')
use_package('tidyr')
use_package('rstan')
use_package('utils')
use_package('stats')
use_package('truncnorm')
use_package('bayesplot')
beta
beta ='sameA'
deltaM_value=8
=7
option_num=7
format_data
save_model_file
init_values = "random"
iter_num
iter_num = 5
chain_num=1
warmup_num=1
core_num=1
adapt_delta = 0.999
stepsize = 0.01
max_treedepth = 20
save_warmup = FALSE
refresh=1
init_r = 0.5
hier_value = 1
## prepare inputs for RStan; getHMRStanData in 'model_functions.R'
stan_data = getStanData(
beta = beta,
deltaM_value = deltaM_value,
option_num = option_num,
format_data = format_data,
hier_value = hier_value
)
##fit model
stan_code = getStanCode(deltaM_value, hier_value)
stan_code
if (init_values != 'random') {
init_values = function() {
list(deltaM = 0.5)
}
}
stan_fit = rstan::sampling(
stan_code,
data = stan_data,
seed = 1,
sample_file = save_model_file,
init = init_values,
iter = iter_num,
chains = chain_num,
warmup = warmup_num,
cores = core_num,
refresh = refresh,
save_warmup = save_warmup,
init_r = init_r,
control = list(
adapt_delta = adapt_delta,
stepsize = stepsize,
max_treedepth = max_treedepth
)
)
save_model_file=NULL
stan_fit = rstan::sampling(
stan_code,
data = stan_data,
seed = 1,
sample_file = save_model_file,
init = init_values,
iter = iter_num,
chains = chain_num,
warmup = warmup_num,
cores = core_num,
refresh = refresh,
save_warmup = save_warmup,
init_r = init_r,
control = list(
adapt_delta = adapt_delta,
stepsize = stepsize,
max_treedepth = max_treedepth
)
)
?sampling
