refresh = 200,
init_r = 0.5,
hier_value = 0
)
getParaSummary(x)
sampinfo::getModelDiag(stan_data_fit = x)
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
feature_data_8
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
?truncnorm
?msm
install.packages(MSM)
\"msm"
install.packages("msm")
# I finally found the solution. It is important to write the
# following lines of code in the NAMESPACE file, otherwise you will have the error mentioned above.
#
import(msm)
require(dzevtools)
# I finally found the solution. It is important to write the
# following lines of code in the NAMESPACE file, otherwise you will have the error mentioned above.
#
import(msm)
require(dzevtools)
require(devtools)
# I finally found the solution. It is important to write the
# following lines of code in the NAMESPACE file, otherwise you will have the error mentioned above.
#
import(msm)
require(dplyr)
use_package('msm')
?truncnorm
require(msm)
?truncnorm
install.packages('truncnorm')
use_package('truncnorm')
?truncnorm
truncnorm
?truncnorm::truncnorm
require(truncnorm)
?truncnorm::truncnorm
help(truncnorm::truncnorm)
truncnorm
help(truncnorm)
help(rtruncnorm)
rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5)
rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5)
rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5)
rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5)
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
round(rtruncnorm(question_num, a=1, b=20, mean = 5, sd = 5))
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
devtools::install(quick = t)##MUST BE FALSE THE FIRST TIME
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
devtools::load_all(".")
getaStanCode
?getStanCode
getStanCode(1,0)
pkgbuild::compile_dll(force = TRUE)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
devtools::load_all(".")
getStanCode(1)
getStanCode(9)
getStanCode(9,1)
getStanCode(9,0)
library(sampinfo)
library(bayesplot)
library(rstan)
library(knitr)
getStanCode
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
getStanCode(9,0)
require(devtools)
pkgbuild::compile_dll(force = TRUE)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
build_vignettes()
require(devtools)
build_vignettes()
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
build_vignettes()
devtools::build_vignettes()
require(devtools)
pkgbuild::compile_dll(force = TRUE)
pkgbuild::compile_dll(force = TRUE)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
require(devtools)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
import(Rcpp)
import(methods)
importFrom(rstan, sampling)
useDynLib(sampinfo)
require(devtools)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
load_all()
use_package('plyr')
use_package('dplyr')
use_package('tidyr')
use_package('rstan')
use_package('utils')
use_package('stats')
use_package('truncnorm')
use_package('bayesplot')
beta
beta ='sameA'
deltaM_value=8
=7
option_num=7
format_data
save_model_file
init_values = "random"
iter_num
iter_num = 5
chain_num=1
warmup_num=1
core_num=1
adapt_delta = 0.999
stepsize = 0.01
max_treedepth = 20
save_warmup = FALSE
refresh=1
init_r = 0.5
hier_value = 1
## prepare inputs for RStan; getHMRStanData in 'model_functions.R'
stan_data = getStanData(
beta = beta,
deltaM_value = deltaM_value,
option_num = option_num,
format_data = format_data,
hier_value = hier_value
)
##fit model
stan_code = getStanCode(deltaM_value, hier_value)
stan_code
if (init_values != 'random') {
init_values = function() {
list(deltaM = 0.5)
}
}
stan_fit = rstan::sampling(
stan_code,
data = stan_data,
seed = 1,
sample_file = save_model_file,
init = init_values,
iter = iter_num,
chains = chain_num,
warmup = warmup_num,
cores = core_num,
refresh = refresh,
save_warmup = save_warmup,
init_r = init_r,
control = list(
adapt_delta = adapt_delta,
stepsize = stepsize,
max_treedepth = max_treedepth
)
)
save_model_file=NULL
stan_fit = rstan::sampling(
stan_code,
data = stan_data,
seed = 1,
sample_file = save_model_file,
init = init_values,
iter = iter_num,
chains = chain_num,
warmup = warmup_num,
cores = core_num,
refresh = refresh,
save_warmup = save_warmup,
init_r = init_r,
control = list(
adapt_delta = adapt_delta,
stepsize = stepsize,
max_treedepth = max_treedepth
)
)
?sampling
exp(3)
exp(2)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
devtools::install(quick = T)##MUST BE FALSE THE FIRST TIME
devtools::load_all(".")
stan_data_fit = getStanFit(beta = c('sameA', 'dist'), deltaM_value = 9,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 1,warmup_num = 100, core_num=1,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
stan_data_fit = getStanFit(beta = '', deltaM_value = 9,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 1,warmup_num = 100, core_num=1,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
stan_data_fit = getStanFit(beta = c(), deltaM_value = 9,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 1,warmup_num = 100, core_num=1,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
stan_data_fit = getStanFit(beta = c(), deltaM_value = 8,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 1,warmup_num = 100, core_num=1,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
stan_data_fit = getStanFit(beta = c('sameA', 'dist'), deltaM_value = 8,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 1,warmup_num = 100, core_num=1,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
stan_data_fit = getStanFit(beta = c('sameA', 'dist'), deltaM_value = 9,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 1,warmup_num = 100, core_num=1,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
stan_data_fit = getStanFit(beta = c('sameA', 'dist'), deltaM_value = 1,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 1,warmup_num = 100, core_num=1,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
stan_data_fit = getStanFit(beta = c('sameA', 'dist'), deltaM_value = 9,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 1,warmup_num = 100, core_num=1,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
stan_data_fit = getStanFit(beta = c('sameA', 'dist'), deltaM_value = 0,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 1,warmup_num = 100, core_num=1,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
require(devtools)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
# feature_data_8 = cbind(read.csv('exp2_dist_C3.csv')[,2],
#                        do.call(rbind, replicate(8, cbind(diag(7), getSameA(3)),
#                                                 simplify=FALSE)),
#                        read.csv('exp2_dist_C3.csv')[,-c(1:2)])
# colnames(feature_data_8) = c('qID',unlist(lapply(c('sameC_','sameA_','dist_'), function(x) paste0(x,1:7))))
# head(feature_data_8)
### usethis::use_data(feature_data_8, overwrite = FALSE)
stan_data_fit = getStanFit(beta = c('sameA', 'dist'), deltaM_value = 9,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 1,warmup_num = 100, core_num=1,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
stan_data_fit = getStanFit(beta = c('sameA', 'dist'), deltaM_value = 0,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 1,warmup_num = 100, core_num=1,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
stan_data_fit = getStanFit(beta = c('sameA', 'dist'), deltaM_value = 1,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 1,warmup_num = 100, core_num=1,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
stan_data_fit = getStanFit(beta = c('sameA', 'dist'), deltaM_value = 8,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 1,warmup_num = 100, core_num=1,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
import(Rcpp)
import(methods)
importFrom(rstan, sampling)
require(devtools)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F)##MUST BE FALSE THE FIRST TIME
devtools::load_all(".")
stan_data_fit = getStanFit(beta = c('sameA', 'dist'), deltaM_value = 8,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 1,warmup_num = 100, core_num=1,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
getStanFit
devtools::load_all(".")
require(devtools)
library(sampinfo)
library(bayesplot)
library(rstan)
library(knitr)
beta = c('sameC', 'sameA', 'dist')
deltaM_value = 1
beta = c('sameA', 'dist')
stan_data_fit = sampinfo::getStanFit(beta = beta, deltaM_value = 9,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 4,warmup_num = 100, core_num=4,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
require(devtools)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F) ##MUST BE FALSE THE FIRST TIME
use_package('plyr')
use_package('dplyr')
use_package('tidyr')
use_package('rstan')
use_package('utils')
use_package('stats')
use_package('truncnorm')
use_package('bayesplot')
require(dplyr)
import(Rcpp)
import(methods)
importFrom(rstan, sampling)
useDynLib(sampinfo)
require(devtools)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F) ##MUST BE FALSE THE FIRST TIME
use_package('plyr')
use_package('dplyr')
use_package('tidyr')
use_package('rstan')
use_package('utils')
use_package('stats')
use_package('truncnorm')
use_package('bayesplot')
require(devtools)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F) ##MUST BE FALSE THE FIRST TIME
require(devtools)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F) ##MUST BE FALSE THE FIRST TIME
require(devtools)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = F) ##MUST BE FALSE THE FIRST TIME
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = T) ##MUST BE FALSE THE FIRST TIME
getStanFit
# feature_data_8 = cbind(read.csv('exp2_dist_C3.csv')[,2],
#                        do.call(rbind, replicate(8, cbind(diag(7), getSameA(3)),
#                                                 simplify=FALSE)),
#                        read.csv('exp2_dist_C3.csv')[,-c(1:2)])
# colnames(feature_data_8) = c('qID',unlist(lapply(c('sameC_','sameA_','dist_'), function(x) paste0(x,1:7))))
# head(feature_data_8)
### usethis::use_data(feature_data_8, overwrite = FALSE)
stan_data_fit = getStanFit(beta = c('sameA', 'dist'), deltaM_value = 8,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 1,warmup_num = 100, core_num=1,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE,
hier_value = 0)
## save model fits and hmc diagnostics;
getModelDiag(stan_data_fit = stan_data_fit,
csv_name = NULL,#paste0(save_folder, 'exp', exp_no, '_', model_name,'_fits.csv'),
dev_name = 'dev_m')
## save parameter values;
getParaSummary(stan_data_fit = stan_data_fit,
csv_name = NULL#paste0(save_folder,'exp', exp_no, '_', model_name,'_para.csv'))
rm(stan_data_fit)
}
}
}
## save parameter values;
getParaSummary(stan_data_fit = stan_data_fit,
csv_name = NULL()#paste0(save_folder,'exp', exp_no, '_', model_name,'_para.csv'))
rm(stan_data_fit)
}
}
}
## save parameter values;
getParaSummary(stan_data_fit = stan_data_fit,
csv_name = NULL)#paste0(save_folder,'exp', exp_no, '_', model_name,'_para.csv'))
exp_no
beta_on
## fit rstan model;
stan_data_fit = getStanFit(beta = c('sameC','sameA','dist'), deltaM_value = 8,
option_num = cluster_num*2+1, format_data = data_exp,
save_model_file = NULL,#paste0(save_folder, 'exp', exp_no, '_', model_name),
init_values="random",
iter_num = iter_num, chain_num = chain_num,
warmup_num = warmup_num, core_num = core_num, refresh = refresh, save_warmup=T,
hier_value = 0)
data_exp = subset(data_all[[1]], qID == 1)
data_exp$qID = 1
# for (m in 1){
## model_name; used for names of saved files
model_name = paste0('m',cluster_num,'_',
paste(as.numeric(beta_on[m,]), collapse = ""),deltaM_value[m])
## fit rstan model;
stan_data_fit = getStanFit(beta = c('sameC','sameA','dist'), deltaM_value = 8,
option_num = cluster_num*2+1, format_data = data_exp,
save_model_file = NULL,#paste0(save_folder, 'exp', exp_no, '_', model_name),
init_values="random",
iter_num = iter_num, chain_num = chain_num,
warmup_num = warmup_num, core_num = core_num, refresh = refresh, save_warmup=T,
hier_value = 0)
data_exp = subset(data_all[[1]], qID == 1)
# feature_data_8 = cbind(read.csv('exp2_dist_C3.csv')[,2],
#                        do.call(rbind, replicate(8, cbind(diag(7), getSameA(3)),
#                                                 simplify=FALSE)),
#                        read.csv('exp2_dist_C3.csv')[,-c(1:2)])
# colnames(feature_data_8) = c('qID',unlist(lapply(c('sameC_','sameA_','dist_'), function(x) paste0(x,1:7))))
# head(feature_data_8)
### usethis::use_data(feature_data_8, overwrite = FALSE)
stan_data_fit = getStanFit(beta = c('sameA', 'dist'), deltaM_value = 8,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 1,warmup_num = 100, core_num=1,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE,
hier_value = 0)
etParaSummary(stan_data_fit = stan_data_fit)
getParaSummary(stan_data_fit = stan_data_fit)
require(devtools)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = T) ##MUST BE FALSE THE FIRST TIME
devtools::install(quick = FALSE) ##MUST BE FALSE THE FIRST TIME
# install.packages("rstantools")
# rstantools::rstan_create_package(path = '/Users/joyce/Dropbox/sampinfo',
# stan_files = c('mm10d01.stan','mm10d9.stan'))
# I finally found the solution. It is important to write the
# following lines of code in the NAMESPACE file, otherwise you will have the error mentioned above.
# import(Rcpp)
# import(methods)
# importFrom(rstan,sampling)
# useDynLib(rstanlm, .registration = TRUE)
#
import(Rcpp)
import(methods)
importFrom(rstan, sampling)
useDynLib(sampinfo)
require(devtools)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = FALSE) ##MUST BE FALSE THE FIRST TIME
require(devtools)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = FALSE) ##MUST BE FALSE THE FIRST TIME
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = FALSE) ##MUST BE FALSE THE FIRST TIME
use_package('plyr')
use_package('dplyr')
use_package('tidyr')
use_package('rstan')
use_package('utils')
use_package('stats')
use_package('truncnorm')
use_package('bayesplot')
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = FALSE) ##MUST BE FALSE THE FIRST TIME
