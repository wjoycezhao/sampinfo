data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 1,
warmup = 2,
cores = 1,
refresh = 100,
save_warmup = F,
init_r = 1
)
stan_data$cluster_rating_m
devtools::load_all(".")
stan_data = getStanData(
beta = c('sameA', 'dist'),
deltaM_value = 9,
binary_value = 0,
ar_value = 1,
random_value = 0,
deltaD_value = 1,
option_num = 9,
format_data = format_data,
X_sim = X_sim,
cluster_rating_m = cluster_rating_m,
max_tNo_prd = 30
)
stan_fit = rstan::stan(
file = 'mmdm_threshold.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 1,
warmup = 2,
cores = 1,
refresh = 100,
save_warmup = F,
init_r = 1
)
stan_fit = rstan::stan(
file = 'mmdm_threshold.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 1,
warmup = 2,
cores = 1,
refresh = 100,
save_warmup = F,
init_r = 1
)
getWAIC
devtools::load_all(".")
stan_data_fit = list(
stan_data = stan_data,
stan_fit = stan_fit
)
stan_fit = rstan::stan(
file = 'mmdm_threshold.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2,
refresh = 100,
save_warmup = F,
init_r = 1
)
stan_data_fit = list(
stan_data = stan_data,
stan_fit = stan_fit
)
getModelDiag
getModelDiag(stan_data_fit,dev_name = 'dev_d',logName = 'log_lik_d')
getModelDiag(stan_data_fit,dev_name = 'dev_d',logName = 'log_lik_m')
rbind(getModelDiag(stan_data_fit,dev_name = 'dev_d',logName = 'log_lik_d')
getModelDiag(stan_data_fit,dev_name = 'dev_m',logName = 'log_lik_m'))
rbind(getModelDiag(stan_data_fit,dev_name = 'dev_d',logName = 'log_lik_d'),
getModelDiag(stan_data_fit,dev_name = 'dev_m',logName = 'log_lik_m'))
getParaSummary(stan_data_fit = stan_data_fit)
getParaSummary
as.data.frame(
rstan::extract(stan_data_fit$stan_fit, pars = cID)
)
as.data.frame(
rstan::extract(stan_data_fit$stan_fit, pars = 'cID_prd')
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmdm_timelimit.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2,
refresh = 100,
save_warmup = F,
init_r = 1
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmdm_timelimit.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2,
refresh = 100,
save_warmup = F,
init_r = 1
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmdm_timelimit.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2,
refresh = 100,
save_warmup = F,
init_r = 1
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmdm_timelimit.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2,
refresh = 100,
save_warmup = F,
init_r = 1
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmdm_timelimit.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2,
refresh = 100,
save_warmup = F,
init_r = 1
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmdm_timelimit.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2,
refresh = 100,
save_warmup = F,
init_r = 1
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmdm_timelimit.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2,
refresh = 100,
save_warmup = F,
init_r = 1
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmdm_timelimit.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2,
refresh = 100,
save_warmup = F,
init_r = 1
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmdm_timelimit.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2,
refresh = 100,
save_warmup = F,
init_r = 1
)
stan_data_fit = list(
stan_data = stan_data,
stan_fit = stan_fit
)
rbind(getModelDiag(stan_data_fit,dev_name = 'dev_d',logName = 'log_lik_d'),
getModelDiag(stan_data_fit,dev_name = 'dev_m',logName = 'log_lik_m'))
getParaSummary(stan_data_fit = stan_data_fit)
as.data.frame(
rstan::extract(stan_data_fit$stan_fit, pars = 'cID_prd')
)
iter_num = 2000
chain_num = 4
warmup_num = 500
core_num = 4
cluster_num_all = c(3, 2, 4)
refresh = 1000
exp_num_all = 9
qq
qq=5
temp = getData(4,'exp1','')
format_data = subset(temp$format_data, qID == qq)
format_data$qID = 1
X_sim = temp$X_sim[[qq]]
cluster_rating_m = subset(temp$cluster_rating_m, qID == qq)[,-c(1:2)]
stan_data = getStanData(
beta = c('sameC','sameA', 'dist'),
deltaM_value = 8,
binary_value = 0,
ar_value = 0,
random_value = 0,
deltaD_value = 8,
option_num = 9,
format_data = format_data,
X_sim = X_sim,
cluster_rating_m = cluster_rating_m,
max_tNo_prd = 30
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmdm_timelimit.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 2000,
chains = 4,
warmup = 500,
cores = 4
# refresh = 100,
# save_warmup = F,
# init_r = 1
)
stan_data_fit = list(
stan_data = stan_data,
stan_fit = stan_fit
)
rbind(getModelDiag(stan_data_fit,dev_name = 'dev_d',logName = 'log_lik_d'),
getModelDiag(stan_data_fit,dev_name = 'dev_m',logName = 'log_lik_m'))
getParaSummary(stan_data_fit = stan_data_fit)
as.data.frame(
rstan::extract(stan_data_fit$stan_fit, pars = c('terminate_prd','cID_prd'))
)
getParaSummary(stan_data_fit = stan_data_fit)
getParaSummary(stan_data_fit = stan_data_fit)
changeBetaNames
x = getParaSummary(stan_data_fit = stan_data_fit)
#' Change variable names
#'
#' @param names A vector of characters. Variables taken from rstan outputs.
#' @inheritParams getStanFit
#' @param Q Number of questions
#' @param S Number of participants
#' @export
changeBetaNames = function(names, beta, Q, S) {
for (x in 1:length(beta)) {
names = plyr::mapvalues(
names,
warn_missing = FALSE,
from = c(
'deltaM.1.',
'deltaD.1.',
paste0('alpha.',1:9,'.'),
paste0('beta_mu.', x,'.'),
paste0('beta.', x,'.'),
'beta_mu',
paste0('beta_q_sd.', x,'.'),
paste0('beta_s_sd.', x,'.'),
paste0('beta_qmean.', x, '.', 1:Q,'.'),
paste0('beta_smean.', x, '.', 1:S,'.'),
paste0('beta_qdev.', x, '.', 1:Q,'.'),
paste0('beta_sdev.', x, '.', 1:S,'.'),
'beta_q_sd',
'beta_s_sd',
unlist(lapply(1:Q, function(y)
paste0('beta.', y, '.', x, '.', 1:S)))
),
to = c(
'deltaM',
'deltaD',
paste0('alpha.',1:9),
paste0('beta_', beta[x], '_mu'),
paste0('beta_', beta[x]),
paste0('beta_', beta[1], '_mu'),
paste0('beta_', beta[x], '_q_sd'),
paste0('beta_', beta[x], '_s_sd'),
paste0('beta_', beta[x], '_qmean_', 1:Q),
paste0('beta_', beta[x], '_smean_', 1:S),
paste0('beta_', beta[x], '_qdev_', 1:Q),
paste0('beta_', beta[x], '_sdev_', 1:S),
paste0('beta_', beta[1], '_q_sd'),
paste0('beta_', beta[1], '_s_sd'),
unlist(lapply(1:Q, function(y)
paste0('beta_', beta[x], '_', y, '_', 1:S)))
)
)
names = plyr::mapvalues(
names,
warn_missing = FALSE,
from = c(
paste0('beta_mu[', x, ']'),
paste0('beta[', x, ']'),
paste0('beta_q_sd[', x, ']'),
paste0('beta_s_sd[', x, ']'),
paste0('beta_qmean[', x, ',', 1:Q, ']'),
paste0('beta_smean[', x, ',', 1:S, ']'),
paste0('beta_qdev[', x, ',', 1:Q, ']'),
paste0('beta_sdev[', x, ',', 1:S, ']'),
unlist(lapply(1:Q, function(y)
paste0('beta.', y, '.', x, '.', 1:S)))
),
to = c(
paste0('beta_', beta[x], '_mu'),
paste0('beta_', beta[x]),
paste0('beta_', beta[x], '_q_sd'),
paste0('beta_', beta[x], '_s_sd'),
paste0('beta_', beta[x], '_qmean_', 1:Q),
paste0('beta_', beta[x], '_smean_', 1:S),
paste0('beta_', beta[x], '_qdev_', 1:Q),
paste0('beta_', beta[x], '_sdev_', 1:S),
unlist(lapply(1:Q, function(y)
paste0('beta_', beta[x], '_', y, '_', 1:S)))
)
)
}
return(names)
}
changeBetaNames(x,c('x','y','z'),1,2)
changeBetaNames(rownames(x),c('x','y','z'),1,2)
#' Parameter summary.
#'
#' \code{getParaSummary} return parameter summaries for group and individual level parameters,
#' including means, percentiles, and sd.
#' It also saves the results to a .csv file when \code{csv_name} is specified
#'
#' @param stan_data_fit model outputs obtained from getStanFit
#' @param csv_name if specified then outputs will be saved in a .csv file starting with this name
#'
#' @export
getParaSummary = function(stan_data_fit, csv_name = NULL) {
stan_data = stan_data_fit$stan_data
stan_fit = stan_data_fit$stan_fit
para_name = colnames(as.data.frame(stan_data_fit$stan_fit))
beta = stan_data_fit$beta
parameters0 = para_name[stringr::str_detect(para_name,
'delta|beta|alpha|p_end|sigma|threshold')]
parameters0 = parameters0[!stringr::str_detect(parameters0,
'raw')]
parameters0 = c(parameters0, para_name[stringr::str_detect(para_name,
'threshold_mu_raw|sigma_mult_mu_raw')])
# if (stan_data_fit$stan_data$hier_value == 0) {
#   parameters0 = c('deltaM', 'beta', 'alpha')
# } else {
#   parameters0 = c(
#     'deltaM_mu',
#     'deltaM_mu_raw',
#     'deltaM_q_sd',
#     'deltaM_s_sd',
#     'beta_mu',
#     'beta_q_sd',
#     'beta_s_sd',
#     'deltaM_qmean',
#     'deltaM_smean',
#     'beta_qmean',
#     'beta_smean',
#     'beta_qdev',
#     'beta_sdev',
#     'alpha',
#     'beta'
#   )
# }
df = t(sapply(as.data.frame(
rstan::extract(stan_fit, pars = parameters0)
), quantile1))
rownames(df) = changeBetaNames(rownames(df), beta, stan_data$Q, stan_data$S)
if (!is.null(csv_name)) {
write.table(
df,
csv_name,
sep = ",",
append = FALSE,
quote = FALSE,
col.names = NA,
row.names = TRUE
)
}
return(df)
}
getParaSummary(stan_data_fit = stan_data_fit)
devtools::load_all(".")
getParaSummary(stan_data_fit = stan_data_fit)
devtools::load_all(".")
getParaSummary(stan_data_fit = stan_data_fit)
qq=5
temp = getData(4,'exp1','')
format_data = subset(temp$format_data, qID == qq)
stan_data_fit = getStanFit(beta = c('sameA', 'dist'), deltaM_value = 8,
option_num = 9, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 20,chain_num = 1,warmup_num = 5, core_num=8,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE,
hier_value = 0)
qq=1
temp = getData(4,'exp1','')
format_data = subset(temp$format_data, qID == qq)
stan_data_fit = getStanFit(beta = c('sameA', 'dist'), deltaM_value = 8,
option_num = 9, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 20,chain_num = 1,warmup_num = 5, core_num=8,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE,
hier_value = 0)
getParaSummary(stan_data_fit = stan_data_fit)
stan_data_fit = getStanFit(binary_value = 0,
ar_value = 0,
random_value = 0,
deltaD_value = 1,
option_num = 7, format_data = md_data,
save_model_file = NULL, init_values="random",
iter_num = 500,chain_num = 1,warmup_num = 200, core_num=1,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE,
hier_value = 0)
getParaSummary(stan_data_fit = stan_data_fit)
getModelDiag(stan_data_fit,dev_name = 'dev_d')
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmdm_timelimit.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2
# refresh = 100,
# save_warmup = F,
# init_r = 1
)
qq=5
temp = getData(4,'exp1','')
format_data = subset(temp$format_data, qID == qq)
format_data$qID = 1
X_sim = temp$X_sim[[qq]]
cluster_rating_m = subset(temp$cluster_rating_m, qID == qq)[,-c(1:2)]
stan_data = getStanData(
beta = c('sameC','sameA', 'dist'),
deltaM_value = 8,
binary_value = 0,
ar_value = 0,
random_value = 0,
deltaD_value = 8,
option_num = 9,
format_data = format_data,
X_sim = X_sim,
cluster_rating_m = cluster_rating_m,
max_tNo_prd = 30
)
require(devtools)
pkgbuild::compile_dll(force = TRUE)
require(devtools)
pkgbuild::compile_dll(force = TRUE)
