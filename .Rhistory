core_num = core_num,
refresh = refresh)
data_folder = ''
data_all = getData(cluster_num = cluster_num,
data = read.csv(paste0(data_folder, 'exp1', "_data_c", cluster_num, ".csv")),
dist = read.csv(paste0(data_folder, 'exp1', "_dist_c", cluster_num, ".csv"), row.names = 1))
qID = sample(1:8, 1)
deltaM_true = deltaM[i]
alpha_true = alpha[i,]
beta_true = beta[i,]
deltaD_true = deltaD[i]
threshold_true = threshold[i]
sigma_true = sigma[i]
temp = getSimulation(cluster_num = cluster_num,
sim_total = 250,
X_sim = lapply(data_all$X_sim[[qID]], as.matrix),
deltaM_value = deltaM_value,
deltaD_value = deltaD_value,
ar_value = ar_value,
max_tNo_prd = max_tNo_prd,
seed_no = i,
deltaM_true = deltaM_true,
alpha_true = alpha_true,
beta_true = beta_true,
deltaD_true = deltaD_true,
threshold_true = threshold_true,
sigma_true = sigma_true,
iter_num = iter_num,
chain_num = chain_num,
warmup_num = warmup_num,
core_num = core_num,
refresh = refresh)
i=2
stan_data_sim = list(
C = 2 * cluster_num + 1,
MC = cluster_num + 1,
K = length(beta_true),
X_sim = X_sim,
max_tNo_prd = max_tNo_prd,
deltaM = c(deltaM_true, deltaM_true),
alpha = alpha_true,
beta = beta_true,
deltaD = c(deltaD_true, deltaD_true),
threshold = threshold_true,
sigma = sigma_true,
ar_value = ar_value,
deltaM_value = deltaM_value,
deltaD_value = deltaD_value
)
if (deltaM_value != 8) {
deltaM = deltaM_value
}
if (deltaD_value != 8) {
deltaD = deltaD_value
}
alpha_true = c(alpha_true, 0)
stan_data_sim = list(
C = 2 * cluster_num + 1,
MC = cluster_num + 1,
K = length(beta_true),
X_sim = X_sim,
max_tNo_prd = max_tNo_prd,
deltaM = c(deltaM_true, deltaM_true),
alpha = alpha_true,
beta = beta_true,
deltaD = c(deltaD_true, deltaD_true),
threshold = threshold_true,
sigma = sigma_true,
ar_value = ar_value,
deltaM_value = deltaM_value,
deltaD_value = deltaD_value
)
X_sim = lapply(data_all$X_sim[[qID]], as.matrix)
sim_total = 250
stan_data_fit = getStanFit(
binary_value =  1,
ar_value =  1,
random_value =  0,
deltaD_value = 8,
option_num = 3 * 2 + 1,
format_data = md_data,
init_r = 1,
#paste0(save_folder, 'exp', exp_no, '_', model_name),
iter_num = 2,
chain_num = 1,
warmup_num = 0,
core_num = 1,
refresh = 2,
save_warmup = T,
hier_value = 0)
data_folder = ''
data_all = getData(cluster_num = cluster_num,
data = read.csv(paste0(data_folder, 'exp1', "_data_c", cluster_num, ".csv")),
dist = read.csv(paste0(data_folder, 'exp1', "_dist_c", cluster_num, ".csv"), row.names = 1))
data_all = subset(data_all[[1]],qID == 1)
stan_data_fit = getStanFit(
binary_value =  1,
ar_value =  0,
random_value =  0,
deltaD_value = 8,
option_num = 3 * 2 + 1,
format_data = md_data,
init_r = 1,
#paste0(save_folder, 'exp', exp_no, '_', model_name),
iter_num = 2,
chain_num = 1,
warmup_num = 0,
core_num = 1,
refresh = 2,
save_warmup = T,
hier_value = 0)
stan_data_fit = getStanFit(
binary_value =  1,
ar_value =  0,
random_value =  0,
deltaD_value = 8,
option_num = 3 * 2 + 1,
format_data = md_data,
init_r = 1,
#paste0(save_folder, 'exp', exp_no, '_', model_name),
iter_num = 2,
chain_num = 2000,
warmup_num = 500,
core_num = 1,
refresh = 2,
save_warmup = F,
hier_value = 0)
data_folder = ''
data_all = getData(cluster_num = cluster_num,
data = read.csv(paste0(data_folder, 'exp1', "_data_c", cluster_num, ".csv")),
dist = read.csv(paste0(data_folder, 'exp1', "_dist_c", cluster_num, ".csv"), row.names = 1))
data_all = subset(data_all[[1]],qID == 1)
stan_data_fit = getStanFit(
binary_value =  1,
ar_value =  0,
random_value =  0,
deltaD_value = 8,
option_num = 3 * 2 + 1,
format_data = data_all,
init_r = 1,
#paste0(save_folder, 'exp', exp_no, '_', model_name),
iter_num = 2,
chain_num = 2000,
warmup_num = 500,
core_num = 1,
refresh = 2,
save_warmup = F,
hier_value = 0)
data_folder = ''
data_all = getData(cluster_num = cluster_num,
data = read.csv(paste0(data_folder, 'exp1', "_data_c", cluster_num, ".csv")),
dist = read.csv(paste0(data_folder, 'exp1', "_dist_c", cluster_num, ".csv"), row.names = 1))
data_all = subset(data_all[[1]],qID == 1)
stan_data_fit = getStanFit(
binary_value =  1,
ar_value =  0,
random_value =  0,
deltaD_value = 8,
option_num = 3 * 2 + 1,
format_data = data_all,
init_r = 1,
#paste0(save_folder, 'exp', exp_no, '_', model_name),
iter_num = 2000,
chain_num = 1,
warmup_num = 500,
core_num = 1,
refresh = 2,
save_warmup = F,
hier_value = 0)
data_folder = ''
data_all = getData(cluster_num = cluster_num,
data = read.csv(paste0(data_folder, 'exp1', "_data_c", cluster_num, ".csv")),
dist = read.csv(paste0(data_folder, 'exp1', "_dist_c", cluster_num, ".csv"), row.names = 1))
data_all = subset(data_all[[1]],qID == 1)
stan_data_fit = getStanFit(
binary_value =  1,
ar_value =  0,
random_value =  0,
deltaD_value = 8,
option_num = 3 * 2 + 1,
format_data = data_all,
init_r = 1,
#paste0(save_folder, 'exp', exp_no, '_', model_name),
iter_num = 2000,
chain_num = 1,
warmup_num = 500,
core_num = 1,
refresh = 2000,
save_warmup = F,
hier_value = 0)
getParaSummary(stan_data_fit = stan_data_fit)
cluster_num = 3
deltaM_value = 8
deltaD_value = 8
max_tNo_prd = 30
seed_no
seed_no = 1
refresh = 500
require(dplyr)
require(sampinfo)
test = 1
if (test) {
iter_num = 5
chain_num = 1
warmup_num = 0
core_num = 1
refresh = 100
} else{
iter_num = 2000
chain_num = 4
warmup_num = 500
core_num = 4
refresh = 1000
}
size = 300
cluster_num = 3
deltaM_value = 8
deltaD_value = 8
max_tNo_prd = 30
ar_value = 0
save_folder = 'fits/'
I
i
qID = sample(1:8, 1)
deltaM_true = deltaM[i]
alpha_true = alpha[i,]
beta_true = beta[i,]
deltaD_true = deltaD[i]
threshold_true = threshold[i]
sigma_true = sigma[i]
qID
deltaM_true
alpha_true
beta_true
deltaD_true
threshold_true
sigma_true
sim_total
stan_data_sim = list(
C = 2 * cluster_num + 1,
MC = cluster_num + 1,
K = length(beta_true),
X_sim = X_sim,
max_tNo_prd = max_tNo_prd,
deltaM = c(deltaM_true, deltaM_true),
alpha = alpha_true,
beta = beta_true,
deltaD = c(deltaD_true, deltaD_true),
threshold = threshold_true,
sigma = sigma_true,
ar_value = ar_value,
deltaM_value = deltaM_value,
deltaD_value = deltaD_value
)
stan_data_sim
stan_fit = rstan::sampling(
stanmodels$simulate,
data = stan_data_sim,
seed = seed_no,
iter = sim_total,
chains = 1,
warmup = 0,
cores = 1,
refresh = refresh,
algorithm = "Fixed_param"
)
alpha_true
alpha_true = c(alpha_true, 0)
alpha_true
stan_fit = rstan::sampling(
stanmodels$simulate,
data = stan_data_sim,
seed = seed_no,
iter = sim_total,
chains = 1,
warmup = 0,
cores = 1,
refresh = refresh,
algorithm = "Fixed_param"
)
stan_data_sim = list(
C = 2 * cluster_num + 1,
MC = cluster_num + 1,
K = length(beta_true),
X_sim = X_sim,
max_tNo_prd = max_tNo_prd,
deltaM = c(deltaM_true, deltaM_true),
alpha = alpha_true,
beta = beta_true,
deltaD = c(deltaD_true, deltaD_true),
threshold = threshold_true,
sigma = sigma_true,
ar_value = ar_value,
deltaM_value = deltaM_value,
deltaD_value = deltaD_value
)
stan_fit = rstan::sampling(
stanmodels$simulate,
data = stan_data_sim,
seed = seed_no,
iter = sim_total,
chains = 1,
warmup = 0,
cores = 1,
refresh = refresh,
algorithm = "Fixed_param"
)
sim_data = as.data.frame(rstan::extract(stan_fit, pars = c('cID_prd'))) %>%
mutate(sID = 1:sim_total) %>%
mutate(sID = 1:sim_total) %>%
tidyr::gather(tNo, cID, 'cID_prd.1':'cID_prd.30') %>%
mutate(
qID = 1,
tNo = readr::parse_number(
tNo,
locale = readr::locale(grouping_mark = ". ", decimal_mark = ",")
),
rating = sign(cID - cluster_num - 1)
) %>%
filter(cID != 99) %>% arrange(sID, tNo) %>%
group_by(sID) %>%
mutate(terminate = ifelse(tNo == max(tNo), 1, 0)) %>% ungroup()
sim_data = as.data.frame(rstan::extract(stan_fit, pars = c('cID_prd'))) %>%
mutate(sID = 1:sim_total) %>%
mutate(sID = 1:sim_total) %>%
tidyr::gather(tNo, cID, 'cID_prd.1':'cID_prd.30') %>%
mutate(
qID = 1,
tNo = readr::parse_number(
tNo,
locale = readr::locale(grouping_mark = ". ", decimal_mark = ",")
),
rating = sign(cID - cluster_num - 1)
) %>%
filter(cID != 99) %>% arrange(sID, tNo) %>%
group_by(sID) %>%
mutate(terminate = ifelse(tNo == max(tNo), 1, 0)) %>% ungroup()
sim_data$terminate[sim_data$terminate == 1] = unlist(rstan::extract(stan_fit, pars = c('terminate_prd')))
sim_data = as.data.frame(sim_data)
dist = data.frame(qID = 1, do.call(cbind, lapply(X_sim, function(x)
x[, 3])))
sim_data = getData(cluster_num = 3,
data = as.data.frame(sim_data),
dist = dist)[[1]]
option_num = 2 * cluster_num + 1
sim_data
stan_data_fit = getStanFit(
binary_value = 1,
ar_value = ar_value,
random_value = 0,
deltaD_value = deltaD_value,
option_num = option_num,
format_data = sim_data, #sim_data[,1:6],
iter_num = iter_num,
chain_num = chain_num,
warmup_num = warmup_num,
core_num = core_num,
adapt_delta = 0.9,
stepsize = 0.5,
max_treedepth = 10,
refresh = refresh,
hier_value = 0
)
iter_num = 2000
chain_num = 4
warmup_num = 500
core_num = 4
refresh = 1000
stan_data_fit = getStanFit(
binary_value = 1,
ar_value = ar_value,
random_value = 0,
deltaD_value = deltaD_value,
option_num = option_num,
format_data = sim_data, #sim_data[,1:6],
iter_num = iter_num,
chain_num = chain_num,
warmup_num = warmup_num,
core_num = core_num,
adapt_delta = 0.9,
stepsize = 0.5,
max_treedepth = 10,
refresh = refresh,
hier_value = 0
)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
#
devtools::install(quick = TRUE)
#
devtools::install(quick = FALSE) ##MUST BE FALSE THE FIRST TIME
# # importFrom(rstan,sampling)
# # useDynLib(rstanlm, .registration = TRUE)
# #
# import(Rcpp)
# import(methods)
# importFrom(rstan, sampling)
# useDynLib(sampinfo)
#
# require(devtools)
#
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
#
devtools::install(quick = FALSE) ##MUST BE FALSE THE FIRST TIME
require(devtools)
# # importFrom(rstan,sampling)
# # useDynLib(rstanlm, .registration = TRUE)
# #
# import(Rcpp)
# import(methods)
# importFrom(rstan, sampling)
# useDynLib(sampinfo)
#
# require(devtools)
#
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
#
devtools::install(quick = FALSE) ##MUST BE FALSE THE FIRST TIME
# # importFrom(rstan,sampling)
# # useDynLib(rstanlm, .registration = TRUE)
# #
# import(Rcpp)
# import(methods)
# importFrom(rstan, sampling)
# useDynLib(sampinfo)
#
# require(devtools)
#
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = FALSE) ##MUST BE FALSE THE FIRST TIME
roxygen2::roxygenise(clean = TRUE)
?getStanFit
roxygen2::roxygenise(clean = TRUE)
roxygen2::roxygenise(clean = TRUE)
?getStanFit
?(sampinfo::getStanFit)
require(sampinfo)
?getStanFit
# # importFrom(rstan,sampling)
# # useDynLib(rstanlm, .registration = TRUE)
# #
# import(Rcpp)
# import(methods)
# importFrom(rstan, sampling)
# useDynLib(sampinfo)
#
# require(devtools)
#
pkgbuild::compile_dll(force = TRUE)#
roxygen2::roxygenise(clean = TRUE)
?getStanFit
getStanCode()
getData()
getData
replicate(nrow(5), matrix(0, 3, 0), simplify = FALSE)
replicate(c(5), matrix(0, 3, 0), simplify = FALSE)
#
pkgbuild::compile_dll(force = TRUE)#
devtools::install(quick = FALSE) #
roxygen2::roxygenise(clean = TRUE)
# # importFrom(rstan,sampling)
# # useDynLib(rstanlm, .registration = TRUE)
# #
# import(Rcpp)
# import(methods)
# importFrom(rstan, sampling)
# useDynLib(sampinfo)
#
# require(devtools)
#
pkgbuild::compile_dll(force = TRUE)#
# # importFrom(rstan,sampling)
# # useDynLib(rstanlm, .registration = TRUE)
# #
# import(Rcpp)
# import(methods)
# importFrom(rstan, sampling)
# useDynLib(sampinfo)
#
# require(devtools)
#
pkgbuild::compile_dll(force = TRUE)#
# # importFrom(rstan,sampling)
# # useDynLib(rstanlm, .registration = TRUE)
# #
# import(Rcpp)
# import(methods)
# importFrom(rstan, sampling)
# useDynLib(sampinfo)
#
# require(devtools)
#
pkgbuild::compile_dll(force = TRUE)#
devtools::install(quick = FALSE) #
pkgbuild::compile_dll(force = TRUE)#
devtools::install(quick = FALSE) #
pkgbuild::compile_dll(force = TRUE)#
devtools::install(quick = FALSE) #
roxygen2::roxygenise(clean = TRUE)
pkgbuild::compile_dll(force = TRUE)#
devtools::install(quick = FALSE) #
devtools::load_all(".")
roxygen2::roxygenise(clean = TRUE)
devtools::load_all(".")
getStanFit()
?getStanFit
pkgbuild::compile_dll(force = TRUE)#
devtools::install(quick = FALSE) #
roxygen2::roxygenise(clean = TRUE)
