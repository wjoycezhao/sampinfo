np_style = trace_style_np(div_color = "black", div_size = 0.5)
)
library(bayesplot)
posterior_w = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior_w)
lapply(dimnames(posterior_w), head)
bayesplot::color_scheme_set("viridis")
mcmc_trace(posterior_w, pars = c("deltaM", "beta_mu[1]","beta_s_sd[1]","beta_q_sd[1]","beta_s_raw[1,3]","beta_q_raw[1,3]"),
size = 0.5,n_warmup=200,
facet_args = list(nrow = 6),
np_style = trace_style_np(div_color = "black", div_size = 0.5)
)
library(rstan)
stan_data_fit = getStanFit(beta= c('sameA', 'dist'), deltaM_value = 9,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 4,warmup_num = 100, core_num=4,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,refresh=1000, save_warmup = TRUE)
library(bayesplot)
posterior_w = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior_w)
lapply(dimnames(posterior_w), head)
bayesplot::color_scheme_set("viridis")
mcmc_trace(posterior_w, pars = c("deltaM", "beta_mu[1]","beta_s_sd[1]","beta_q_sd[1]","beta_s_raw[1,3]","beta_q_raw[1,3]"),
size = 0.5,n_warmup=200,
np_style = trace_style_np(div_color = "black", div_size = 0.5)
)
model_diag
model_diag = getModelDiag(stan_data_fit = stan_data_fit)
print(model_diag[,])
print(model_diag[,11:16])
library(bayesplot)
posterior_w = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior_w)
lapply(dimnames(posterior_w), head)
bayesplot::color_scheme_set("viridis")
mcmc_trace(posterior_w, pars = c("deltaM", "beta_mu[1]","beta_s_sd[1]","beta_q_sd[1]","beta_s_raw[1,3]","beta_q_raw[1,3]"),
size = 0.5,n_warmup=100,
np_style = trace_style_np(div_color = "black", div_size = 0.5)
)
pars0 = c("deltaM", "beta_mu[1]","beta_s_sd[1]","beta_q_sd[1]","beta_s_raw[1,3]","beta_q_raw[1,3]")
library(bayesplot)
posterior_w = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior_w)
lapply(dimnames(posterior_w), head)
bayesplot::color_scheme_set("viridis")
pars0 = c("deltaM", "beta_mu[1]","beta_s_sd[1]","beta_q_sd[1]","beta_s_raw[1,3]","beta_q_raw[1,3]")
bayesplot::mcmc_trace(posterior_w, pars = pars0,
size = 0.5,n_warmup=100,
np_style = trace_style_np(div_color = "black", div_size = 0.5)
)
bayesplot::mcmc_rank_overlay(posterior_w, pars = pars0)
bayesplot::mcmc_trace(posterior_w, pars = pars0, size = 0.2,n_warmup=100)
bayesplot::mcmc_trace(posterior_w, pars = pars0, size = 0.2,n_warmup=100)
bayesplot::mcmc_rank_overlay(posterior_w, pars = pars0, size = 0.2,n_warmup=100)
library(rstan)
stan_data_fit = getStanFit(beta= c('sameA', 'dist'), deltaM_value = 9,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 100,chain_num = 4,warmup_num = 100, core_num=4,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,refresh=1000, save_warmup = TRUE)
library(bayesplot)
posterior_w = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior_w)
lapply(dimnames(posterior_w), head)
bayesplot::color_scheme_set("viridis")
pars0 = c("deltaM", "beta_mu[1]","beta_s_sd[1]","beta_q_sd[1]","beta_s_raw[1,3]","beta_q_raw[1,3]")
bayesplot::mcmc_trace(posterior_w, pars = pars0, size = 0.2,n_warmup=100)
library(rstan)
stan_data_fit = getStanFit(beta= c('sameA', 'dist'), deltaM_value = 9,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 150,chain_num = 4,warmup_num = 100, core_num=4,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,refresh=1000, save_warmup = TRUE)
model_diag = getModelDiag(stan_data_fit = stan_data_fit)
print(model_diag[,11:16])
library(bayesplot)
posterior_w = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior_w)
lapply(dimnames(posterior_w), head)
bayesplot::color_scheme_set("viridis")
pars0 = c("deltaM", "beta_mu[1]","beta_s_sd[1]","beta_q_sd[1]","beta_s_raw[1,3]","beta_q_raw[1,3]")
bayesplot::mcmc_trace(posterior_w, pars = pars0, size = 0.2,n_warmup=100)
bayesplot::mcmc_rank_overlay(posterior_w, pars = pars0, size = 0.2,n_warmup=100)
getRhat(stan_data_fit = stan_data_fit)
getRhat(stan_data_fit = stan_data_fit$stan_fit)
getRhat(stan_data_fit$stan_fit)
getRhat(stan_data_fit$stan_fit)->X
X[,1]
X[X>1.01]
X[X>1.01]
X[X>1.02]
X[X>1.03]
X[X>1.04]
X[X>1.05]
library(bayesplot)
posterior_w = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior_w)
lapply(dimnames(posterior_w), head)
bayesplot::color_scheme_set("viridis")
pars0 = c("deltaM", "beta_mu[2]","beta_s_sd[2]","beta_q_sd[2]]","beta[3,2,6]","beta[4,2,6]")
bayesplot::mcmc_trace(posterior_w, pars = pars0, size = 0.2,n_warmup=100)
library(bayesplot)
posterior_w = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior_w)
lapply(dimnames(posterior_w), head)
bayesplot::color_scheme_set("viridis")
pars0 = c("deltaM", "beta_mu[2]","beta_s_sd[2]","beta_q_sd[2]","beta[3,2,6]","beta[4,2,6]")
bayesplot::mcmc_trace(posterior_w, pars = pars0, size = 0.2,n_warmup=100)
bayesplot::mcmc_rank_overlay(posterior_w, pars = pars0, size = 0.2,n_warmup=100)
bayesplot::mcmc_trace(posterior_w, pars = pars0, n_warmup=100)
bayesplot::mcmc_trace(posterior_w, pars = pars0, n_warmup=100, size = 0.5)
bayesplot::mcmc_trace(posterior_w, pars = pars0, n_warmup=100, size = 0.5,  facet_args = list(nrow = 3),
)
bayesplot::mcmc_rank_overlay(posterior_w, pars = pars0, size = 0.2,n_warmup=100)
bayesplot::color_scheme_set("viridisA")
bayesplot::mcmc_trace(posterior_w, pars = pars0, n_warmup=100, size = 0.5,  facet_args = list(nrow = 3),
)
bayesplot::mcmc_rank_overlay(posterior_w, pars = pars0)
model_diag = getModelDiag(stan_data_fit = stan_data_fit)
print(model_diag[,11:16])
rhat = getRhat(stan_data_fit$stan_fit)
print(rhat[rhat>1.05&!is.na(rhat)])
model_diag = getModelDiag(stan_data_fit = stan_data_fit)
print(model_diag[,11:16])
rhat = getRhat(stan_data_fit$stan_fit)
print(rhat[rhat>1.05&!is.na(rhat)])
```{r, dpi=300, out.width = "60%"}
library(bayesplot)
posterior_w = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior_w)
lapply(dimnames(posterior_w), head)
bayesplot::color_scheme_set("viridis")
pars0 = c("beta_mu[2]","beta_s_sd[2]","beta[3,2,6]","beta[4,2,6]")
bayesplot::mcmc_trace(posterior_w, pars = pars0,
n_warmup=100, size = 0.5,
facet_args = list(nrow = 3))
bayesplot::mcmc_rank_overlay(posterior_w, pars = pars0, window=c(0,100))
library(bayesplot)
posterior_w = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior_w)
library(sampinfo)
library(rstan)
stan_data_fit = getStanFit(beta= c('sameA', 'dist'), deltaM_value = 9,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 4,warmup_num = 100, core_num=4,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
model_diag = getModelDiag(stan_data_fit = stan_data_fit)
print(model_diag[,11:16])
rhat = getRhat(stan_data_fit$stan_fit)
print(rhat[rhat>1.05&!is.na(rhat)])
library(sampinfo)
library(bayesplot)
library(rstan)
posterior_w = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior_w)
lapply(dimnames(posterior_w), head)
bayesplot::color_scheme_set("viridis")
pars0 = c("beta_mu[2]","beta_s_sd[2]","beta_q_sd[2]","beta[3,2,6]","deltaM","alpha[3,1]")
bayesplot::mcmc_trace(posterior_w, pars = pars0,
n_warmup=100, size = 0.5,
facet_args = list(nrow = 3))
source('~/.active-rstudio-document', echo=TRUE)
print(rhat[rhat>1.01&!is.na(rhat)])
print(rhat[rhat>1.02&!is.na(rhat)])
print(rhat[rhat>1.03&!is.na(rhat)])
print(model_diag[,11:16])
posterior_w = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
posterior_w = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior_w)
lapply(dimnames(posterior_w), head)
bayesplot::color_scheme_set("viridis")
pars0 = c("beta_mu[2]","beta_s_sd[2]","beta_q_sd[2]","beta[3,2,6]","deltaM","alpha[3,1]")
bayesplot::mcmc_trace(posterior_w, pars = pars0,
n_warmup=100, size = 0.5,
facet_args = list(nrow = 3))
print(rhat[rhat>1.03&!is.na(rhat)])
bayesplot::mcmc_rank_overlay(posterior_w, pars = pars0)
model_diag = getModelDiag(stan_data_fit = stan_data_fit)
print(model_diag)
print(head(getRhat(stan_data_fit$stan_fit)))
print(head(getESS(stan_data_fit$stan_fit)))
rhat = sampinfo::getRhat(stan_data_fit$stan_fit)
sampinfo::raw_data
mcmc_intervals(posterior, pars = c("deltaM"))
mcmc_intervals(para, pars = c("deltaM"))
para = sampinfo::getParaSummary(stan_data_fit = stan_data_fit)
mcmc_intervals(para, pars = c("deltaM"))
class(posterior)
dims(posterior)
head(stan_data_fit$stan_fit)
dim(stan_data_fit$stan_fit)
stan_data_fit$stan_fit[[2]]
stan_data_fit$stan_fit[,3]
dimnames(stan_data_fit$stan_fit)
dimnames(stan_data_fit$stan_fit)
require(devtools)
load_all()
stan_data = stan_data_fit$stan_data
stan_fit = stan_data_fit$stan_fit
beta = stan_data_fit$beta
parameters0 = c('deltaM','beta_mu','beta_q_sd',
'beta_s_sd','beta_qmean','beta_smean','beta_qdev','beta_sdev',
'alpha','beta')
df = t(sapply(as.data.frame(rstan::extract(stan_fit,pars=parameters0)),quantile1))
rownames(df) = changeBetaNames(rownames(df), beta, stan_data$Q, stan_data$S)
head(df)
document()
roxygen2::roxygenise(clean=TRUE)
pkgbuild::compile_dll()
roxygen2::roxygenise(clean=TRUE)
roxygen2::roxygenise(clean=TRUE)
roxygen2::roxygenise(clean=TRUE)
devtools::install(quick=FALSE)
document()
require(devtools)
load_all()
use_package('plyr')
use_package('dplyr')
use_package('tidyr')
use_package('rstan')
use_package('utils')
use_package('stats')
raw_data = subset(read.csv('exp2_data_C3.csv'),sID<8&qID<6)[,-1]
format_data = subset(getDataHier(3,'exp2')$format_data,sID<8,qID<6)[,-1]
usethis::use_data(raw_data, format_data, overwrite = TRUE)
require(dplyr)
raw_data = subset(read.csv('exp2_data_C3.csv'),sID<8&qID<6)[,-1]
format_data = subset(getDataHier(3,'exp2')$format_data,sID<8,qID<6)[,-1]
usethis::use_data(raw_data, format_data, overwrite = TRUE)
# pkgbuild::compile_dll()
roxygen2::roxygenise(clean=TRUE)
document()
devtools::install(quick=T)
# pkgbuild::compile_dll()
roxygen2::roxygenise(clean=TRUE)
devtools::install(quick=T)
devtools::load_all(".")
getStanCode(9)
devtools::install(quick=T)
?changeBetaName
?changeBetaNames
dimnames(stan_data_fit$stan_fit)
stan_data_fit = sampinfo::getStanFit(beta= c('sameA', 'dist'), deltaM_value = 9,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 4,warmup_num = 100, core_num=4,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
require(sampinfo\)
require(sampinfo)
stan_data_fit = sampinfo::getStanFit(beta= c('sameA', 'dist'), deltaM_value = 9,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 4,warmup_num = 100, core_num=4,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
dimnames(stan_data_fit$stan_fit)
dimnames(stan_data_fit$stan_fit$parameters)
posterior = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior)
dimnames(posterior_w[[1]])
dimnames(posterior[[1]])
dimnames(posterior[[2]])
dimnames(posterior[[2]])
dimnames(posterior[3])
dimnames(posterior)
dimnames(posterior$parameters)
class(posterior)
class(posterio
)
posterior[,,3]
simpinfo::changeBetaNames(dimnames(posterior)[[3]])
sampinfo::changeBetaNames(dimnames(posterior)[[3]])
sampinfo::changeBetaNames(dimnames(posterior)[[3]],c())
beta = c('sameA', 'dist')
sampinfo::changeBetaNames(dimnames(posterior)[[3]],beta)
sampinfo::changeBetaNames(dimnames(posterior)[[3]],beta,max(data_format$qID))
sampinfo::changeBetaNames(dimnames(posterior)[[3]],beta,max(data_format$qID))
require(sampinfo)
sampinfo::changeBetaNames(dimnames(posterior)[[3]],beta,max(data_format$qID))
sampinfo::changeBetaNames(dimnames(posterior)[[3]],beta,max(format_data$qID))
sampinfo::changeBetaNames(dimnames(posterior)[[3]],beta,max(format_data$qID),max(format_data$sID))
devtools::load_all(".")
sampinfo::changeBetaNames(dimnames(posterior)[[3]],beta,max(format_data$qID),max(format_data$sID))
devtools::load_all(".")
sampinfo::changeBetaNames(dimnames(posterior)[[3]],beta,max(format_data$qID),max(format_data$sID))
changeBetaNames(dimnames(posterior)[[3]],beta,max(format_data$qID),max(format_data$sID))
beta
changeBetaNames(dimnames(posterior)[[3]],beta,max(format_data$qID),max(format_data$sID))
max(format_data$qID)
changeBetaNames(names = dimnames(posterior)[[3]],beta = beta,Q = max(format_data$qID), S = max(format_data$sID))
changeBetaNames(names = dimnames(posterior)[[3]],beta = beta,Q = max(format_data$qID), S = max(format_data$sID))[1500,]
changeBetaNames(names = dimnames(posterior)[[3]],beta = beta,Q = max(format_data$qID), S = max(format_data$sID))[1500\]
changeBetaNames(names = dimnames(posterior)[[3]],beta = beta,Q = max(format_data$qID), S = max(format_data$sID))[1500]
changeBetaNames(names = dimnames(posterior)[[3]],beta = beta,Q = max(format_data$qID), S = max(format_data$sID))[1800]
changeBetaNames(names = dimnames(posterior)[[3]],beta = beta,Q = max(format_data$qID), S = max(format_data$sID))[1000]
changeBetaNames(names = dimnames(posterior)[[3]],beta = beta,Q = max(format_data$qID), S = max(format_data$sID))[1100]
changeBetaNames(names = dimnames(posterior)[[3]],beta = beta,Q = max(format_data$qID), S = max(format_data$sID))[3100]
changeBetaNames(names = dimnames(posterior)[[3]],beta = beta,Q = max(format_data$qID), S = max(format_data$sID))[1500]
changeBetaNames(names = dimnames(posterior)[[3]],beta = beta,Q = max(format_data$qID), S = max(format_data$sID))[2500]
changeBetaNames(names = dimnames(posterior)[[3]],beta = beta,Q = max(format_data$qID), S = max(format_data$sID))[2300]
changeBetaNames(names = dimnames(posterior)[[3]],beta = beta,Q = max(format_data$qID), S = max(format_data$sID))[2200]
changeBetaNames(names = dimnames(posterior)[[3]],beta = beta,Q = max(format_data$qID), S = max(format_data$sID))[2100]
changeBetaNames(names = dimnames(posterior)[[3]],beta = beta,Q = max(format_data$qID), S = max(format_data$sID)) ->x
names(x)
class(x)
x
x[1]
x[200]
x[1600]
x[2000]
x[2100]
x[2050]
x[2020]
x[2040]
require(stringr)
str_detect(x,'bets_s')
x[str_detect(x,'bets_s')]
x[str_detect(x,'beta_s_mean')]
x[str_detect(x,'beta_s')]
x[str_detect(x,'beta_q')]
devtools::load_all(".")
changeBetaNames(names = dimnames(posterior)[[3]],beta = beta,Q = max(format_data$qID), S = max(format_data$sID))
devtools::load_all(".")
changeBetaNames(names = dimnames(posterior)[[3]],beta = beta,Q = max(format_data$qID), S = max(format_data$sID))
source('~/Dropbox/sampinfo/R/model_functions.R')
devtools::load_all(".")
source('~/Dropbox/sampinfo/R/model_functions.R')
changeBetaNames(names = dimnames(posterior)[[3]],beta = beta,Q = max(format_data$qID), S = max(format_data$sID))
changeBetaNames(names = dimnames(posterior)[[3]],beta = beta,Q = max(format_data$qID), S = max(format_data$sID))->X
x[str_detect(x,'beta')]
X[str_detect(X,'beta')]
# pkgbuild::compile_dll()
roxygen2::roxygenise(clean=TRUE)
devtools::install(quick=T)
library(sampinfo)
library(bayesplot)
library(rstan)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
subset(sampinfo::raw_data,sID==1)
subset(sampinfo::raw_data,qID==1)
raw_data = subset(read.csv('exp2_data_C3.csv'),sID<11&qID<6)[,-1]
format_data = subset(getDataHier(3,'exp2')$format_data,sID<11,qID<6)[,-1]
usethis::use_data(raw_data, format_data, overwrite = TRUE)
devtools::install(quick=T)##MUST BE FALSE THE FIRST TIME
devtools::install(quick=T)##MUST BE FALSE THE FIRST TIME
devtools::install(quick=F)##MUST BE FALSE THE FIRST TIME
devtools::install(quick=F)##MUST BE FALSE THE FIRST TIME
devtools::install(quick=F)##MUST BE FALSE THE FIRST TIME
library(sampinfo)
library(bayesplot)
library(rstan)
subset(sampinfo::raw_data,sID==1)
subset(sampinfo::raw_data,qID==1)
head(format_data,3)
beta = c('sameC', 'sameA', 'dist')
beta = c('sameA', 'dist')
stan_data_fit = sampinfo::getStanFit(beta = beta, deltaM_value = 9,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 4,warmup_num = 100, core_num=4,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
posterior_w = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior_w)
lapply(dimnames(posterior_w), head)
bayesplot::color_scheme_set("viridis")
pars0 = c("beta_mu[2]","beta_s_sd[2]","beta_q_sd[2]","beta[3,2,6]","deltaM","alpha[3,1]")
bayesplot::mcmc_trace(posterior_w, pars = pars0,
n_warmup=100, size = 0.5,
facet_args = list(nrow = 3))
bayesplot::mcmc_rank_overlay(posterior_w, pars = pars0)
rhat = sampinfo::getRhat(stan_data_fit$stan_fit)
print(rhat[rhat>1.03&!is.na(rhat)])
stan_data_fit = sampinfo::getStanFit(beta= c('sameA', 'dist'), deltaM_value = 9,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 1200,chain_num = 4,warmup_num = 300, core_num=4,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
model_diag = sampinfo::getModelDiag(stan_data_fit = stan_data_fit)
print(model_diag)
para = sampinfo::getParaSummary(stan_data_fit = stan_data_fit)
print(round(para[1:3,],1))
print(round(para[stringr::str_detect(rownames(para),'qmean'),c(1:3,8,13:14)],1))
print(round(para[stringr::str_detect(rownames(para),'smean'),c(1:3,8,13:14)],1))
print(round(para[stringr::str_detect(rownames(para),'alpha'),c(1:3,8,13:14)],1)[1:20,])
posterior = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior)
simpinfo::changeBetaNames(dimnames(posterior)[[3]])
posterior = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior)
sampinfo::changeBetaNames(dimnames(posterior)[[3]])
stan_data_fit = sampinfo::getStanFit(beta = beta, deltaM_value = 9,
stan_data_fit = sampinfo::getStanFit(beta = beta, deltaM_value = 9,
0
)
))
changeBetaNames(names = dimnames(posterior)[[3]]sampinfo::changeBetaNames(dimnames(posterior)[[3]],
beta = beta,
Q = max(format_data$qID),
S = max(format_data$sID)))
sampinfo::changeBetaNames(dimnames(posterior)[[3]],
beta = beta,
Q = max(format_data$qID),
S = max(format_data$sID))
mcmc_intervals(posterior, regex_pars = "(\w*beta\w*)")
mcmc_intervals(posterior, regex_pars = "(\\w*beta\\w*)")
posterior = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior)
head(dimnames(posterior)[[3]])
## this function make the parameter names understandable (so that we dont need to deal with matrix index)
dimnames(posterior)[[3]] = sampinfo::changeBetaNames(dimnames(posterior)[[3]],
beta = beta,
Q = max(format_data$qID),
S = max(format_data$sID))
mcmc_intervals(posterior, regex_pars = "(beta_\\w*)")
posterior = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior)
head(dimnames(posterior)[[3]])
## this function make the parameter names understandable (so that we dont need to deal with matrix index)
dimnames(posterior)[[3]] = sampinfo::changeBetaNames(dimnames(posterior)[[3]],
beta = beta,
Q = max(format_data$qID),
S = max(format_data$sID))
mcmc_intervals(posterior, regex_pars = "(beta_sameA\\w*)")
posterior = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior)
head(dimnames(posterior)[[3]])
## this function make the parameter names understandable (so that we dont need to deal with matrix index)
dimnames(posterior)[[3]] = sampinfo::changeBetaNames(dimnames(posterior)[[3]],
beta = beta,
Q = max(format_data$qID),
S = max(format_data$sID))
mcmc_intervals(posterior, regex_pars = "(beta_sameA_smean\\w*)")
posterior = rstan::extract(stan_data_fit$stan_fit, inc_warmup = TRUE, permuted = FALSE)
dim(posterior)
head(dimnames(posterior)[[3]])
## this function make the parameter names understandable (so that we dont need to deal with matrix index)
dimnames(posterior)[[3]] = sampinfo::changeBetaNames(dimnames(posterior)[[3]],
beta = beta,
Q = max(format_data$qID),
S = max(format_data$sID))
mcmc_intervals(posterior, regex_pars = "(beta_dist_qmean\\w*)")
mcmc_intervals(posterior, regex_pars = "^beta_dist_qmean")
sampinfo::format_data$qID
raw_data = subset(read.csv('exp2_data_C3.csv'),sID<11&qID<6)[,-1]
format_data = subset(getDataHier(3,'exp2')$format_data,sID<11,qID<6)[,-1]
require(dplyr)
raw_data = subset(read.csv('exp2_data_C3.csv'),sID<11&qID<6)[,-1]
format_data = subset(getDataHier(3,'exp2')$format_data,sID<11,qID<6)[,-1]
format_data = subset(getDataHier(3,'exp2')$format_data,sID<11,qID<6)[,-1]
format_data$qID
getDataHier(3,'exp2')$format_data
subset(getDataHier(3,'exp2')$format_data[,-1],sID<11,qID<6)
format_data$qID
# pkgbuild::compile_dll()
roxygen2::roxygenise(clean=TRUE)
devtools::install(quick=T)##MUST BE FALSE THE FIRST TIME
raw_data = subset(read.csv('exp2_data_C3.csv'),sID<11&qID<6)[,-1]
format_data = subset(getDataHier(3,'exp2')$format_data[,-1],sID<11&qID<6)
usethis::use_data(raw_data, format_data, overwrite = TRUE)
devtools::load_all(".")
require(dplyr)
raw_data = subset(read.csv('exp2_data_C3.csv'),sID<11&qID<6)[,-1]
format_data = subset(getDataHier(3,'exp2')$format_data[,-1],sID<11&qID<6)
usethis::use_data(raw_data, format_data, overwrite = TRUE)
devtools::install(quick=T)##MUST BE FALSE THE FIRST TIME
pkgbuild::compile_dll()
?compile_dll
pkgbuild::compile_dll(force=TRUE)
roxygen2::roxygenise(clean=TRUE)
devtools::install(quick=T)##MUST BE FALSE THE FIRST TIME
devtools::install(quick=F)##MUST BE FALSE THE FIRST TIME
pkgbuild::compile_dll(force=TRUE)
roxygen2::roxygenise(clean=TRUE)
devtools::install(quick=F)##MUST BE FALSE THE FIRST TIME
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(sampinfo)
library(bayesplot)
library(rstan)
subset(sampinfo::raw_data,sID==1)
subset(sampinfo::raw_data,qID==1)
head(format_data,3)
beta = c('sameC', 'sameA', 'dist')
beta = c()
deltaM_value = 0
deltaM_value = 1
deltaM_value = 9
beta = c('sameA', 'dist')
stan_data_fit = sampinfo::getStanFit(beta = beta, deltaM_value = 9,
option_num = 7, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 200,chain_num = 4,warmup_num = 100, core_num=4,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE)
usethis::use_vignette("my-vignette-test")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
use_package('bayesplot')
require(devtools)
use_package('bayesplot')
