option_num, print_names = F)
X_sim_sel = lapply(X_sim, function(x) x[,beta])
} else{
X = replicate(nrow(format_data), matrix(0, option_num, 0), simplify = FALSE)
X_sim_sel = vector("list", length = option_num)
}
X_sim_sel = lapply(X_sim_sel, function(x) as.matrix(x))
!is.null(beta)
beta
length(beta)
X = replicate(nrow(format_data), matrix(0, option_num, 0), simplify = FALSE)
X_sim_sel = vector("list", length = option_num)
# feature matrix
if (length(beta) > 0) {
X = getFeatureMatrices(beta, format_data, deltaM_value,
option_num, print_names = F)
X_sim_sel = lapply(X_sim, function(x) x[,beta])
} else{
X = replicate(nrow(format_data), matrix(0, option_num, 0), simplify = FALSE)
X_sim_sel = vector("list", length = option_num)
}
X_sim_sel = lapply(X_sim_sel, function(x) as.matrix(x))
# feature matrix
if (length(beta) > 0) {
X = getFeatureMatrices(beta, format_data, deltaM_value,
option_num, print_names = F)
X_sim_sel = lapply(X_sim, function(x) x[,beta])
X_sim_sel = lapply(X_sim_sel, function(x) as.matrix(x))
} else{
X = replicate(nrow(format_data), matrix(0, option_num, 0), simplify = FALSE)
X_sim_sel = vector("list", length = option_num)
}
## decision model
rating = as.numeric(as.character(format_data$rating))
rating_y = c()
rating_n = c()
if (!is.null(binary_value)){
if(binary_value == 1){
# make ratings binary for binary_value = 1
rating = sign(rating)
}
if (ar_value == 0){
rating_n = pmin(0, rating);
rating_y = pmax(0, rating);
} else{
rating_y = rating;
rating_n = rating;
}
if (deltaD_value == 1) {
for (n in 1:length(rating)) {
if (format_data$tNo[n] > 1) {
rating[n] = rating[n-1] + rating[n]
rating_n[n] = rating_n[n-1] + rating_n[n]
rating_y[n] = rating_y[n-1] + rating_y[n]
}
}
}
}
terminate = as.numeric(as.character(format_data$terminate))
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = TRUE) ##MUST BE FALSE THE FIRST TIME
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = FALSE) ##MUST BE FALSE THE FIRST TIME
beta = character(0)
devtools::load_all(".")
qq=5
temp = getData(4,'exp1','')
format_data = subset(temp$format_data, qID == qq)
format_data$qID = 1
X_sim = temp$X_sim[[qq]]
cluster_rating_m = subset(temp$cluster_rating_m, qID == qq)[,-c(1:2)]
stan_data = getStanData(
beta = character(0),
deltaM_value = 8,
binary_value = 0,
ar_value = 0,
random_value = 0,
deltaD_value = 8,
option_num = 9,
format_data = format_data,
X_sim = X_sim,
cluster_rating_m = cluster_rating_m,
max_tNo_prd = 30
)
require(dplyr)
qq=5
temp = getData(4,'exp1','')
format_data = subset(temp$format_data, qID == qq)
format_data$qID = 1
X_sim = temp$X_sim[[qq]]
cluster_rating_m = subset(temp$cluster_rating_m, qID == qq)[,-c(1:2)]
stan_data = getStanData(
beta = character(0),
deltaM_value = 8,
binary_value = 0,
ar_value = 0,
random_value = 0,
deltaD_value = 8,
option_num = 9,
format_data = format_data,
X_sim = X_sim,
cluster_rating_m = cluster_rating_m,
max_tNo_prd = 30
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmdm_timelimit.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2
# refresh = 100,
# save_warmup = F,
# init_r = 1
)
stan_data = getStanData(
beta = character(0),
deltaM_value = 8,
binary_value = 0,
ar_value = 0,
random_value = 0,
deltaD_value = 8,
option_num = 9,
format_data = format_data,
X_sim = X_sim,
cluster_rating_m = cluster_rating_m,
max_tNo_prd = 30
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmdm_threshold.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2
# refresh = 100,
# save_warmup = F,
# init_r = 1
)
stan_data = getStanData(
# beta = character(0),
beta = 'sameC',
deltaM_value = 8,
binary_value = 0,
ar_value = 0,
random_value = 0,
deltaD_value = 8,
option_num = 9,
format_data = format_data,
X_sim = X_sim,
cluster_rating_m = cluster_rating_m,
max_tNo_prd = 30
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmdm_threshold.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2
# refresh = 100,
# save_warmup = F,
# init_r = 1
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmdm_threshold.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2
# refresh = 100,
# save_warmup = F,
# init_r = 1
)
stan_data = getStanData(
beta = character(0),
# beta = 'sameC',
deltaM_value = 8,
binary_value = 0,
ar_value = 0,
random_value = 0,
deltaD_value = 8,
option_num = 9,
format_data = format_data,
X_sim = X_sim,
cluster_rating_m = cluster_rating_m,
max_tNo_prd = 30
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmdm_threshold.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2
# refresh = 100,
# save_warmup = F,
# init_r = 1
)
stan_data$X_sim
matrix(NA,nrow=0,ncol=0)
matrix(0,nrow=0,ncol=0)
option_num = 7
X_sim_sel = lapply(1:option_num, function(x) matrix(0,nrow=option_num,ncol=0))
X_sim_sel
devtools::load_all(".")
qq=5
temp = getData(4,'exp1','')
format_data = subset(temp$format_data, qID == qq)
format_data$qID = 1
X_sim = temp$X_sim[[qq]]
cluster_rating_m = subset(temp$cluster_rating_m, qID == qq)[,-c(1:2)]
stan_data = getStanData(
beta = character(0),
# beta = 'sameC',
deltaM_value = 8,
binary_value = 0,
ar_value = 0,
random_value = 0,
deltaD_value = 8,
option_num = 9,
format_data = format_data,
X_sim = X_sim,
cluster_rating_m = cluster_rating_m,
max_tNo_prd = 30
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmdm_threshold.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2
# refresh = 100,
# save_warmup = F,
# init_r = 1
)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = FALSE) ##MUST BE FALSE THE FIRST TIME
# devtools::build_vignettes()
require(devtools)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = FALSE) ##MUST BE
qq=5
temp = getData(4,'exp1','')
format_data = subset(temp$format_data, qID < qq)
format_data$qID = 1
qq=5
temp = getData(4,'exp1','')
format_data = subset(temp$format_data, qID < qq)
# format_data$qID = 1
# X_sim = temp$X_sim[[qq]]
# cluster_rating_m = subset(temp$cluster_rating_m, qID == qq)[,-c(1:2)]
stan_data = getStanData(
beta = character(0),
# beta = 'sameC',
deltaM_value = 8,
binary_value = 0,
ar_value = 0,
random_value = 0,
deltaD_value = 8,
option_num = 9,
format_data = format_data
# X_sim = X_sim,
# cluster_rating_m = cluster_rating_m,
# max_tNo_prd = 30
)
require(rstan)
qq=5
temp = getData(4,'exp1','')
format_data = subset(temp$format_data, qID < qq)
# format_data$qID = 1
# X_sim = temp$X_sim[[qq]]
# cluster_rating_m = subset(temp$cluster_rating_m, qID == qq)[,-c(1:2)]
stan_data = getStanData(
beta = character(0),
# beta = 'sameC',
deltaM_value = 8,
binary_value = 0,
ar_value = 0,
random_value = 0,
deltaD_value = 8,
option_num = 9,
format_data = format_data
# X_sim = X_sim,
# cluster_rating_m = cluster_rating_m,
# max_tNo_prd = 30
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmdm_threshold.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2
# refresh = 100,
# save_warmup = F,
# init_r = 1
)
# format_data$qID = 1
# X_sim = temp$X_sim[[qq]]
# cluster_rating_m = subset(temp$cluster_rating_m, qID == qq)[,-c(1:2)]
stan_data = getStanData(
beta = character(0),
# beta = 'sameC',
deltaM_value = 8,
binary_value = 0,
ar_value = 0,
random_value = 0,
deltaD_value = 8,
option_num = 9,
format_data = format_data
# X_sim = X_sim,
# cluster_rating_m = cluster_rating_m,
# max_tNo_prd = 30
)
devtools::load_all(".")
# format_data$qID = 1
# X_sim = temp$X_sim[[qq]]
# cluster_rating_m = subset(temp$cluster_rating_m, qID == qq)[,-c(1:2)]
stan_data = getStanData(
beta = character(0),
# beta = 'sameC',
deltaM_value = 8,
binary_value = 0,
ar_value = 0,
random_value = 0,
deltaD_value = 8,
option_num = 9,
format_data = format_data
# X_sim = X_sim,
# cluster_rating_m = cluster_rating_m,
# max_tNo_prd = 30
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmdm_threshold.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2
# refresh = 100,
# save_warmup = F,
# init_r = 1
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmh.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2
# refresh = 100,
# save_warmup = F,
# init_r = 1
)
stan_data_fit = list(
stan_data = stan_data,
stan_fit = stan_fit
)
getParaSummary(stan_data_fit = stan_data_fit)
x= getParaSummary(stan_data_fit = stan_data_fit)
rownames(x)
# format_data$qID = 1
# X_sim = temp$X_sim[[qq]]
# cluster_rating_m = subset(temp$cluster_rating_m, qID == qq)[,-c(1:2)]
stan_data = getStanData(
# beta = character(0),
beta = c('sameC','dist'),
deltaM_value = 8,
binary_value = 0,
ar_value = 0,
random_value = 0,
deltaD_value = 8,
option_num = 9,
format_data = format_data
# X_sim = X_sim,
# cluster_rating_m = cluster_rating_m,
# max_tNo_prd = 30
)
qq=5
temp = getData(4,'exp1','')
format_data = subset(temp$format_data, qID < qq)
# format_data$qID = 1
# X_sim = temp$X_sim[[qq]]
# cluster_rating_m = subset(temp$cluster_rating_m, qID == qq)[,-c(1:2)]
stan_data = getStanData(
# beta = character(0),
beta = c('sameC','dist'),
deltaM_value = 8,
binary_value = 0,
ar_value = 0,
random_value = 0,
deltaD_value = 8,
option_num = 9,
format_data = format_data
# X_sim = X_sim,
# cluster_rating_m = cluster_rating_m,
# max_tNo_prd = 30
)
qq=5
temp = getData(4,'exp1','')
format_data = subset(temp$format_data, qID < qq)
head(format_data)
temp = getData(4,'exp1','')
require(dplyr)
qq=5
temp = getData(4,'exp1','')
format_data = subset(temp$format_data, qID < qq)
# format_data$qID = 1
# X_sim = temp$X_sim[[qq]]
# cluster_rating_m = subset(temp$cluster_rating_m, qID == qq)[,-c(1:2)]
stan_data = getStanData(
# beta = character(0),
beta = c('sameC','dist'),
deltaM_value = 8,
binary_value = 0,
ar_value = 0,
random_value = 0,
deltaD_value = 8,
option_num = 9,
format_data = format_data
# X_sim = X_sim,
# cluster_rating_m = cluster_rating_m,
# max_tNo_prd = 30
)
stan_fit = rstan::stan(
# file = 'mmdm_threshold.stan',
file = 'mmh.stan',
data = stan_data,
seed = 1,
# sample_file = save_model_file,
# init = init_values,
iter = 20,
chains = 2,
warmup = 2,
cores = 2
# refresh = 100,
# save_warmup = F,
# init_r = 1
)
stan_data_fit = list(
stan_data = stan_data,
stan_fit = stan_fit
)
getParaSummary(stan_data_fit = stan_data_fit)
getParaSummary(stan_data_fit = stan_data_fit)->x
colnames(x)
rownames(x)
devtools::load_all(".")
getParaSummary(stan_data_fit = stan_data_fit)->x
rownames(x)
stan_data_fit = getStanFit(beta = c('sameA', 'dist'), deltaM_value = 8,
option_num = 9, format_data = format_data,
save_model_file = NULL, init_values="random",
iter_num = 20,chain_num = 1,warmup_num = 5, core_num=8,
adapt_delta=0.9, stepsize = 0.1, max_treedepth = 10,
refresh=1000, save_warmup = TRUE,
hier_value = 1)
getStanCode()
devtools::load_all(".")
getStanCode()
getStanCode
require(devtools)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = FALSE) ##MUST BE FALSE THE FIRST TIME
require(devtools)
pkgbuild::compile_dll(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
devtools::install(quick = FALSE) ##MUST BE FALSE THE FIRST TIME
