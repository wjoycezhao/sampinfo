// Generated by rstantools.  Do not edit by hand.

/*
    sampinfo is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    sampinfo is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with sampinfo.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_dmh_threshold_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_dmh_threshold");
    reader.add_event(241, 239, "end", "model_dmh_threshold");
    return reader;
}
template <typename T3__, typename T4__>
Eigen::Matrix<typename boost::math::tools::promote_args<T3__, T4__>::type, Eigen::Dynamic, 1>
decision_l(const int& ar_value,
               const int& terminate,
               const int& N,
               const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& p_n,
               const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& p_y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 9;
        validate_non_negative_index("prob_d", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> prob_d(N);
        stan::math::initialize(prob_d, DUMMY_VAR__);
        stan::math::fill(prob_d, DUMMY_VAR__);
        current_statement_begin__ = 10;
        if (as_bool(logical_eq(ar_value, 0))) {
            current_statement_begin__ = 11;
            if (as_bool(logical_eq(terminate, 0))) {
                current_statement_begin__ = 12;
                stan::math::assign(prob_d, elt_multiply(subtract(1, p_n), subtract(1, p_y)));
            } else if (as_bool(logical_eq(terminate, -(1)))) {
                current_statement_begin__ = 15;
                stan::math::assign(prob_d, add(elt_multiply(p_n, subtract(1, p_y)), elt_multiply(multiply(.5, p_y), p_n)));
            } else if (as_bool(logical_eq(terminate, 1))) {
                current_statement_begin__ = 18;
                stan::math::assign(prob_d, add(elt_multiply(p_y, subtract(1, p_n)), elt_multiply(multiply(.5, p_y), p_n)));
            }
        } else {
            current_statement_begin__ = 21;
            if (as_bool(logical_eq(terminate, 0))) {
                current_statement_begin__ = 22;
                stan::math::assign(prob_d, subtract(subtract(1, p_n), p_y));
            } else if (as_bool(logical_eq(terminate, -(1)))) {
                current_statement_begin__ = 25;
                stan::math::assign(prob_d, p_n);
            } else if (as_bool(logical_eq(terminate, 1))) {
                current_statement_begin__ = 28;
                stan::math::assign(prob_d, p_y);
            }
        }
        current_statement_begin__ = 32;
        return stan::math::promote_scalar<fun_return_scalar_t__>(prob_d);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct decision_l_functor__ {
    template <typename T3__, typename T4__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T3__, T4__>::type, Eigen::Dynamic, 1>
    operator()(const int& ar_value,
               const int& terminate,
               const int& N,
               const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& p_n,
               const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& p_y, std::ostream* pstream__) const {
        return decision_l(ar_value, terminate, N, p_n, p_y, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_dmh_threshold : public prob_grad {
private:
        int deltaD_value;
        int ar_value;
        int N;
        int S;
        int Q;
        std::vector<int> sID;
        std::vector<int> qID;
        std::vector<int> tNo;
        std::vector<int> rating_n;
        std::vector<int> rating_y;
        std::vector<int> terminate;
        int N_continue;
        int N_no;
        int N_yes;
        std::vector<int> idx_continue;
        std::vector<int> idx_no;
        std::vector<int> idx_yes;
public:
    model_dmh_threshold(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_dmh_threshold(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_dmh_threshold_namespace::model_dmh_threshold";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "deltaD_value", "int", context__.to_vec());
            deltaD_value = int(0);
            vals_i__ = context__.vals_i("deltaD_value");
            pos__ = 0;
            deltaD_value = vals_i__[pos__++];
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "ar_value", "int", context__.to_vec());
            ar_value = int(0);
            vals_i__ = context__.vals_i("ar_value");
            pos__ = 0;
            ar_value = vals_i__[pos__++];
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "S", "int", context__.to_vec());
            S = int(0);
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            S = vals_i__[pos__++];
            current_statement_begin__ = 43;
            context__.validate_dims("data initialization", "Q", "int", context__.to_vec());
            Q = int(0);
            vals_i__ = context__.vals_i("Q");
            pos__ = 0;
            Q = vals_i__[pos__++];
            current_statement_begin__ = 44;
            validate_non_negative_index("sID", "N", N);
            context__.validate_dims("data initialization", "sID", "int", context__.to_vec(N));
            sID = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("sID");
            pos__ = 0;
            size_t sID_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < sID_k_0_max__; ++k_0__) {
                sID[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 45;
            validate_non_negative_index("qID", "N", N);
            context__.validate_dims("data initialization", "qID", "int", context__.to_vec(N));
            qID = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("qID");
            pos__ = 0;
            size_t qID_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < qID_k_0_max__; ++k_0__) {
                qID[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 46;
            validate_non_negative_index("tNo", "N", N);
            context__.validate_dims("data initialization", "tNo", "int", context__.to_vec(N));
            tNo = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("tNo");
            pos__ = 0;
            size_t tNo_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < tNo_k_0_max__; ++k_0__) {
                tNo[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 47;
            validate_non_negative_index("rating_n", "N", N);
            context__.validate_dims("data initialization", "rating_n", "int", context__.to_vec(N));
            rating_n = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("rating_n");
            pos__ = 0;
            size_t rating_n_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < rating_n_k_0_max__; ++k_0__) {
                rating_n[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 48;
            validate_non_negative_index("rating_y", "N", N);
            context__.validate_dims("data initialization", "rating_y", "int", context__.to_vec(N));
            rating_y = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("rating_y");
            pos__ = 0;
            size_t rating_y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < rating_y_k_0_max__; ++k_0__) {
                rating_y[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 49;
            validate_non_negative_index("terminate", "N", N);
            context__.validate_dims("data initialization", "terminate", "int", context__.to_vec(N));
            terminate = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("terminate");
            pos__ = 0;
            size_t terminate_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < terminate_k_0_max__; ++k_0__) {
                terminate[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 50;
            context__.validate_dims("data initialization", "N_continue", "int", context__.to_vec());
            N_continue = int(0);
            vals_i__ = context__.vals_i("N_continue");
            pos__ = 0;
            N_continue = vals_i__[pos__++];
            current_statement_begin__ = 51;
            context__.validate_dims("data initialization", "N_no", "int", context__.to_vec());
            N_no = int(0);
            vals_i__ = context__.vals_i("N_no");
            pos__ = 0;
            N_no = vals_i__[pos__++];
            current_statement_begin__ = 52;
            context__.validate_dims("data initialization", "N_yes", "int", context__.to_vec());
            N_yes = int(0);
            vals_i__ = context__.vals_i("N_yes");
            pos__ = 0;
            N_yes = vals_i__[pos__++];
            current_statement_begin__ = 53;
            validate_non_negative_index("idx_continue", "N_continue", N_continue);
            context__.validate_dims("data initialization", "idx_continue", "int", context__.to_vec(N_continue));
            idx_continue = std::vector<int>(N_continue, int(0));
            vals_i__ = context__.vals_i("idx_continue");
            pos__ = 0;
            size_t idx_continue_k_0_max__ = N_continue;
            for (size_t k_0__ = 0; k_0__ < idx_continue_k_0_max__; ++k_0__) {
                idx_continue[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 54;
            validate_non_negative_index("idx_no", "N_no", N_no);
            context__.validate_dims("data initialization", "idx_no", "int", context__.to_vec(N_no));
            idx_no = std::vector<int>(N_no, int(0));
            vals_i__ = context__.vals_i("idx_no");
            pos__ = 0;
            size_t idx_no_k_0_max__ = N_no;
            for (size_t k_0__ = 0; k_0__ < idx_no_k_0_max__; ++k_0__) {
                idx_no[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 55;
            validate_non_negative_index("idx_yes", "N_yes", N_yes);
            context__.validate_dims("data initialization", "idx_yes", "int", context__.to_vec(N_yes));
            idx_yes = std::vector<int>(N_yes, int(0));
            vals_i__ = context__.vals_i("idx_yes");
            pos__ = 0;
            size_t idx_yes_k_0_max__ = N_yes;
            for (size_t k_0__ = 0; k_0__ < idx_yes_k_0_max__; ++k_0__) {
                idx_yes[k_0__] = vals_i__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 60;
            validate_non_negative_index("deltaD_mu_raw", "logical_eq(deltaD_value, 8)", logical_eq(deltaD_value, 8));
            num_params_r__ += (1 * logical_eq(deltaD_value, 8));
            current_statement_begin__ = 61;
            validate_non_negative_index("deltaD_s_sd", "logical_eq(deltaD_value, 8)", logical_eq(deltaD_value, 8));
            num_params_r__ += (1 * logical_eq(deltaD_value, 8));
            current_statement_begin__ = 62;
            validate_non_negative_index("deltaD_q_sd", "logical_eq(deltaD_value, 8)", logical_eq(deltaD_value, 8));
            num_params_r__ += (1 * logical_eq(deltaD_value, 8));
            current_statement_begin__ = 63;
            validate_non_negative_index("deltaD_s_raw", "(S * logical_eq(deltaD_value, 8))", (S * logical_eq(deltaD_value, 8)));
            num_params_r__ += (S * logical_eq(deltaD_value, 8));
            current_statement_begin__ = 64;
            validate_non_negative_index("deltaD_q_raw", "(Q * logical_eq(deltaD_value, 8))", (Q * logical_eq(deltaD_value, 8)));
            num_params_r__ += (Q * logical_eq(deltaD_value, 8));
            current_statement_begin__ = 65;
            num_params_r__ += 1;
            current_statement_begin__ = 66;
            num_params_r__ += 1;
            current_statement_begin__ = 67;
            num_params_r__ += 1;
            current_statement_begin__ = 68;
            validate_non_negative_index("threshold_s_raw", "S", S);
            num_params_r__ += S;
            current_statement_begin__ = 69;
            validate_non_negative_index("threshold_q_raw", "Q", Q);
            num_params_r__ += Q;
            current_statement_begin__ = 70;
            num_params_r__ += 1;
            current_statement_begin__ = 71;
            num_params_r__ += 1;
            current_statement_begin__ = 72;
            num_params_r__ += 1;
            current_statement_begin__ = 73;
            validate_non_negative_index("sigma_mult_s_raw", "S", S);
            num_params_r__ += S;
            current_statement_begin__ = 74;
            validate_non_negative_index("sigma_mult_q_raw", "Q", Q);
            num_params_r__ += Q;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_dmh_threshold() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 60;
        if (!(context__.contains_r("deltaD_mu_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable deltaD_mu_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("deltaD_mu_raw");
        pos__ = 0U;
        validate_non_negative_index("deltaD_mu_raw", "logical_eq(deltaD_value, 8)", logical_eq(deltaD_value, 8));
        context__.validate_dims("parameter initialization", "deltaD_mu_raw", "double", context__.to_vec(logical_eq(deltaD_value, 8)));
        std::vector<double> deltaD_mu_raw(logical_eq(deltaD_value, 8), double(0));
        size_t deltaD_mu_raw_k_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaD_mu_raw_k_0_max__; ++k_0__) {
            deltaD_mu_raw[k_0__] = vals_r__[pos__++];
        }
        size_t deltaD_mu_raw_i_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t i_0__ = 0; i_0__ < deltaD_mu_raw_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(deltaD_mu_raw[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable deltaD_mu_raw: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 61;
        if (!(context__.contains_r("deltaD_s_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable deltaD_s_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("deltaD_s_sd");
        pos__ = 0U;
        validate_non_negative_index("deltaD_s_sd", "logical_eq(deltaD_value, 8)", logical_eq(deltaD_value, 8));
        context__.validate_dims("parameter initialization", "deltaD_s_sd", "double", context__.to_vec(logical_eq(deltaD_value, 8)));
        std::vector<double> deltaD_s_sd(logical_eq(deltaD_value, 8), double(0));
        size_t deltaD_s_sd_k_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaD_s_sd_k_0_max__; ++k_0__) {
            deltaD_s_sd[k_0__] = vals_r__[pos__++];
        }
        size_t deltaD_s_sd_i_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t i_0__ = 0; i_0__ < deltaD_s_sd_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, deltaD_s_sd[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable deltaD_s_sd: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 62;
        if (!(context__.contains_r("deltaD_q_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable deltaD_q_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("deltaD_q_sd");
        pos__ = 0U;
        validate_non_negative_index("deltaD_q_sd", "logical_eq(deltaD_value, 8)", logical_eq(deltaD_value, 8));
        context__.validate_dims("parameter initialization", "deltaD_q_sd", "double", context__.to_vec(logical_eq(deltaD_value, 8)));
        std::vector<double> deltaD_q_sd(logical_eq(deltaD_value, 8), double(0));
        size_t deltaD_q_sd_k_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaD_q_sd_k_0_max__; ++k_0__) {
            deltaD_q_sd[k_0__] = vals_r__[pos__++];
        }
        size_t deltaD_q_sd_i_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t i_0__ = 0; i_0__ < deltaD_q_sd_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, deltaD_q_sd[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable deltaD_q_sd: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 63;
        if (!(context__.contains_r("deltaD_s_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable deltaD_s_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("deltaD_s_raw");
        pos__ = 0U;
        validate_non_negative_index("deltaD_s_raw", "(S * logical_eq(deltaD_value, 8))", (S * logical_eq(deltaD_value, 8)));
        context__.validate_dims("parameter initialization", "deltaD_s_raw", "vector_d", context__.to_vec((S * logical_eq(deltaD_value, 8))));
        Eigen::Matrix<double, Eigen::Dynamic, 1> deltaD_s_raw((S * logical_eq(deltaD_value, 8)));
        size_t deltaD_s_raw_j_1_max__ = (S * logical_eq(deltaD_value, 8));
        for (size_t j_1__ = 0; j_1__ < deltaD_s_raw_j_1_max__; ++j_1__) {
            deltaD_s_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(deltaD_s_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable deltaD_s_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 64;
        if (!(context__.contains_r("deltaD_q_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable deltaD_q_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("deltaD_q_raw");
        pos__ = 0U;
        validate_non_negative_index("deltaD_q_raw", "(Q * logical_eq(deltaD_value, 8))", (Q * logical_eq(deltaD_value, 8)));
        context__.validate_dims("parameter initialization", "deltaD_q_raw", "vector_d", context__.to_vec((Q * logical_eq(deltaD_value, 8))));
        Eigen::Matrix<double, Eigen::Dynamic, 1> deltaD_q_raw((Q * logical_eq(deltaD_value, 8)));
        size_t deltaD_q_raw_j_1_max__ = (Q * logical_eq(deltaD_value, 8));
        for (size_t j_1__ = 0; j_1__ < deltaD_q_raw_j_1_max__; ++j_1__) {
            deltaD_q_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(deltaD_q_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable deltaD_q_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 65;
        if (!(context__.contains_r("threshold_mu_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable threshold_mu_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("threshold_mu_raw");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "threshold_mu_raw", "double", context__.to_vec());
        double threshold_mu_raw(0);
        threshold_mu_raw = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(threshold_mu_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable threshold_mu_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 66;
        if (!(context__.contains_r("threshold_s_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable threshold_s_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("threshold_s_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "threshold_s_sd", "double", context__.to_vec());
        double threshold_s_sd(0);
        threshold_s_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, threshold_s_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable threshold_s_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 67;
        if (!(context__.contains_r("threshold_q_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable threshold_q_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("threshold_q_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "threshold_q_sd", "double", context__.to_vec());
        double threshold_q_sd(0);
        threshold_q_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, threshold_q_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable threshold_q_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 68;
        if (!(context__.contains_r("threshold_s_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable threshold_s_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("threshold_s_raw");
        pos__ = 0U;
        validate_non_negative_index("threshold_s_raw", "S", S);
        context__.validate_dims("parameter initialization", "threshold_s_raw", "vector_d", context__.to_vec(S));
        Eigen::Matrix<double, Eigen::Dynamic, 1> threshold_s_raw(S);
        size_t threshold_s_raw_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < threshold_s_raw_j_1_max__; ++j_1__) {
            threshold_s_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(threshold_s_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable threshold_s_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 69;
        if (!(context__.contains_r("threshold_q_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable threshold_q_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("threshold_q_raw");
        pos__ = 0U;
        validate_non_negative_index("threshold_q_raw", "Q", Q);
        context__.validate_dims("parameter initialization", "threshold_q_raw", "vector_d", context__.to_vec(Q));
        Eigen::Matrix<double, Eigen::Dynamic, 1> threshold_q_raw(Q);
        size_t threshold_q_raw_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < threshold_q_raw_j_1_max__; ++j_1__) {
            threshold_q_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(threshold_q_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable threshold_q_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 70;
        if (!(context__.contains_r("sigma_mult_mu_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_mult_mu_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_mult_mu_raw");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_mult_mu_raw", "double", context__.to_vec());
        double sigma_mult_mu_raw(0);
        sigma_mult_mu_raw = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(sigma_mult_mu_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_mult_mu_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 71;
        if (!(context__.contains_r("sigma_mult_s_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_mult_s_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_mult_s_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_mult_s_sd", "double", context__.to_vec());
        double sigma_mult_s_sd(0);
        sigma_mult_s_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_mult_s_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_mult_s_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 72;
        if (!(context__.contains_r("sigma_mult_q_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_mult_q_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_mult_q_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_mult_q_sd", "double", context__.to_vec());
        double sigma_mult_q_sd(0);
        sigma_mult_q_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_mult_q_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_mult_q_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 73;
        if (!(context__.contains_r("sigma_mult_s_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_mult_s_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_mult_s_raw");
        pos__ = 0U;
        validate_non_negative_index("sigma_mult_s_raw", "S", S);
        context__.validate_dims("parameter initialization", "sigma_mult_s_raw", "vector_d", context__.to_vec(S));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_mult_s_raw(S);
        size_t sigma_mult_s_raw_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < sigma_mult_s_raw_j_1_max__; ++j_1__) {
            sigma_mult_s_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(sigma_mult_s_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_mult_s_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 74;
        if (!(context__.contains_r("sigma_mult_q_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_mult_q_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_mult_q_raw");
        pos__ = 0U;
        validate_non_negative_index("sigma_mult_q_raw", "Q", Q);
        context__.validate_dims("parameter initialization", "sigma_mult_q_raw", "vector_d", context__.to_vec(Q));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_mult_q_raw(Q);
        size_t sigma_mult_q_raw_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < sigma_mult_q_raw_j_1_max__; ++j_1__) {
            sigma_mult_q_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(sigma_mult_q_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_mult_q_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 60;
            std::vector<local_scalar_t__> deltaD_mu_raw;
            size_t deltaD_mu_raw_d_0_max__ = logical_eq(deltaD_value, 8);
            deltaD_mu_raw.reserve(deltaD_mu_raw_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < deltaD_mu_raw_d_0_max__; ++d_0__) {
                if (jacobian__)
                    deltaD_mu_raw.push_back(in__.scalar_constrain(lp__));
                else
                    deltaD_mu_raw.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 61;
            std::vector<local_scalar_t__> deltaD_s_sd;
            size_t deltaD_s_sd_d_0_max__ = logical_eq(deltaD_value, 8);
            deltaD_s_sd.reserve(deltaD_s_sd_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < deltaD_s_sd_d_0_max__; ++d_0__) {
                if (jacobian__)
                    deltaD_s_sd.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    deltaD_s_sd.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 62;
            std::vector<local_scalar_t__> deltaD_q_sd;
            size_t deltaD_q_sd_d_0_max__ = logical_eq(deltaD_value, 8);
            deltaD_q_sd.reserve(deltaD_q_sd_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < deltaD_q_sd_d_0_max__; ++d_0__) {
                if (jacobian__)
                    deltaD_q_sd.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    deltaD_q_sd.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 63;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> deltaD_s_raw;
            (void) deltaD_s_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                deltaD_s_raw = in__.vector_constrain((S * logical_eq(deltaD_value, 8)), lp__);
            else
                deltaD_s_raw = in__.vector_constrain((S * logical_eq(deltaD_value, 8)));
            current_statement_begin__ = 64;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> deltaD_q_raw;
            (void) deltaD_q_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                deltaD_q_raw = in__.vector_constrain((Q * logical_eq(deltaD_value, 8)), lp__);
            else
                deltaD_q_raw = in__.vector_constrain((Q * logical_eq(deltaD_value, 8)));
            current_statement_begin__ = 65;
            local_scalar_t__ threshold_mu_raw;
            (void) threshold_mu_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                threshold_mu_raw = in__.scalar_constrain(lp__);
            else
                threshold_mu_raw = in__.scalar_constrain();
            current_statement_begin__ = 66;
            local_scalar_t__ threshold_s_sd;
            (void) threshold_s_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                threshold_s_sd = in__.scalar_lb_constrain(0, lp__);
            else
                threshold_s_sd = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 67;
            local_scalar_t__ threshold_q_sd;
            (void) threshold_q_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                threshold_q_sd = in__.scalar_lb_constrain(0, lp__);
            else
                threshold_q_sd = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 68;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> threshold_s_raw;
            (void) threshold_s_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                threshold_s_raw = in__.vector_constrain(S, lp__);
            else
                threshold_s_raw = in__.vector_constrain(S);
            current_statement_begin__ = 69;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> threshold_q_raw;
            (void) threshold_q_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                threshold_q_raw = in__.vector_constrain(Q, lp__);
            else
                threshold_q_raw = in__.vector_constrain(Q);
            current_statement_begin__ = 70;
            local_scalar_t__ sigma_mult_mu_raw;
            (void) sigma_mult_mu_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_mult_mu_raw = in__.scalar_constrain(lp__);
            else
                sigma_mult_mu_raw = in__.scalar_constrain();
            current_statement_begin__ = 71;
            local_scalar_t__ sigma_mult_s_sd;
            (void) sigma_mult_s_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_mult_s_sd = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_mult_s_sd = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 72;
            local_scalar_t__ sigma_mult_q_sd;
            (void) sigma_mult_q_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_mult_q_sd = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_mult_q_sd = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 73;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_mult_s_raw;
            (void) sigma_mult_s_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_mult_s_raw = in__.vector_constrain(S, lp__);
            else
                sigma_mult_s_raw = in__.vector_constrain(S);
            current_statement_begin__ = 74;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_mult_q_raw;
            (void) sigma_mult_q_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_mult_q_raw = in__.vector_constrain(Q, lp__);
            else
                sigma_mult_q_raw = in__.vector_constrain(Q);
            // transformed parameters
            current_statement_begin__ = 78;
            validate_non_negative_index("deltaD", "S", S);
            validate_non_negative_index("deltaD", "(Q * logical_eq(deltaD_value, 8))", (Q * logical_eq(deltaD_value, 8)));
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > deltaD((Q * logical_eq(deltaD_value, 8)), Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(S));
            stan::math::initialize(deltaD, DUMMY_VAR__);
            stan::math::fill(deltaD, DUMMY_VAR__);
            current_statement_begin__ = 79;
            validate_non_negative_index("threshold", "S", S);
            validate_non_negative_index("threshold", "Q", Q);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > threshold(Q, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(S));
            stan::math::initialize(threshold, DUMMY_VAR__);
            stan::math::fill(threshold, DUMMY_VAR__);
            current_statement_begin__ = 80;
            validate_non_negative_index("sigma_mult", "S", S);
            validate_non_negative_index("sigma_mult", "Q", Q);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > sigma_mult(Q, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(S));
            stan::math::initialize(sigma_mult, DUMMY_VAR__);
            stan::math::fill(sigma_mult, DUMMY_VAR__);
            current_statement_begin__ = 81;
            validate_non_negative_index("sigma", "S", S);
            validate_non_negative_index("sigma", "Q", Q);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > sigma(Q, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(S));
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 83;
            if (as_bool(logical_eq(deltaD_value, 8))) {
                current_statement_begin__ = 84;
                for (int q = 1; q <= Q; ++q) {
                    current_statement_begin__ = 85;
                    stan::model::assign(deltaD, 
                                stan::model::cons_list(stan::model::index_uni(q), stan::model::nil_index_list()), 
                                inv_logit(add(add(get_base1(deltaD_mu_raw, 1, "deltaD_mu_raw", 1), multiply(get_base1(deltaD_s_sd, 1, "deltaD_s_sd", 1), deltaD_s_raw)), (get_base1(deltaD_q_sd, 1, "deltaD_q_sd", 1) * get_base1(deltaD_q_raw, q, "deltaD_q_raw", 1)))), 
                                "assigning variable deltaD");
                }
            }
            current_statement_begin__ = 91;
            for (int q = 1; q <= Q; ++q) {
                current_statement_begin__ = 92;
                stan::model::assign(threshold, 
                            stan::model::cons_list(stan::model::index_uni(q), stan::model::nil_index_list()), 
                            stan::math::exp(add(add(threshold_mu_raw, multiply(threshold_s_sd, threshold_s_raw)), (threshold_q_sd * get_base1(threshold_q_raw, q, "threshold_q_raw", 1)))), 
                            "assigning variable threshold");
                current_statement_begin__ = 96;
                stan::model::assign(sigma_mult, 
                            stan::model::cons_list(stan::model::index_uni(q), stan::model::nil_index_list()), 
                            stan::math::exp(add(sigma_mult_s_raw, (sigma_mult_q_sd * get_base1(sigma_mult_q_raw, q, "sigma_mult_q_raw", 1)))), 
                            "assigning variable sigma_mult");
                current_statement_begin__ = 98;
                stan::model::assign(sigma, 
                            stan::model::cons_list(stan::model::index_uni(q), stan::model::nil_index_list()), 
                            elt_multiply(get_base1(sigma_mult, q, "sigma_mult", 1), get_base1(threshold, q, "threshold", 1)), 
                            "assigning variable sigma");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 78;
            size_t deltaD_k_0_max__ = (Q * logical_eq(deltaD_value, 8));
            size_t deltaD_j_1_max__ = S;
            for (size_t k_0__ = 0; k_0__ < deltaD_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < deltaD_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(deltaD[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: deltaD" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable deltaD: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 79;
            size_t threshold_k_0_max__ = Q;
            size_t threshold_j_1_max__ = S;
            for (size_t k_0__ = 0; k_0__ < threshold_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < threshold_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(threshold[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: threshold" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable threshold: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 80;
            size_t sigma_mult_k_0_max__ = Q;
            size_t sigma_mult_j_1_max__ = S;
            for (size_t k_0__ = 0; k_0__ < sigma_mult_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < sigma_mult_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(sigma_mult[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: sigma_mult" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma_mult: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 81;
            size_t sigma_k_0_max__ = Q;
            size_t sigma_j_1_max__ = S;
            for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(sigma[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: sigma" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            {
            current_statement_begin__ = 104;
            validate_non_negative_index("p_n", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_n(N);
            stan::math::initialize(p_n, DUMMY_VAR__);
            stan::math::fill(p_n, DUMMY_VAR__);
            current_statement_begin__ = 105;
            validate_non_negative_index("p_y", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_y(N);
            stan::math::initialize(p_y, DUMMY_VAR__);
            stan::math::fill(p_y, DUMMY_VAR__);
            current_statement_begin__ = 106;
            local_scalar_t__ utility_n(DUMMY_VAR__);
            (void) utility_n;  // dummy to suppress unused var warning
            stan::math::initialize(utility_n, DUMMY_VAR__);
            stan::math::fill(utility_n, DUMMY_VAR__);
            current_statement_begin__ = 107;
            local_scalar_t__ utility_y(DUMMY_VAR__);
            (void) utility_y;  // dummy to suppress unused var warning
            stan::math::initialize(utility_y, DUMMY_VAR__);
            stan::math::fill(utility_y, DUMMY_VAR__);
            current_statement_begin__ = 110;
            if (as_bool(logical_eq(deltaD_value, 8))) {
                current_statement_begin__ = 111;
                lp_accum__.add(normal_log<propto__>(get_base1(deltaD_mu_raw, 1, "deltaD_mu_raw", 1), 0, 2));
                current_statement_begin__ = 112;
                lp_accum__.add(normal_log<propto__>(get_base1(deltaD_s_sd, 1, "deltaD_s_sd", 1), 0, 1));
                if (get_base1(deltaD_s_sd, 1, "deltaD_s_sd", 1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-normal_ccdf_log(0, 0, 1));
                current_statement_begin__ = 113;
                lp_accum__.add(normal_log<propto__>(get_base1(deltaD_q_sd, 1, "deltaD_q_sd", 1), 0, 1));
                if (get_base1(deltaD_q_sd, 1, "deltaD_q_sd", 1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-normal_ccdf_log(0, 0, 1));
                current_statement_begin__ = 114;
                lp_accum__.add(std_normal_log<propto__>(deltaD_s_raw));
                current_statement_begin__ = 115;
                lp_accum__.add(std_normal_log<propto__>(deltaD_q_raw));
            }
            current_statement_begin__ = 118;
            lp_accum__.add(normal_log<propto__>(threshold_mu_raw, 1, 2));
            current_statement_begin__ = 119;
            lp_accum__.add(normal_log<propto__>(threshold_s_sd, 0, 2));
            if (threshold_s_sd < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_ccdf_log(0, 0, 2));
            current_statement_begin__ = 120;
            lp_accum__.add(normal_log<propto__>(threshold_q_sd, 0, 2));
            if (threshold_q_sd < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_ccdf_log(0, 0, 2));
            current_statement_begin__ = 121;
            lp_accum__.add(std_normal_log<propto__>(threshold_s_raw));
            current_statement_begin__ = 122;
            lp_accum__.add(std_normal_log<propto__>(threshold_q_raw));
            current_statement_begin__ = 124;
            lp_accum__.add(normal_log<propto__>(sigma_mult_mu_raw, -(0.7), 0.7));
            current_statement_begin__ = 125;
            lp_accum__.add(normal_log<propto__>(sigma_mult_s_sd, 0, 0.7));
            if (sigma_mult_s_sd < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_ccdf_log(0, 0, 0.7));
            current_statement_begin__ = 126;
            lp_accum__.add(normal_log<propto__>(sigma_mult_q_sd, 0, 0.7));
            if (sigma_mult_q_sd < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_ccdf_log(0, 0, 0.7));
            current_statement_begin__ = 127;
            lp_accum__.add(normal_log<propto__>(sigma_mult_s_raw, sigma_mult_mu_raw, sigma_mult_s_sd));
            current_statement_begin__ = 128;
            lp_accum__.add(std_normal_log<propto__>(sigma_mult_q_raw));
            current_statement_begin__ = 131;
            if (as_bool(logical_eq(deltaD_value, 8))) {
                current_statement_begin__ = 132;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 133;
                    if (as_bool(logical_eq(get_base1(tNo, n, "tNo", 1), 1))) {
                        current_statement_begin__ = 134;
                        stan::math::assign(utility_n, get_base1(rating_n, n, "rating_n", 1));
                        current_statement_begin__ = 135;
                        stan::math::assign(utility_y, get_base1(rating_y, n, "rating_y", 1));
                    } else {
                        current_statement_begin__ = 137;
                        stan::math::assign(utility_n, (utility_n * get_base1(get_base1(deltaD, get_base1(qID, n, "qID", 1), "deltaD", 1), get_base1(sID, n, "sID", 1), "deltaD", 2)));
                        current_statement_begin__ = 138;
                        stan::math::assign(utility_n, (utility_n + get_base1(rating_n, n, "rating_n", 1)));
                        current_statement_begin__ = 139;
                        stan::math::assign(utility_y, (utility_y * get_base1(get_base1(deltaD, get_base1(qID, n, "qID", 1), "deltaD", 1), get_base1(sID, n, "sID", 1), "deltaD", 2)));
                        current_statement_begin__ = 140;
                        stan::math::assign(utility_y, (utility_y + get_base1(rating_y, n, "rating_y", 1)));
                    }
                    current_statement_begin__ = 142;
                    stan::model::assign(p_n, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (1 - normal_cdf(utility_n, -(get_base1(get_base1(threshold, get_base1(qID, n, "qID", 1), "threshold", 1), get_base1(sID, n, "sID", 1), "threshold", 2)), get_base1(get_base1(sigma, get_base1(qID, n, "qID", 1), "sigma", 1), get_base1(sID, n, "sID", 1), "sigma", 2))), 
                                "assigning variable p_n");
                    current_statement_begin__ = 143;
                    stan::model::assign(p_y, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                normal_cdf(utility_y, get_base1(get_base1(threshold, get_base1(qID, n, "qID", 1), "threshold", 1), get_base1(sID, n, "sID", 1), "threshold", 2), get_base1(get_base1(sigma, get_base1(qID, n, "qID", 1), "sigma", 1), get_base1(sID, n, "sID", 1), "sigma", 2)), 
                                "assigning variable p_y");
                }
            } else {
                current_statement_begin__ = 146;
                stan::math::assign(utility_n, 0);
                current_statement_begin__ = 147;
                stan::math::assign(utility_y, 0);
                current_statement_begin__ = 148;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 149;
                    stan::model::assign(p_n, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (1 - normal_cdf(get_base1(rating_n, n, "rating_n", 1), -(get_base1(get_base1(threshold, get_base1(qID, n, "qID", 1), "threshold", 1), get_base1(sID, n, "sID", 1), "threshold", 2)), get_base1(get_base1(sigma, get_base1(qID, n, "qID", 1), "sigma", 1), get_base1(sID, n, "sID", 1), "sigma", 2))), 
                                "assigning variable p_n");
                    current_statement_begin__ = 150;
                    stan::model::assign(p_y, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                normal_cdf(get_base1(rating_y, n, "rating_y", 1), get_base1(get_base1(threshold, get_base1(qID, n, "qID", 1), "threshold", 1), get_base1(sID, n, "sID", 1), "threshold", 2), get_base1(get_base1(sigma, get_base1(qID, n, "qID", 1), "sigma", 1), get_base1(sID, n, "sID", 1), "sigma", 2)), 
                                "assigning variable p_y");
                }
            }
            current_statement_begin__ = 154;
            lp_accum__.add(sum(stan::math::log(decision_l(ar_value, 0, N_continue, stan::model::rvalue(p_n, stan::model::cons_list(stan::model::index_multi(idx_continue), stan::model::nil_index_list()), "p_n"), stan::model::rvalue(p_y, stan::model::cons_list(stan::model::index_multi(idx_continue), stan::model::nil_index_list()), "p_y"), pstream__))));
            current_statement_begin__ = 155;
            lp_accum__.add(sum(stan::math::log(decision_l(ar_value, -(1), N_no, stan::model::rvalue(p_n, stan::model::cons_list(stan::model::index_multi(idx_no), stan::model::nil_index_list()), "p_n"), stan::model::rvalue(p_y, stan::model::cons_list(stan::model::index_multi(idx_no), stan::model::nil_index_list()), "p_y"), pstream__))));
            current_statement_begin__ = 156;
            lp_accum__.add(sum(stan::math::log(decision_l(ar_value, 1, N_yes, stan::model::rvalue(p_n, stan::model::cons_list(stan::model::index_multi(idx_yes), stan::model::nil_index_list()), "p_n"), stan::model::rvalue(p_y, stan::model::cons_list(stan::model::index_multi(idx_yes), stan::model::nil_index_list()), "p_y"), pstream__))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("deltaD_mu_raw");
        names__.push_back("deltaD_s_sd");
        names__.push_back("deltaD_q_sd");
        names__.push_back("deltaD_s_raw");
        names__.push_back("deltaD_q_raw");
        names__.push_back("threshold_mu_raw");
        names__.push_back("threshold_s_sd");
        names__.push_back("threshold_q_sd");
        names__.push_back("threshold_s_raw");
        names__.push_back("threshold_q_raw");
        names__.push_back("sigma_mult_mu_raw");
        names__.push_back("sigma_mult_s_sd");
        names__.push_back("sigma_mult_q_sd");
        names__.push_back("sigma_mult_s_raw");
        names__.push_back("sigma_mult_q_raw");
        names__.push_back("deltaD");
        names__.push_back("threshold");
        names__.push_back("sigma_mult");
        names__.push_back("sigma");
        names__.push_back("deltaD_mu");
        names__.push_back("threshold_mu");
        names__.push_back("sigma_mult_mu");
        names__.push_back("sigma_mu");
        names__.push_back("deltaD_smean");
        names__.push_back("deltaD_qmean");
        names__.push_back("threshold_qmean");
        names__.push_back("threshold_smean");
        names__.push_back("sigma_mult_qmean");
        names__.push_back("sigma_mult_smean");
        names__.push_back("sigma_qmean");
        names__.push_back("sigma_smean");
        names__.push_back("p_n");
        names__.push_back("p_y");
        names__.push_back("utility_n");
        names__.push_back("utility_y");
        names__.push_back("log_lik");
        names__.push_back("dev_d");
        names__.push_back("decision_prob");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(logical_eq(deltaD_value, 8));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(deltaD_value, 8));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(deltaD_value, 8));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((S * logical_eq(deltaD_value, 8)));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Q * logical_eq(deltaD_value, 8)));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Q * logical_eq(deltaD_value, 8)));
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(deltaD_value, 8));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((S * logical_eq(deltaD_value, 8)));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((Q * logical_eq(deltaD_value, 8)));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_dmh_threshold_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> deltaD_mu_raw;
        size_t deltaD_mu_raw_d_0_max__ = logical_eq(deltaD_value, 8);
        deltaD_mu_raw.reserve(deltaD_mu_raw_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < deltaD_mu_raw_d_0_max__; ++d_0__) {
            deltaD_mu_raw.push_back(in__.scalar_constrain());
        }
        size_t deltaD_mu_raw_k_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaD_mu_raw_k_0_max__; ++k_0__) {
            vars__.push_back(deltaD_mu_raw[k_0__]);
        }
        std::vector<double> deltaD_s_sd;
        size_t deltaD_s_sd_d_0_max__ = logical_eq(deltaD_value, 8);
        deltaD_s_sd.reserve(deltaD_s_sd_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < deltaD_s_sd_d_0_max__; ++d_0__) {
            deltaD_s_sd.push_back(in__.scalar_lb_constrain(0));
        }
        size_t deltaD_s_sd_k_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaD_s_sd_k_0_max__; ++k_0__) {
            vars__.push_back(deltaD_s_sd[k_0__]);
        }
        std::vector<double> deltaD_q_sd;
        size_t deltaD_q_sd_d_0_max__ = logical_eq(deltaD_value, 8);
        deltaD_q_sd.reserve(deltaD_q_sd_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < deltaD_q_sd_d_0_max__; ++d_0__) {
            deltaD_q_sd.push_back(in__.scalar_lb_constrain(0));
        }
        size_t deltaD_q_sd_k_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaD_q_sd_k_0_max__; ++k_0__) {
            vars__.push_back(deltaD_q_sd[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> deltaD_s_raw = in__.vector_constrain((S * logical_eq(deltaD_value, 8)));
        size_t deltaD_s_raw_j_1_max__ = (S * logical_eq(deltaD_value, 8));
        for (size_t j_1__ = 0; j_1__ < deltaD_s_raw_j_1_max__; ++j_1__) {
            vars__.push_back(deltaD_s_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> deltaD_q_raw = in__.vector_constrain((Q * logical_eq(deltaD_value, 8)));
        size_t deltaD_q_raw_j_1_max__ = (Q * logical_eq(deltaD_value, 8));
        for (size_t j_1__ = 0; j_1__ < deltaD_q_raw_j_1_max__; ++j_1__) {
            vars__.push_back(deltaD_q_raw(j_1__));
        }
        double threshold_mu_raw = in__.scalar_constrain();
        vars__.push_back(threshold_mu_raw);
        double threshold_s_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(threshold_s_sd);
        double threshold_q_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(threshold_q_sd);
        Eigen::Matrix<double, Eigen::Dynamic, 1> threshold_s_raw = in__.vector_constrain(S);
        size_t threshold_s_raw_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < threshold_s_raw_j_1_max__; ++j_1__) {
            vars__.push_back(threshold_s_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> threshold_q_raw = in__.vector_constrain(Q);
        size_t threshold_q_raw_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < threshold_q_raw_j_1_max__; ++j_1__) {
            vars__.push_back(threshold_q_raw(j_1__));
        }
        double sigma_mult_mu_raw = in__.scalar_constrain();
        vars__.push_back(sigma_mult_mu_raw);
        double sigma_mult_s_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_mult_s_sd);
        double sigma_mult_q_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_mult_q_sd);
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_mult_s_raw = in__.vector_constrain(S);
        size_t sigma_mult_s_raw_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < sigma_mult_s_raw_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_mult_s_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_mult_q_raw = in__.vector_constrain(Q);
        size_t sigma_mult_q_raw_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < sigma_mult_q_raw_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_mult_q_raw(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 78;
            validate_non_negative_index("deltaD", "S", S);
            validate_non_negative_index("deltaD", "(Q * logical_eq(deltaD_value, 8))", (Q * logical_eq(deltaD_value, 8)));
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > deltaD((Q * logical_eq(deltaD_value, 8)), Eigen::Matrix<double, Eigen::Dynamic, 1>(S));
            stan::math::initialize(deltaD, DUMMY_VAR__);
            stan::math::fill(deltaD, DUMMY_VAR__);
            current_statement_begin__ = 79;
            validate_non_negative_index("threshold", "S", S);
            validate_non_negative_index("threshold", "Q", Q);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > threshold(Q, Eigen::Matrix<double, Eigen::Dynamic, 1>(S));
            stan::math::initialize(threshold, DUMMY_VAR__);
            stan::math::fill(threshold, DUMMY_VAR__);
            current_statement_begin__ = 80;
            validate_non_negative_index("sigma_mult", "S", S);
            validate_non_negative_index("sigma_mult", "Q", Q);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > sigma_mult(Q, Eigen::Matrix<double, Eigen::Dynamic, 1>(S));
            stan::math::initialize(sigma_mult, DUMMY_VAR__);
            stan::math::fill(sigma_mult, DUMMY_VAR__);
            current_statement_begin__ = 81;
            validate_non_negative_index("sigma", "S", S);
            validate_non_negative_index("sigma", "Q", Q);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > sigma(Q, Eigen::Matrix<double, Eigen::Dynamic, 1>(S));
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 83;
            if (as_bool(logical_eq(deltaD_value, 8))) {
                current_statement_begin__ = 84;
                for (int q = 1; q <= Q; ++q) {
                    current_statement_begin__ = 85;
                    stan::model::assign(deltaD, 
                                stan::model::cons_list(stan::model::index_uni(q), stan::model::nil_index_list()), 
                                inv_logit(add(add(get_base1(deltaD_mu_raw, 1, "deltaD_mu_raw", 1), multiply(get_base1(deltaD_s_sd, 1, "deltaD_s_sd", 1), deltaD_s_raw)), (get_base1(deltaD_q_sd, 1, "deltaD_q_sd", 1) * get_base1(deltaD_q_raw, q, "deltaD_q_raw", 1)))), 
                                "assigning variable deltaD");
                }
            }
            current_statement_begin__ = 91;
            for (int q = 1; q <= Q; ++q) {
                current_statement_begin__ = 92;
                stan::model::assign(threshold, 
                            stan::model::cons_list(stan::model::index_uni(q), stan::model::nil_index_list()), 
                            stan::math::exp(add(add(threshold_mu_raw, multiply(threshold_s_sd, threshold_s_raw)), (threshold_q_sd * get_base1(threshold_q_raw, q, "threshold_q_raw", 1)))), 
                            "assigning variable threshold");
                current_statement_begin__ = 96;
                stan::model::assign(sigma_mult, 
                            stan::model::cons_list(stan::model::index_uni(q), stan::model::nil_index_list()), 
                            stan::math::exp(add(sigma_mult_s_raw, (sigma_mult_q_sd * get_base1(sigma_mult_q_raw, q, "sigma_mult_q_raw", 1)))), 
                            "assigning variable sigma_mult");
                current_statement_begin__ = 98;
                stan::model::assign(sigma, 
                            stan::model::cons_list(stan::model::index_uni(q), stan::model::nil_index_list()), 
                            elt_multiply(get_base1(sigma_mult, q, "sigma_mult", 1), get_base1(threshold, q, "threshold", 1)), 
                            "assigning variable sigma");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t deltaD_j_1_max__ = S;
                size_t deltaD_k_0_max__ = (Q * logical_eq(deltaD_value, 8));
                for (size_t j_1__ = 0; j_1__ < deltaD_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < deltaD_k_0_max__; ++k_0__) {
                        vars__.push_back(deltaD[k_0__](j_1__));
                    }
                }
                size_t threshold_j_1_max__ = S;
                size_t threshold_k_0_max__ = Q;
                for (size_t j_1__ = 0; j_1__ < threshold_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < threshold_k_0_max__; ++k_0__) {
                        vars__.push_back(threshold[k_0__](j_1__));
                    }
                }
                size_t sigma_mult_j_1_max__ = S;
                size_t sigma_mult_k_0_max__ = Q;
                for (size_t j_1__ = 0; j_1__ < sigma_mult_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < sigma_mult_k_0_max__; ++k_0__) {
                        vars__.push_back(sigma_mult[k_0__](j_1__));
                    }
                }
                size_t sigma_j_1_max__ = S;
                size_t sigma_k_0_max__ = Q;
                for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
                        vars__.push_back(sigma[k_0__](j_1__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 160;
            validate_non_negative_index("deltaD_mu", "logical_eq(deltaD_value, 8)", logical_eq(deltaD_value, 8));
            std::vector<double> deltaD_mu(logical_eq(deltaD_value, 8), double(0));
            stan::math::initialize(deltaD_mu, DUMMY_VAR__);
            stan::math::fill(deltaD_mu, DUMMY_VAR__);
            current_statement_begin__ = 161;
            double threshold_mu;
            (void) threshold_mu;  // dummy to suppress unused var warning
            stan::math::initialize(threshold_mu, DUMMY_VAR__);
            stan::math::fill(threshold_mu, DUMMY_VAR__);
            current_statement_begin__ = 162;
            double sigma_mult_mu;
            (void) sigma_mult_mu;  // dummy to suppress unused var warning
            stan::math::initialize(sigma_mult_mu, DUMMY_VAR__);
            stan::math::fill(sigma_mult_mu, DUMMY_VAR__);
            current_statement_begin__ = 163;
            double sigma_mu;
            (void) sigma_mu;  // dummy to suppress unused var warning
            stan::math::initialize(sigma_mu, DUMMY_VAR__);
            stan::math::fill(sigma_mu, DUMMY_VAR__);
            current_statement_begin__ = 165;
            validate_non_negative_index("deltaD_smean", "(S * logical_eq(deltaD_value, 8))", (S * logical_eq(deltaD_value, 8)));
            Eigen::Matrix<double, Eigen::Dynamic, 1> deltaD_smean((S * logical_eq(deltaD_value, 8)));
            stan::math::initialize(deltaD_smean, DUMMY_VAR__);
            stan::math::fill(deltaD_smean, DUMMY_VAR__);
            current_statement_begin__ = 166;
            validate_non_negative_index("deltaD_qmean", "(Q * logical_eq(deltaD_value, 8))", (Q * logical_eq(deltaD_value, 8)));
            Eigen::Matrix<double, Eigen::Dynamic, 1> deltaD_qmean((Q * logical_eq(deltaD_value, 8)));
            stan::math::initialize(deltaD_qmean, DUMMY_VAR__);
            stan::math::fill(deltaD_qmean, DUMMY_VAR__);
            current_statement_begin__ = 167;
            validate_non_negative_index("threshold_qmean", "Q", Q);
            Eigen::Matrix<double, Eigen::Dynamic, 1> threshold_qmean(Q);
            stan::math::initialize(threshold_qmean, DUMMY_VAR__);
            stan::math::fill(threshold_qmean, DUMMY_VAR__);
            current_statement_begin__ = 168;
            validate_non_negative_index("threshold_smean", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, 1> threshold_smean(S);
            stan::math::initialize(threshold_smean, DUMMY_VAR__);
            stan::math::fill(threshold_smean, DUMMY_VAR__);
            current_statement_begin__ = 169;
            validate_non_negative_index("sigma_mult_qmean", "Q", Q);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_mult_qmean(Q);
            stan::math::initialize(sigma_mult_qmean, DUMMY_VAR__);
            stan::math::fill(sigma_mult_qmean, DUMMY_VAR__);
            current_statement_begin__ = 170;
            validate_non_negative_index("sigma_mult_smean", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_mult_smean(S);
            stan::math::initialize(sigma_mult_smean, DUMMY_VAR__);
            stan::math::fill(sigma_mult_smean, DUMMY_VAR__);
            current_statement_begin__ = 171;
            validate_non_negative_index("sigma_qmean", "Q", Q);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_qmean(Q);
            stan::math::initialize(sigma_qmean, DUMMY_VAR__);
            stan::math::fill(sigma_qmean, DUMMY_VAR__);
            current_statement_begin__ = 172;
            validate_non_negative_index("sigma_smean", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_smean(S);
            stan::math::initialize(sigma_smean, DUMMY_VAR__);
            stan::math::fill(sigma_smean, DUMMY_VAR__);
            current_statement_begin__ = 174;
            validate_non_negative_index("p_n", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_n(N);
            stan::math::initialize(p_n, DUMMY_VAR__);
            stan::math::fill(p_n, DUMMY_VAR__);
            current_statement_begin__ = 175;
            validate_non_negative_index("p_y", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_y(N);
            stan::math::initialize(p_y, DUMMY_VAR__);
            stan::math::fill(p_y, DUMMY_VAR__);
            current_statement_begin__ = 176;
            double utility_n;
            (void) utility_n;  // dummy to suppress unused var warning
            stan::math::initialize(utility_n, DUMMY_VAR__);
            stan::math::fill(utility_n, DUMMY_VAR__);
            current_statement_begin__ = 177;
            double utility_y;
            (void) utility_y;  // dummy to suppress unused var warning
            stan::math::initialize(utility_y, DUMMY_VAR__);
            stan::math::fill(utility_y, DUMMY_VAR__);
            current_statement_begin__ = 178;
            validate_non_negative_index("log_lik", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(N);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            current_statement_begin__ = 179;
            double dev_d;
            (void) dev_d;  // dummy to suppress unused var warning
            stan::math::initialize(dev_d, DUMMY_VAR__);
            stan::math::fill(dev_d, DUMMY_VAR__);
            current_statement_begin__ = 180;
            validate_non_negative_index("decision_prob", "N", N);
            validate_non_negative_index("decision_prob", "3", 3);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > decision_prob(3, Eigen::Matrix<double, Eigen::Dynamic, 1>(N));
            stan::math::initialize(decision_prob, DUMMY_VAR__);
            stan::math::fill(decision_prob, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 182;
            if (as_bool(logical_eq(deltaD_value, 8))) {
                current_statement_begin__ = 183;
                for (int s = 1; s <= S; ++s) {
                    current_statement_begin__ = 184;
                    stan::model::assign(deltaD_smean, 
                                stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                mean(to_array_1d(stan::model::rvalue(deltaD, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "deltaD"))), 
                                "assigning variable deltaD_smean");
                }
                current_statement_begin__ = 186;
                for (int q = 1; q <= Q; ++q) {
                    current_statement_begin__ = 187;
                    stan::model::assign(deltaD_qmean, 
                                stan::model::cons_list(stan::model::index_uni(q), stan::model::nil_index_list()), 
                                mean(to_array_1d(get_base1(deltaD, q, "deltaD", 1))), 
                                "assigning variable deltaD_qmean");
                }
                current_statement_begin__ = 189;
                stan::model::assign(deltaD_mu, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            mean(to_array_1d(deltaD_smean)), 
                            "assigning variable deltaD_mu");
            }
            current_statement_begin__ = 193;
            stan::math::assign(threshold_mu, stan::math::exp(((threshold_mu_raw + (pow(threshold_q_sd, 2) / 2)) + (pow(threshold_s_sd, 2) / 2))));
            current_statement_begin__ = 194;
            stan::math::assign(sigma_mult_mu, stan::math::exp(((sigma_mult_mu_raw + (pow(sigma_mult_q_sd, 2) / 2)) + (pow(sigma_mult_s_sd, 2) / 2))));
            current_statement_begin__ = 195;
            stan::math::assign(sigma_mu, (sigma_mult_mu * threshold_mu));
            current_statement_begin__ = 198;
            for (int s = 1; s <= S; ++s) {
                current_statement_begin__ = 199;
                stan::model::assign(threshold_smean, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            mean(to_array_1d(stan::model::rvalue(threshold, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "threshold"))), 
                            "assigning variable threshold_smean");
                current_statement_begin__ = 200;
                stan::model::assign(sigma_mult_smean, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            mean(to_array_1d(stan::model::rvalue(sigma_mult, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "sigma_mult"))), 
                            "assigning variable sigma_mult_smean");
                current_statement_begin__ = 201;
                stan::model::assign(sigma_smean, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            mean(to_array_1d(elt_multiply(to_vector(stan::model::rvalue(threshold, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "threshold")), to_vector(stan::model::rvalue(sigma_mult, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list())), "sigma_mult"))))), 
                            "assigning variable sigma_smean");
            }
            current_statement_begin__ = 203;
            for (int q = 1; q <= Q; ++q) {
                current_statement_begin__ = 204;
                stan::model::assign(threshold_qmean, 
                            stan::model::cons_list(stan::model::index_uni(q), stan::model::nil_index_list()), 
                            mean(to_array_1d(get_base1(threshold, q, "threshold", 1))), 
                            "assigning variable threshold_qmean");
                current_statement_begin__ = 205;
                stan::model::assign(sigma_mult_qmean, 
                            stan::model::cons_list(stan::model::index_uni(q), stan::model::nil_index_list()), 
                            mean(to_array_1d(get_base1(sigma_mult, q, "sigma_mult", 1))), 
                            "assigning variable sigma_mult_qmean");
                current_statement_begin__ = 206;
                stan::model::assign(sigma_qmean, 
                            stan::model::cons_list(stan::model::index_uni(q), stan::model::nil_index_list()), 
                            mean(to_array_1d(elt_multiply(get_base1(threshold, q, "threshold", 1), get_base1(sigma_mult, q, "sigma_mult", 1)))), 
                            "assigning variable sigma_qmean");
            }
            current_statement_begin__ = 209;
            if (as_bool(logical_eq(deltaD_value, 8))) {
                current_statement_begin__ = 210;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 211;
                    if (as_bool(logical_eq(get_base1(tNo, n, "tNo", 1), 1))) {
                        current_statement_begin__ = 212;
                        stan::math::assign(utility_n, get_base1(rating_n, n, "rating_n", 1));
                        current_statement_begin__ = 213;
                        stan::math::assign(utility_y, get_base1(rating_y, n, "rating_y", 1));
                    } else {
                        current_statement_begin__ = 215;
                        stan::math::assign(utility_n, (utility_n * get_base1(get_base1(deltaD, get_base1(qID, n, "qID", 1), "deltaD", 1), get_base1(sID, n, "sID", 1), "deltaD", 2)));
                        current_statement_begin__ = 216;
                        stan::math::assign(utility_n, (utility_n + get_base1(rating_n, n, "rating_n", 1)));
                        current_statement_begin__ = 217;
                        stan::math::assign(utility_y, (utility_y * get_base1(get_base1(deltaD, get_base1(qID, n, "qID", 1), "deltaD", 1), get_base1(sID, n, "sID", 1), "deltaD", 2)));
                        current_statement_begin__ = 218;
                        stan::math::assign(utility_y, (utility_y + get_base1(rating_y, n, "rating_y", 1)));
                    }
                    current_statement_begin__ = 220;
                    stan::model::assign(p_n, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (1 - normal_cdf(utility_n, -(get_base1(get_base1(threshold, get_base1(qID, n, "qID", 1), "threshold", 1), get_base1(sID, n, "sID", 1), "threshold", 2)), get_base1(get_base1(sigma, get_base1(qID, n, "qID", 1), "sigma", 1), get_base1(sID, n, "sID", 1), "sigma", 2))), 
                                "assigning variable p_n");
                    current_statement_begin__ = 221;
                    stan::model::assign(p_y, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                normal_cdf(utility_y, get_base1(get_base1(threshold, get_base1(qID, n, "qID", 1), "threshold", 1), get_base1(sID, n, "sID", 1), "threshold", 2), get_base1(get_base1(sigma, get_base1(qID, n, "qID", 1), "sigma", 1), get_base1(sID, n, "sID", 1), "sigma", 2)), 
                                "assigning variable p_y");
                }
            } else {
                current_statement_begin__ = 224;
                stan::math::assign(utility_n, 0);
                current_statement_begin__ = 225;
                stan::math::assign(utility_y, 0);
                current_statement_begin__ = 226;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 227;
                    stan::model::assign(p_n, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (1 - normal_cdf(get_base1(rating_n, n, "rating_n", 1), -(get_base1(get_base1(threshold, get_base1(qID, n, "qID", 1), "threshold", 1), get_base1(sID, n, "sID", 1), "threshold", 2)), get_base1(get_base1(sigma, get_base1(qID, n, "qID", 1), "sigma", 1), get_base1(sID, n, "sID", 1), "sigma", 2))), 
                                "assigning variable p_n");
                    current_statement_begin__ = 228;
                    stan::model::assign(p_y, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                normal_cdf(get_base1(rating_y, n, "rating_y", 1), get_base1(get_base1(threshold, get_base1(qID, n, "qID", 1), "threshold", 1), get_base1(sID, n, "sID", 1), "threshold", 2), get_base1(get_base1(sigma, get_base1(qID, n, "qID", 1), "sigma", 1), get_base1(sID, n, "sID", 1), "sigma", 2)), 
                                "assigning variable p_y");
                }
            }
            current_statement_begin__ = 231;
            stan::model::assign(decision_prob, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        decision_l(ar_value, -(1), N, p_n, p_y, pstream__), 
                        "assigning variable decision_prob");
            current_statement_begin__ = 232;
            stan::model::assign(decision_prob, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        decision_l(ar_value, 0, N, p_n, p_y, pstream__), 
                        "assigning variable decision_prob");
            current_statement_begin__ = 233;
            stan::model::assign(decision_prob, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                        decision_l(ar_value, 1, N, p_n, p_y, pstream__), 
                        "assigning variable decision_prob");
            current_statement_begin__ = 234;
            stan::math::assign(dev_d, 0);
            current_statement_begin__ = 235;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 236;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            stan::math::log(get_base1(get_base1(decision_prob, (get_base1(terminate, n, "terminate", 1) + 2), "decision_prob", 1), n, "decision_prob", 2)), 
                            "assigning variable log_lik");
                current_statement_begin__ = 237;
                stan::math::assign(dev_d, (dev_d + (-(2) * get_base1(log_lik, n, "log_lik", 1))));
            }
            // validate, write generated quantities
            current_statement_begin__ = 160;
            size_t deltaD_mu_k_0_max__ = logical_eq(deltaD_value, 8);
            for (size_t k_0__ = 0; k_0__ < deltaD_mu_k_0_max__; ++k_0__) {
                vars__.push_back(deltaD_mu[k_0__]);
            }
            current_statement_begin__ = 161;
            vars__.push_back(threshold_mu);
            current_statement_begin__ = 162;
            vars__.push_back(sigma_mult_mu);
            current_statement_begin__ = 163;
            vars__.push_back(sigma_mu);
            current_statement_begin__ = 165;
            size_t deltaD_smean_j_1_max__ = (S * logical_eq(deltaD_value, 8));
            for (size_t j_1__ = 0; j_1__ < deltaD_smean_j_1_max__; ++j_1__) {
                vars__.push_back(deltaD_smean(j_1__));
            }
            current_statement_begin__ = 166;
            size_t deltaD_qmean_j_1_max__ = (Q * logical_eq(deltaD_value, 8));
            for (size_t j_1__ = 0; j_1__ < deltaD_qmean_j_1_max__; ++j_1__) {
                vars__.push_back(deltaD_qmean(j_1__));
            }
            current_statement_begin__ = 167;
            size_t threshold_qmean_j_1_max__ = Q;
            for (size_t j_1__ = 0; j_1__ < threshold_qmean_j_1_max__; ++j_1__) {
                vars__.push_back(threshold_qmean(j_1__));
            }
            current_statement_begin__ = 168;
            size_t threshold_smean_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < threshold_smean_j_1_max__; ++j_1__) {
                vars__.push_back(threshold_smean(j_1__));
            }
            current_statement_begin__ = 169;
            size_t sigma_mult_qmean_j_1_max__ = Q;
            for (size_t j_1__ = 0; j_1__ < sigma_mult_qmean_j_1_max__; ++j_1__) {
                vars__.push_back(sigma_mult_qmean(j_1__));
            }
            current_statement_begin__ = 170;
            size_t sigma_mult_smean_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < sigma_mult_smean_j_1_max__; ++j_1__) {
                vars__.push_back(sigma_mult_smean(j_1__));
            }
            current_statement_begin__ = 171;
            size_t sigma_qmean_j_1_max__ = Q;
            for (size_t j_1__ = 0; j_1__ < sigma_qmean_j_1_max__; ++j_1__) {
                vars__.push_back(sigma_qmean(j_1__));
            }
            current_statement_begin__ = 172;
            size_t sigma_smean_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < sigma_smean_j_1_max__; ++j_1__) {
                vars__.push_back(sigma_smean(j_1__));
            }
            current_statement_begin__ = 174;
            size_t p_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_n_j_1_max__; ++j_1__) {
                vars__.push_back(p_n(j_1__));
            }
            current_statement_begin__ = 175;
            size_t p_y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_y_j_1_max__; ++j_1__) {
                vars__.push_back(p_y(j_1__));
            }
            current_statement_begin__ = 176;
            vars__.push_back(utility_n);
            current_statement_begin__ = 177;
            vars__.push_back(utility_y);
            current_statement_begin__ = 178;
            size_t log_lik_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
            current_statement_begin__ = 179;
            vars__.push_back(dev_d);
            current_statement_begin__ = 180;
            size_t decision_prob_j_1_max__ = N;
            size_t decision_prob_k_0_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < decision_prob_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < decision_prob_k_0_max__; ++k_0__) {
                    vars__.push_back(decision_prob[k_0__](j_1__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_dmh_threshold";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t deltaD_mu_raw_k_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaD_mu_raw_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD_mu_raw" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t deltaD_s_sd_k_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaD_s_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD_s_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t deltaD_q_sd_k_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaD_q_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD_q_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t deltaD_s_raw_j_1_max__ = (S * logical_eq(deltaD_value, 8));
        for (size_t j_1__ = 0; j_1__ < deltaD_s_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD_s_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t deltaD_q_raw_j_1_max__ = (Q * logical_eq(deltaD_value, 8));
        for (size_t j_1__ = 0; j_1__ < deltaD_q_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD_q_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "threshold_mu_raw";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "threshold_s_sd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "threshold_q_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t threshold_s_raw_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < threshold_s_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "threshold_s_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t threshold_q_raw_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < threshold_q_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "threshold_q_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_mult_mu_raw";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_mult_s_sd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_mult_q_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma_mult_s_raw_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < sigma_mult_s_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_mult_s_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_mult_q_raw_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < sigma_mult_q_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_mult_q_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t deltaD_j_1_max__ = S;
            size_t deltaD_k_0_max__ = (Q * logical_eq(deltaD_value, 8));
            for (size_t j_1__ = 0; j_1__ < deltaD_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < deltaD_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "deltaD" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t threshold_j_1_max__ = S;
            size_t threshold_k_0_max__ = Q;
            for (size_t j_1__ = 0; j_1__ < threshold_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < threshold_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "threshold" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t sigma_mult_j_1_max__ = S;
            size_t sigma_mult_k_0_max__ = Q;
            for (size_t j_1__ = 0; j_1__ < sigma_mult_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < sigma_mult_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sigma_mult" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t sigma_j_1_max__ = S;
            size_t sigma_k_0_max__ = Q;
            for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sigma" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t deltaD_mu_k_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaD_mu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD_mu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "threshold_mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_mult_mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_mu";
        param_names__.push_back(param_name_stream__.str());
        size_t deltaD_smean_j_1_max__ = (S * logical_eq(deltaD_value, 8));
        for (size_t j_1__ = 0; j_1__ < deltaD_smean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD_smean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t deltaD_qmean_j_1_max__ = (Q * logical_eq(deltaD_value, 8));
        for (size_t j_1__ = 0; j_1__ < deltaD_qmean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD_qmean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t threshold_qmean_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < threshold_qmean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "threshold_qmean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t threshold_smean_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < threshold_smean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "threshold_smean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_mult_qmean_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < sigma_mult_qmean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_mult_qmean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_mult_smean_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < sigma_mult_smean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_mult_smean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_qmean_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < sigma_qmean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_qmean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_smean_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < sigma_smean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_smean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p_n_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < p_n_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_n" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p_y_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < p_y_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_y" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "utility_n";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "utility_y";
        param_names__.push_back(param_name_stream__.str());
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dev_d";
        param_names__.push_back(param_name_stream__.str());
        size_t decision_prob_j_1_max__ = N;
        size_t decision_prob_k_0_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < decision_prob_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < decision_prob_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "decision_prob" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t deltaD_mu_raw_k_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaD_mu_raw_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD_mu_raw" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t deltaD_s_sd_k_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaD_s_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD_s_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t deltaD_q_sd_k_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaD_q_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD_q_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t deltaD_s_raw_j_1_max__ = (S * logical_eq(deltaD_value, 8));
        for (size_t j_1__ = 0; j_1__ < deltaD_s_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD_s_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t deltaD_q_raw_j_1_max__ = (Q * logical_eq(deltaD_value, 8));
        for (size_t j_1__ = 0; j_1__ < deltaD_q_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD_q_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "threshold_mu_raw";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "threshold_s_sd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "threshold_q_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t threshold_s_raw_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < threshold_s_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "threshold_s_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t threshold_q_raw_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < threshold_q_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "threshold_q_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_mult_mu_raw";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_mult_s_sd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_mult_q_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma_mult_s_raw_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < sigma_mult_s_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_mult_s_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_mult_q_raw_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < sigma_mult_q_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_mult_q_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t deltaD_j_1_max__ = S;
            size_t deltaD_k_0_max__ = (Q * logical_eq(deltaD_value, 8));
            for (size_t j_1__ = 0; j_1__ < deltaD_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < deltaD_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "deltaD" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t threshold_j_1_max__ = S;
            size_t threshold_k_0_max__ = Q;
            for (size_t j_1__ = 0; j_1__ < threshold_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < threshold_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "threshold" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t sigma_mult_j_1_max__ = S;
            size_t sigma_mult_k_0_max__ = Q;
            for (size_t j_1__ = 0; j_1__ < sigma_mult_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < sigma_mult_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sigma_mult" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t sigma_j_1_max__ = S;
            size_t sigma_k_0_max__ = Q;
            for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "sigma" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t deltaD_mu_k_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaD_mu_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD_mu" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "threshold_mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_mult_mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_mu";
        param_names__.push_back(param_name_stream__.str());
        size_t deltaD_smean_j_1_max__ = (S * logical_eq(deltaD_value, 8));
        for (size_t j_1__ = 0; j_1__ < deltaD_smean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD_smean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t deltaD_qmean_j_1_max__ = (Q * logical_eq(deltaD_value, 8));
        for (size_t j_1__ = 0; j_1__ < deltaD_qmean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD_qmean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t threshold_qmean_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < threshold_qmean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "threshold_qmean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t threshold_smean_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < threshold_smean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "threshold_smean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_mult_qmean_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < sigma_mult_qmean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_mult_qmean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_mult_smean_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < sigma_mult_smean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_mult_smean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_qmean_j_1_max__ = Q;
        for (size_t j_1__ = 0; j_1__ < sigma_qmean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_qmean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_smean_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < sigma_smean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_smean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p_n_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < p_n_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_n" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p_y_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < p_y_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_y" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "utility_n";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "utility_y";
        param_names__.push_back(param_name_stream__.str());
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dev_d";
        param_names__.push_back(param_name_stream__.str());
        size_t decision_prob_j_1_max__ = N;
        size_t decision_prob_k_0_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < decision_prob_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < decision_prob_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "decision_prob" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_dmh_threshold_namespace::model_dmh_threshold stan_model;
#endif
