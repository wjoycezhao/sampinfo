// Generated by rstantools.  Do not edit by hand.

/*
    sampinfo is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    sampinfo is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with sampinfo.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_mmdm_threshold_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_mmdm_threshold");
    reader.add_event(289, 287, "end", "model_mmdm_threshold");
    return reader;
}
template <typename T1__, typename T2__, typename T3__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__>::type, Eigen::Dynamic, 1> >
decision_l(const int& N,
               const T1__& ar_value,
               const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& p_n,
               const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& p_y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 6;
        validate_non_negative_index("prob_d", "N", N);
        validate_non_negative_index("prob_d", "3", 3);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > prob_d(3, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(N));
        stan::math::initialize(prob_d, DUMMY_VAR__);
        stan::math::fill(prob_d, DUMMY_VAR__);
        current_statement_begin__ = 8;
        stan::model::assign(prob_d, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    add(multiply(ar_value, p_n), multiply((1 - ar_value), add(elt_multiply(p_n, subtract(1, p_y)), elt_multiply(multiply(.5, p_y), p_n)))), 
                    "assigning variable prob_d");
        current_statement_begin__ = 11;
        stan::model::assign(prob_d, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    add(multiply(ar_value, subtract(subtract(1, p_y), p_n)), elt_multiply(multiply((1 - ar_value), subtract(1, p_n)), subtract(1, p_y))), 
                    "assigning variable prob_d");
        current_statement_begin__ = 14;
        stan::model::assign(prob_d, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                    add(multiply(ar_value, p_y), multiply((1 - ar_value), add(elt_multiply(p_y, subtract(1, p_n)), elt_multiply(multiply(.5, p_y), p_n)))), 
                    "assigning variable prob_d");
        current_statement_begin__ = 16;
        return stan::math::promote_scalar<fun_return_scalar_t__>(prob_d);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct decision_l_functor__ {
    template <typename T1__, typename T2__, typename T3__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__>::type, Eigen::Dynamic, 1> >
    operator()(const int& N,
               const T1__& ar_value,
               const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& p_n,
               const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& p_y, std::ostream* pstream__) const {
        return decision_l(N, ar_value, p_n, p_y, pstream__);
    }
};
int
sign(const int& x, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 19;
        int x_sign(0);
        (void) x_sign;  // dummy to suppress unused var warning
        stan::math::fill(x_sign, std::numeric_limits<int>::min());
        current_statement_begin__ = 20;
        if (as_bool(logical_lt(x, 0))) {
            current_statement_begin__ = 20;
            stan::math::assign(x_sign, -(1));
        }
        current_statement_begin__ = 21;
        if (as_bool(logical_eq(x, 0))) {
            current_statement_begin__ = 21;
            stan::math::assign(x_sign, 0);
        }
        current_statement_begin__ = 22;
        if (as_bool(logical_gt(x, 0))) {
            current_statement_begin__ = 22;
            stan::math::assign(x_sign, 1);
        }
        current_statement_begin__ = 23;
        return stan::math::promote_scalar<fun_return_scalar_t__>(x_sign);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct sign_functor__ {
            int
    operator()(const int& x, std::ostream* pstream__) const {
        return sign(x, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_mmdm_threshold : public prob_grad {
private:
        int deltaM_value;
        int condition_value;
        int C;
        int K;
        int N;
        std::vector<int> tNo;
        std::vector<matrix_d> X;
        std::vector<int> cID;
        int MC;
        int ar_value;
        int binary_value;
        int deltaD_value;
        std::vector<int> terminate;
        std::vector<int> rating;
        std::vector<int> rating_y;
        std::vector<int> rating_n;
        std::vector<matrix_d> X_sim;
        std::vector<vector_d> cluster_rating_m;
        int max_tNo_prd;
public:
    model_mmdm_threshold(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_mmdm_threshold(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_mmdm_threshold_namespace::model_mmdm_threshold";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 30;
            context__.validate_dims("data initialization", "deltaM_value", "int", context__.to_vec());
            deltaM_value = int(0);
            vals_i__ = context__.vals_i("deltaM_value");
            pos__ = 0;
            deltaM_value = vals_i__[pos__++];
            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "condition_value", "int", context__.to_vec());
            condition_value = int(0);
            vals_i__ = context__.vals_i("condition_value");
            pos__ = 0;
            condition_value = vals_i__[pos__++];
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "C", "int", context__.to_vec());
            C = int(0);
            vals_i__ = context__.vals_i("C");
            pos__ = 0;
            C = vals_i__[pos__++];
            check_greater_or_equal(function__, "C", C, 2);
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 35;
            validate_non_negative_index("tNo", "N", N);
            context__.validate_dims("data initialization", "tNo", "int", context__.to_vec(N));
            tNo = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("tNo");
            pos__ = 0;
            size_t tNo_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < tNo_k_0_max__; ++k_0__) {
                tNo[k_0__] = vals_i__[pos__++];
            }
            size_t tNo_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < tNo_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "tNo[i_0__]", tNo[i_0__], 1);
            }
            current_statement_begin__ = 36;
            validate_non_negative_index("X", "C", C);
            validate_non_negative_index("X", "K", K);
            validate_non_negative_index("X", "N", N);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,C,K));
            X = std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(N, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(C, K));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = K;
            size_t X_j_1_max__ = C;
            size_t X_k_0_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < X_k_0_max__; ++k_0__) {
                        X[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                    }
                }
            }
            current_statement_begin__ = 37;
            validate_non_negative_index("cID", "N", N);
            context__.validate_dims("data initialization", "cID", "int", context__.to_vec(N));
            cID = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("cID");
            pos__ = 0;
            size_t cID_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < cID_k_0_max__; ++k_0__) {
                cID[k_0__] = vals_i__[pos__++];
            }
            size_t cID_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < cID_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "cID[i_0__]", cID[i_0__], 1);
                check_less_or_equal(function__, "cID[i_0__]", cID[i_0__], C);
            }
            current_statement_begin__ = 38;
            context__.validate_dims("data initialization", "MC", "int", context__.to_vec());
            MC = int(0);
            vals_i__ = context__.vals_i("MC");
            pos__ = 0;
            MC = vals_i__[pos__++];
            check_greater_or_equal(function__, "MC", MC, 2);
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "ar_value", "int", context__.to_vec());
            ar_value = int(0);
            vals_i__ = context__.vals_i("ar_value");
            pos__ = 0;
            ar_value = vals_i__[pos__++];
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "binary_value", "int", context__.to_vec());
            binary_value = int(0);
            vals_i__ = context__.vals_i("binary_value");
            pos__ = 0;
            binary_value = vals_i__[pos__++];
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "deltaD_value", "int", context__.to_vec());
            deltaD_value = int(0);
            vals_i__ = context__.vals_i("deltaD_value");
            pos__ = 0;
            deltaD_value = vals_i__[pos__++];
            current_statement_begin__ = 43;
            validate_non_negative_index("terminate", "N", N);
            context__.validate_dims("data initialization", "terminate", "int", context__.to_vec(N));
            terminate = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("terminate");
            pos__ = 0;
            size_t terminate_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < terminate_k_0_max__; ++k_0__) {
                terminate[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 44;
            validate_non_negative_index("rating", "N", N);
            context__.validate_dims("data initialization", "rating", "int", context__.to_vec(N));
            rating = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("rating");
            pos__ = 0;
            size_t rating_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < rating_k_0_max__; ++k_0__) {
                rating[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 45;
            validate_non_negative_index("rating_y", "N", N);
            context__.validate_dims("data initialization", "rating_y", "int", context__.to_vec(N));
            rating_y = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("rating_y");
            pos__ = 0;
            size_t rating_y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < rating_y_k_0_max__; ++k_0__) {
                rating_y[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 46;
            validate_non_negative_index("rating_n", "N", N);
            context__.validate_dims("data initialization", "rating_n", "int", context__.to_vec(N));
            rating_n = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("rating_n");
            pos__ = 0;
            size_t rating_n_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < rating_n_k_0_max__; ++k_0__) {
                rating_n[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 48;
            validate_non_negative_index("X_sim", "C", C);
            validate_non_negative_index("X_sim", "K", K);
            validate_non_negative_index("X_sim", "C", C);
            context__.validate_dims("data initialization", "X_sim", "matrix_d", context__.to_vec(C,C,K));
            X_sim = std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(C, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(C, K));
            vals_r__ = context__.vals_r("X_sim");
            pos__ = 0;
            size_t X_sim_j_2_max__ = K;
            size_t X_sim_j_1_max__ = C;
            size_t X_sim_k_0_max__ = C;
            for (size_t j_2__ = 0; j_2__ < X_sim_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_sim_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < X_sim_k_0_max__; ++k_0__) {
                        X_sim[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                    }
                }
            }
            current_statement_begin__ = 49;
            validate_non_negative_index("cluster_rating_m", "7", 7);
            validate_non_negative_index("cluster_rating_m", "C", C);
            context__.validate_dims("data initialization", "cluster_rating_m", "vector_d", context__.to_vec(C,7));
            cluster_rating_m = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(C, Eigen::Matrix<double, Eigen::Dynamic, 1>(7));
            vals_r__ = context__.vals_r("cluster_rating_m");
            pos__ = 0;
            size_t cluster_rating_m_j_1_max__ = 7;
            size_t cluster_rating_m_k_0_max__ = C;
            for (size_t j_1__ = 0; j_1__ < cluster_rating_m_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < cluster_rating_m_k_0_max__; ++k_0__) {
                    cluster_rating_m[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 50;
            context__.validate_dims("data initialization", "max_tNo_prd", "int", context__.to_vec());
            max_tNo_prd = int(0);
            vals_i__ = context__.vals_i("max_tNo_prd");
            pos__ = 0;
            max_tNo_prd = vals_i__[pos__++];
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 55;
            validate_non_negative_index("deltaM", "logical_eq(deltaM_value, 8)", logical_eq(deltaM_value, 8));
            num_params_r__ += (1 * logical_eq(deltaM_value, 8));
            current_statement_begin__ = 56;
            validate_non_negative_index("alpha_raw", "(C - 1)", (C - 1));
            num_params_r__ += (C - 1);
            current_statement_begin__ = 57;
            validate_non_negative_index("beta_raw", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 59;
            validate_non_negative_index("deltaD", "logical_eq(deltaD_value, 8)", logical_eq(deltaD_value, 8));
            num_params_r__ += (1 * logical_eq(deltaD_value, 8));
            current_statement_begin__ = 60;
            num_params_r__ += 1;
            current_statement_begin__ = 61;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_mmdm_threshold() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 55;
        if (!(context__.contains_r("deltaM")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable deltaM missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("deltaM");
        pos__ = 0U;
        validate_non_negative_index("deltaM", "logical_eq(deltaM_value, 8)", logical_eq(deltaM_value, 8));
        context__.validate_dims("parameter initialization", "deltaM", "double", context__.to_vec(logical_eq(deltaM_value, 8)));
        std::vector<double> deltaM(logical_eq(deltaM_value, 8), double(0));
        size_t deltaM_k_0_max__ = logical_eq(deltaM_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaM_k_0_max__; ++k_0__) {
            deltaM[k_0__] = vals_r__[pos__++];
        }
        size_t deltaM_i_0_max__ = logical_eq(deltaM_value, 8);
        for (size_t i_0__ = 0; i_0__ < deltaM_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, deltaM[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable deltaM: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 56;
        if (!(context__.contains_r("alpha_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_raw");
        pos__ = 0U;
        validate_non_negative_index("alpha_raw", "(C - 1)", (C - 1));
        context__.validate_dims("parameter initialization", "alpha_raw", "vector_d", context__.to_vec((C - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_raw((C - 1));
        size_t alpha_raw_j_1_max__ = (C - 1);
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            alpha_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(alpha_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 57;
        if (!(context__.contains_r("beta_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_raw");
        pos__ = 0U;
        validate_non_negative_index("beta_raw", "K", K);
        context__.validate_dims("parameter initialization", "beta_raw", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_raw(K);
        size_t beta_raw_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            beta_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 59;
        if (!(context__.contains_r("deltaD")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable deltaD missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("deltaD");
        pos__ = 0U;
        validate_non_negative_index("deltaD", "logical_eq(deltaD_value, 8)", logical_eq(deltaD_value, 8));
        context__.validate_dims("parameter initialization", "deltaD", "double", context__.to_vec(logical_eq(deltaD_value, 8)));
        std::vector<double> deltaD(logical_eq(deltaD_value, 8), double(0));
        size_t deltaD_k_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaD_k_0_max__; ++k_0__) {
            deltaD[k_0__] = vals_r__[pos__++];
        }
        size_t deltaD_i_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t i_0__ = 0; i_0__ < deltaD_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, deltaD[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable deltaD: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 60;
        if (!(context__.contains_r("threshold_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable threshold_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("threshold_raw");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "threshold_raw", "double", context__.to_vec());
        double threshold_raw(0);
        threshold_raw = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, threshold_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable threshold_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 61;
        if (!(context__.contains_r("sigma_mult")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_mult missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_mult");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_mult", "double", context__.to_vec());
        double sigma_mult(0);
        sigma_mult = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_mult);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_mult: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 55;
            std::vector<local_scalar_t__> deltaM;
            size_t deltaM_d_0_max__ = logical_eq(deltaM_value, 8);
            deltaM.reserve(deltaM_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < deltaM_d_0_max__; ++d_0__) {
                if (jacobian__)
                    deltaM.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    deltaM.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 56;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_raw;
            (void) alpha_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_raw = in__.vector_constrain((C - 1), lp__);
            else
                alpha_raw = in__.vector_constrain((C - 1));
            current_statement_begin__ = 57;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_raw;
            (void) beta_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_raw = in__.vector_constrain(K, lp__);
            else
                beta_raw = in__.vector_constrain(K);
            current_statement_begin__ = 59;
            std::vector<local_scalar_t__> deltaD;
            size_t deltaD_d_0_max__ = logical_eq(deltaD_value, 8);
            deltaD.reserve(deltaD_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < deltaD_d_0_max__; ++d_0__) {
                if (jacobian__)
                    deltaD.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    deltaD.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 60;
            local_scalar_t__ threshold_raw;
            (void) threshold_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                threshold_raw = in__.scalar_lb_constrain(0, lp__);
            else
                threshold_raw = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 61;
            local_scalar_t__ sigma_mult;
            (void) sigma_mult;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_mult = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_mult = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 66;
            validate_non_negative_index("alpha", "C", C);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha(C);
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            current_statement_begin__ = 67;
            validate_non_negative_index("beta", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta(K);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 68;
            validate_non_negative_index("theta", "C", C);
            validate_non_negative_index("theta", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> theta(C, N);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            current_statement_begin__ = 69;
            validate_non_negative_index("X_acc", "C", C);
            validate_non_negative_index("X_acc", "(K * logical_eq(deltaM_value, 8))", (K * logical_eq(deltaM_value, 8)));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> X_acc(C, (K * logical_eq(deltaM_value, 8)));
            stan::math::initialize(X_acc, DUMMY_VAR__);
            stan::math::fill(X_acc, DUMMY_VAR__);
            current_statement_begin__ = 71;
            validate_non_negative_index("p_n", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_n(N);
            stan::math::initialize(p_n, DUMMY_VAR__);
            stan::math::fill(p_n, DUMMY_VAR__);
            current_statement_begin__ = 72;
            validate_non_negative_index("p_y", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_y(N);
            stan::math::initialize(p_y, DUMMY_VAR__);
            stan::math::fill(p_y, DUMMY_VAR__);
            current_statement_begin__ = 73;
            local_scalar_t__ threshold;
            (void) threshold;  // dummy to suppress unused var warning
            stan::math::initialize(threshold, DUMMY_VAR__);
            stan::math::fill(threshold, DUMMY_VAR__);
            current_statement_begin__ = 74;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 77;
            stan::model::assign(alpha, 
                        stan::model::cons_list(stan::model::index_min_max(1, (C - 1)), stan::model::nil_index_list()), 
                        multiply(alpha_raw, 2), 
                        "assigning variable alpha");
            current_statement_begin__ = 78;
            stan::model::assign(alpha, 
                        stan::model::cons_list(stan::model::index_uni(C), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable alpha");
            current_statement_begin__ = 79;
            stan::math::assign(beta, multiply(beta_raw, 5));
            current_statement_begin__ = 80;
            if (as_bool((primitive_value(logical_gt(K, 0)) && primitive_value(logical_eq(deltaM_value, 8))))) {
                current_statement_begin__ = 81;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 82;
                    if (as_bool(logical_eq(get_base1(tNo, n, "tNo", 1), 1))) {
                        current_statement_begin__ = 83;
                        stan::math::assign(X_acc, to_matrix(rep_array(0, C, K)));
                    } else {
                        current_statement_begin__ = 85;
                        stan::math::assign(X_acc, multiply(X_acc, get_base1(deltaM, 1, "deltaM", 1)));
                    }
                    current_statement_begin__ = 87;
                    stan::math::assign(X_acc, add(X_acc, get_base1(X, n, "X", 1)));
                    current_statement_begin__ = 88;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                multiply(X_acc, beta), 
                                "assigning variable theta");
                }
                current_statement_begin__ = 90;
                stan::math::assign(theta, add(theta, rep_matrix(alpha, N)));
            } else if (as_bool(logical_gt(K, 0))) {
                current_statement_begin__ = 92;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 93;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                multiply(get_base1(X, n, "X", 1), beta), 
                                "assigning variable theta");
                }
                current_statement_begin__ = 95;
                stan::math::assign(theta, add(theta, rep_matrix(alpha, N)));
            } else {
                current_statement_begin__ = 97;
                stan::math::assign(theta, rep_matrix(alpha, N));
            }
            current_statement_begin__ = 100;
            if (as_bool(logical_eq(condition_value, 1))) {
                current_statement_begin__ = 101;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 102;
                    if (as_bool(logical_eq(get_base1(tNo, n, "tNo", 1), 1))) {
                        current_statement_begin__ = 103;
                        if (as_bool(logical_lt(get_base1(cID, n, "cID", 1), MC))) {
                            current_statement_begin__ = 104;
                            stan::model::assign(theta, 
                                        stan::model::cons_list(stan::model::index_min_max((MC + 1), C), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                        add(stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_min_max((MC + 1), C), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "theta"), to_vector(rep_array(-(999999), (MC - 1)))), 
                                        "assigning variable theta");
                        } else if (as_bool(logical_gt(get_base1(cID, n, "cID", 1), MC))) {
                            current_statement_begin__ = 106;
                            stan::model::assign(theta, 
                                        stan::model::cons_list(stan::model::index_min_max(1, (MC - 1)), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                        add(stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_min_max(1, (MC - 1)), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "theta"), to_vector(rep_array(-(999999), (MC - 1)))), 
                                        "assigning variable theta");
                        }
                    }
                }
            }
            current_statement_begin__ = 113;
            stan::math::assign(threshold, (35 * threshold_raw));
            current_statement_begin__ = 114;
            stan::math::assign(sigma, (sigma_mult * threshold));
            {
            current_statement_begin__ = 116;
            local_scalar_t__ utility_n(DUMMY_VAR__);
            (void) utility_n;  // dummy to suppress unused var warning
            stan::math::initialize(utility_n, DUMMY_VAR__);
            stan::math::fill(utility_n, DUMMY_VAR__);
            current_statement_begin__ = 117;
            local_scalar_t__ utility_y(DUMMY_VAR__);
            (void) utility_y;  // dummy to suppress unused var warning
            stan::math::initialize(utility_y, DUMMY_VAR__);
            stan::math::fill(utility_y, DUMMY_VAR__);
            current_statement_begin__ = 118;
            if (as_bool(logical_eq(deltaD_value, 8))) {
                current_statement_begin__ = 119;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 120;
                    if (as_bool(logical_eq(get_base1(tNo, n, "tNo", 1), 1))) {
                        current_statement_begin__ = 121;
                        stan::math::assign(utility_n, get_base1(rating_n, n, "rating_n", 1));
                        current_statement_begin__ = 122;
                        stan::math::assign(utility_y, get_base1(rating_y, n, "rating_y", 1));
                    } else {
                        current_statement_begin__ = 124;
                        stan::math::assign(utility_n, (utility_n * get_base1(deltaD, 1, "deltaD", 1)));
                        current_statement_begin__ = 125;
                        stan::math::assign(utility_n, (utility_n + get_base1(rating_n, n, "rating_n", 1)));
                        current_statement_begin__ = 126;
                        stan::math::assign(utility_y, (utility_y * get_base1(deltaD, 1, "deltaD", 1)));
                        current_statement_begin__ = 127;
                        stan::math::assign(utility_y, (utility_y + get_base1(rating_y, n, "rating_y", 1)));
                    }
                    current_statement_begin__ = 129;
                    stan::model::assign(p_n, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (1 - normal_cdf(utility_n, -(threshold), sigma)), 
                                "assigning variable p_n");
                    current_statement_begin__ = 130;
                    stan::model::assign(p_y, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                normal_cdf(utility_y, threshold, sigma), 
                                "assigning variable p_y");
                }
            } else {
                current_statement_begin__ = 133;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 134;
                    stan::model::assign(p_n, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (1 - normal_cdf(get_base1(rating_n, n, "rating_n", 1), -(threshold), sigma)), 
                                "assigning variable p_n");
                    current_statement_begin__ = 135;
                    stan::model::assign(p_y, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                normal_cdf(get_base1(rating_y, n, "rating_y", 1), threshold, sigma), 
                                "assigning variable p_y");
                }
            }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 66;
            size_t alpha_j_1_max__ = C;
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(alpha(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: alpha" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable alpha: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 67;
            size_t beta_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(beta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 68;
            size_t theta_j_1_max__ = C;
            size_t theta_j_2_max__ = N;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(theta(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: theta" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 69;
            size_t X_acc_j_1_max__ = C;
            size_t X_acc_j_2_max__ = (K * logical_eq(deltaM_value, 8));
            for (size_t j_1__ = 0; j_1__ < X_acc_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < X_acc_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(X_acc(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: X_acc" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable X_acc: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 71;
            size_t p_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_n_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_n(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_n" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_n: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 72;
            size_t p_y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_y_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_y(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_y" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_y: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 73;
            if (stan::math::is_uninitialized(threshold)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: threshold";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable threshold: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 74;
            if (stan::math::is_uninitialized(sigma)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sigma";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            // model body
            {
            current_statement_begin__ = 142;
            validate_non_negative_index("decision_p", "N", N);
            validate_non_negative_index("decision_p", "3", 3);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > decision_p(3, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(N));
            stan::math::initialize(decision_p, DUMMY_VAR__);
            stan::math::fill(decision_p, DUMMY_VAR__);
            current_statement_begin__ = 144;
            if (as_bool(logical_eq(deltaM_value, 8))) {
                current_statement_begin__ = 145;
                lp_accum__.add(uniform_log<propto__>(get_base1(deltaM, 1, "deltaM", 1), 0, 1));
            }
            current_statement_begin__ = 147;
            lp_accum__.add(normal_log<propto__>(alpha_raw, 0, 1));
            current_statement_begin__ = 148;
            lp_accum__.add(normal_log<propto__>(beta_raw, 0, 5));
            current_statement_begin__ = 149;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 150;
                lp_accum__.add(categorical_logit_log<propto__>(get_base1(cID, n, "cID", 1), stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "theta")));
            }
            current_statement_begin__ = 153;
            if (as_bool(logical_eq(deltaD_value, 8))) {
                current_statement_begin__ = 154;
                lp_accum__.add(uniform_log<propto__>(get_base1(deltaD, 1, "deltaD", 1), 0, 1));
            }
            current_statement_begin__ = 156;
            lp_accum__.add(normal_log<propto__>(threshold_raw, 0, 1));
            if (threshold_raw < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_ccdf_log(0, 0, 1));
            current_statement_begin__ = 157;
            lp_accum__.add(normal_log<propto__>(sigma_mult, 0, 0.5));
            if (sigma_mult < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_ccdf_log(0, 0, 0.5));
            current_statement_begin__ = 158;
            stan::math::assign(decision_p, decision_l(N, ar_value, p_n, p_y, pstream__));
            current_statement_begin__ = 159;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 161;
                lp_accum__.add(stan::math::log(get_base1(get_base1(decision_p, (get_base1(terminate, n, "terminate", 1) + 2), "decision_p", 1), n, "decision_p", 2)));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("deltaM");
        names__.push_back("alpha_raw");
        names__.push_back("beta_raw");
        names__.push_back("deltaD");
        names__.push_back("threshold_raw");
        names__.push_back("sigma_mult");
        names__.push_back("alpha");
        names__.push_back("beta");
        names__.push_back("theta");
        names__.push_back("X_acc");
        names__.push_back("p_n");
        names__.push_back("p_y");
        names__.push_back("threshold");
        names__.push_back("sigma");
        names__.push_back("log_lik_m");
        names__.push_back("dev_m");
        names__.push_back("log_lik_d");
        names__.push_back("decision_p");
        names__.push_back("decision_no");
        names__.push_back("decision_0");
        names__.push_back("decision_yes");
        names__.push_back("dev_d");
        names__.push_back("cID_prd");
        names__.push_back("decision_prd");
        names__.push_back("terminate_prd");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(logical_eq(deltaM_value, 8));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((C - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(logical_eq(deltaD_value, 8));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(C);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(C);
        dims__.push_back((K * logical_eq(deltaM_value, 8)));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(max_tNo_prd);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_mmdm_threshold_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> deltaM;
        size_t deltaM_d_0_max__ = logical_eq(deltaM_value, 8);
        deltaM.reserve(deltaM_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < deltaM_d_0_max__; ++d_0__) {
            deltaM.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t deltaM_k_0_max__ = logical_eq(deltaM_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaM_k_0_max__; ++k_0__) {
            vars__.push_back(deltaM[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_raw = in__.vector_constrain((C - 1));
        size_t alpha_raw_j_1_max__ = (C - 1);
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            vars__.push_back(alpha_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_raw = in__.vector_constrain(K);
        size_t beta_raw_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            vars__.push_back(beta_raw(j_1__));
        }
        std::vector<double> deltaD;
        size_t deltaD_d_0_max__ = logical_eq(deltaD_value, 8);
        deltaD.reserve(deltaD_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < deltaD_d_0_max__; ++d_0__) {
            deltaD.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t deltaD_k_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaD_k_0_max__; ++k_0__) {
            vars__.push_back(deltaD[k_0__]);
        }
        double threshold_raw = in__.scalar_lb_constrain(0);
        vars__.push_back(threshold_raw);
        double sigma_mult = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_mult);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 66;
            validate_non_negative_index("alpha", "C", C);
            Eigen::Matrix<double, Eigen::Dynamic, 1> alpha(C);
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            current_statement_begin__ = 67;
            validate_non_negative_index("beta", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> beta(K);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 68;
            validate_non_negative_index("theta", "C", C);
            validate_non_negative_index("theta", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> theta(C, N);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            current_statement_begin__ = 69;
            validate_non_negative_index("X_acc", "C", C);
            validate_non_negative_index("X_acc", "(K * logical_eq(deltaM_value, 8))", (K * logical_eq(deltaM_value, 8)));
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> X_acc(C, (K * logical_eq(deltaM_value, 8)));
            stan::math::initialize(X_acc, DUMMY_VAR__);
            stan::math::fill(X_acc, DUMMY_VAR__);
            current_statement_begin__ = 71;
            validate_non_negative_index("p_n", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_n(N);
            stan::math::initialize(p_n, DUMMY_VAR__);
            stan::math::fill(p_n, DUMMY_VAR__);
            current_statement_begin__ = 72;
            validate_non_negative_index("p_y", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_y(N);
            stan::math::initialize(p_y, DUMMY_VAR__);
            stan::math::fill(p_y, DUMMY_VAR__);
            current_statement_begin__ = 73;
            double threshold;
            (void) threshold;  // dummy to suppress unused var warning
            stan::math::initialize(threshold, DUMMY_VAR__);
            stan::math::fill(threshold, DUMMY_VAR__);
            current_statement_begin__ = 74;
            double sigma;
            (void) sigma;  // dummy to suppress unused var warning
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 77;
            stan::model::assign(alpha, 
                        stan::model::cons_list(stan::model::index_min_max(1, (C - 1)), stan::model::nil_index_list()), 
                        multiply(alpha_raw, 2), 
                        "assigning variable alpha");
            current_statement_begin__ = 78;
            stan::model::assign(alpha, 
                        stan::model::cons_list(stan::model::index_uni(C), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable alpha");
            current_statement_begin__ = 79;
            stan::math::assign(beta, multiply(beta_raw, 5));
            current_statement_begin__ = 80;
            if (as_bool((primitive_value(logical_gt(K, 0)) && primitive_value(logical_eq(deltaM_value, 8))))) {
                current_statement_begin__ = 81;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 82;
                    if (as_bool(logical_eq(get_base1(tNo, n, "tNo", 1), 1))) {
                        current_statement_begin__ = 83;
                        stan::math::assign(X_acc, to_matrix(rep_array(0, C, K)));
                    } else {
                        current_statement_begin__ = 85;
                        stan::math::assign(X_acc, multiply(X_acc, get_base1(deltaM, 1, "deltaM", 1)));
                    }
                    current_statement_begin__ = 87;
                    stan::math::assign(X_acc, add(X_acc, get_base1(X, n, "X", 1)));
                    current_statement_begin__ = 88;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                multiply(X_acc, beta), 
                                "assigning variable theta");
                }
                current_statement_begin__ = 90;
                stan::math::assign(theta, add(theta, rep_matrix(alpha, N)));
            } else if (as_bool(logical_gt(K, 0))) {
                current_statement_begin__ = 92;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 93;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                multiply(get_base1(X, n, "X", 1), beta), 
                                "assigning variable theta");
                }
                current_statement_begin__ = 95;
                stan::math::assign(theta, add(theta, rep_matrix(alpha, N)));
            } else {
                current_statement_begin__ = 97;
                stan::math::assign(theta, rep_matrix(alpha, N));
            }
            current_statement_begin__ = 100;
            if (as_bool(logical_eq(condition_value, 1))) {
                current_statement_begin__ = 101;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 102;
                    if (as_bool(logical_eq(get_base1(tNo, n, "tNo", 1), 1))) {
                        current_statement_begin__ = 103;
                        if (as_bool(logical_lt(get_base1(cID, n, "cID", 1), MC))) {
                            current_statement_begin__ = 104;
                            stan::model::assign(theta, 
                                        stan::model::cons_list(stan::model::index_min_max((MC + 1), C), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                        add(stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_min_max((MC + 1), C), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "theta"), to_vector(rep_array(-(999999), (MC - 1)))), 
                                        "assigning variable theta");
                        } else if (as_bool(logical_gt(get_base1(cID, n, "cID", 1), MC))) {
                            current_statement_begin__ = 106;
                            stan::model::assign(theta, 
                                        stan::model::cons_list(stan::model::index_min_max(1, (MC - 1)), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                        add(stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_min_max(1, (MC - 1)), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "theta"), to_vector(rep_array(-(999999), (MC - 1)))), 
                                        "assigning variable theta");
                        }
                    }
                }
            }
            current_statement_begin__ = 113;
            stan::math::assign(threshold, (35 * threshold_raw));
            current_statement_begin__ = 114;
            stan::math::assign(sigma, (sigma_mult * threshold));
            {
            current_statement_begin__ = 116;
            local_scalar_t__ utility_n(DUMMY_VAR__);
            (void) utility_n;  // dummy to suppress unused var warning
            stan::math::initialize(utility_n, DUMMY_VAR__);
            stan::math::fill(utility_n, DUMMY_VAR__);
            current_statement_begin__ = 117;
            local_scalar_t__ utility_y(DUMMY_VAR__);
            (void) utility_y;  // dummy to suppress unused var warning
            stan::math::initialize(utility_y, DUMMY_VAR__);
            stan::math::fill(utility_y, DUMMY_VAR__);
            current_statement_begin__ = 118;
            if (as_bool(logical_eq(deltaD_value, 8))) {
                current_statement_begin__ = 119;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 120;
                    if (as_bool(logical_eq(get_base1(tNo, n, "tNo", 1), 1))) {
                        current_statement_begin__ = 121;
                        stan::math::assign(utility_n, get_base1(rating_n, n, "rating_n", 1));
                        current_statement_begin__ = 122;
                        stan::math::assign(utility_y, get_base1(rating_y, n, "rating_y", 1));
                    } else {
                        current_statement_begin__ = 124;
                        stan::math::assign(utility_n, (utility_n * get_base1(deltaD, 1, "deltaD", 1)));
                        current_statement_begin__ = 125;
                        stan::math::assign(utility_n, (utility_n + get_base1(rating_n, n, "rating_n", 1)));
                        current_statement_begin__ = 126;
                        stan::math::assign(utility_y, (utility_y * get_base1(deltaD, 1, "deltaD", 1)));
                        current_statement_begin__ = 127;
                        stan::math::assign(utility_y, (utility_y + get_base1(rating_y, n, "rating_y", 1)));
                    }
                    current_statement_begin__ = 129;
                    stan::model::assign(p_n, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (1 - normal_cdf(utility_n, -(threshold), sigma)), 
                                "assigning variable p_n");
                    current_statement_begin__ = 130;
                    stan::model::assign(p_y, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                normal_cdf(utility_y, threshold, sigma), 
                                "assigning variable p_y");
                }
            } else {
                current_statement_begin__ = 133;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 134;
                    stan::model::assign(p_n, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (1 - normal_cdf(get_base1(rating_n, n, "rating_n", 1), -(threshold), sigma)), 
                                "assigning variable p_n");
                    current_statement_begin__ = 135;
                    stan::model::assign(p_y, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                normal_cdf(get_base1(rating_y, n, "rating_y", 1), threshold, sigma), 
                                "assigning variable p_y");
                }
            }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t alpha_j_1_max__ = C;
                for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                    vars__.push_back(alpha(j_1__));
                }
                size_t beta_j_1_max__ = K;
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    vars__.push_back(beta(j_1__));
                }
                size_t theta_j_2_max__ = N;
                size_t theta_j_1_max__ = C;
                for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                        vars__.push_back(theta(j_1__, j_2__));
                    }
                }
                size_t X_acc_j_2_max__ = (K * logical_eq(deltaM_value, 8));
                size_t X_acc_j_1_max__ = C;
                for (size_t j_2__ = 0; j_2__ < X_acc_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < X_acc_j_1_max__; ++j_1__) {
                        vars__.push_back(X_acc(j_1__, j_2__));
                    }
                }
                size_t p_n_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < p_n_j_1_max__; ++j_1__) {
                    vars__.push_back(p_n(j_1__));
                }
                size_t p_y_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < p_y_j_1_max__; ++j_1__) {
                    vars__.push_back(p_y(j_1__));
                }
                vars__.push_back(threshold);
                vars__.push_back(sigma);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 167;
            validate_non_negative_index("log_lik_m", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik_m(N);
            stan::math::initialize(log_lik_m, DUMMY_VAR__);
            stan::math::fill(log_lik_m, DUMMY_VAR__);
            current_statement_begin__ = 168;
            double dev_m;
            (void) dev_m;  // dummy to suppress unused var warning
            stan::math::initialize(dev_m, DUMMY_VAR__);
            stan::math::fill(dev_m, DUMMY_VAR__);
            current_statement_begin__ = 170;
            validate_non_negative_index("log_lik_d", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik_d(N);
            stan::math::initialize(log_lik_d, DUMMY_VAR__);
            stan::math::fill(log_lik_d, DUMMY_VAR__);
            current_statement_begin__ = 171;
            validate_non_negative_index("decision_p", "N", N);
            validate_non_negative_index("decision_p", "3", 3);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > decision_p(3, Eigen::Matrix<double, Eigen::Dynamic, 1>(N));
            stan::math::initialize(decision_p, DUMMY_VAR__);
            stan::math::fill(decision_p, DUMMY_VAR__);
            current_statement_begin__ = 172;
            validate_non_negative_index("decision_no", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> decision_no(N);
            stan::math::initialize(decision_no, DUMMY_VAR__);
            stan::math::fill(decision_no, DUMMY_VAR__);
            current_statement_begin__ = 173;
            validate_non_negative_index("decision_0", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> decision_0(N);
            stan::math::initialize(decision_0, DUMMY_VAR__);
            stan::math::fill(decision_0, DUMMY_VAR__);
            current_statement_begin__ = 174;
            validate_non_negative_index("decision_yes", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> decision_yes(N);
            stan::math::initialize(decision_yes, DUMMY_VAR__);
            stan::math::fill(decision_yes, DUMMY_VAR__);
            current_statement_begin__ = 175;
            double dev_d;
            (void) dev_d;  // dummy to suppress unused var warning
            stan::math::initialize(dev_d, DUMMY_VAR__);
            stan::math::fill(dev_d, DUMMY_VAR__);
            current_statement_begin__ = 177;
            validate_non_negative_index("cID_prd", "max_tNo_prd", max_tNo_prd);
            std::vector<int> cID_prd(max_tNo_prd, int(0));
            stan::math::fill(cID_prd, std::numeric_limits<int>::min());
            current_statement_begin__ = 178;
            int decision_prd;
            (void) decision_prd;  // dummy to suppress unused var warning
            stan::math::fill(decision_prd, std::numeric_limits<int>::min());
            current_statement_begin__ = 179;
            int terminate_prd;
            (void) terminate_prd;  // dummy to suppress unused var warning
            stan::math::fill(terminate_prd, std::numeric_limits<int>::min());
            // generated quantities statements
            current_statement_begin__ = 182;
            stan::math::assign(dev_m, 0);
            current_statement_begin__ = 183;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 184;
                stan::model::assign(log_lik_m, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            categorical_logit_log(get_base1(cID, n, "cID", 1), stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "theta")), 
                            "assigning variable log_lik_m");
                current_statement_begin__ = 185;
                stan::math::assign(dev_m, (dev_m + (-(2) * get_base1(log_lik_m, n, "log_lik_m", 1))));
            }
            current_statement_begin__ = 188;
            stan::math::assign(dev_d, 0);
            current_statement_begin__ = 189;
            stan::math::assign(decision_p, decision_l(N, ar_value, p_n, p_y, pstream__));
            current_statement_begin__ = 190;
            stan::math::assign(decision_no, get_base1(decision_p, 1, "decision_p", 1));
            current_statement_begin__ = 191;
            stan::math::assign(decision_0, get_base1(decision_p, 2, "decision_p", 1));
            current_statement_begin__ = 192;
            stan::math::assign(decision_yes, get_base1(decision_p, 3, "decision_p", 1));
            current_statement_begin__ = 193;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 194;
                stan::model::assign(log_lik_d, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            stan::math::log(get_base1(get_base1(decision_p, (get_base1(terminate, n, "terminate", 1) + 2), "decision_p", 1), n, "decision_p", 2)), 
                            "assigning variable log_lik_d");
                current_statement_begin__ = 195;
                stan::math::assign(dev_d, (dev_d + (-(2) * get_base1(log_lik_d, n, "log_lik_d", 1))));
            }
            current_statement_begin__ = 198;
            stan::math::assign(cID_prd, rep_array(99, max_tNo_prd));
            {
            current_statement_begin__ = 200;
            validate_non_negative_index("X_acc_prd", "C", C);
            validate_non_negative_index("X_acc_prd", "(K * logical_eq(deltaM_value, 8))", (K * logical_eq(deltaM_value, 8)));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> X_acc_prd(C, (K * logical_eq(deltaM_value, 8)));
            stan::math::initialize(X_acc_prd, DUMMY_VAR__);
            stan::math::fill(X_acc_prd, DUMMY_VAR__);
            current_statement_begin__ = 201;
            validate_non_negative_index("theta_prd", "C", C);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta_prd(C);
            stan::math::initialize(theta_prd, DUMMY_VAR__);
            stan::math::fill(theta_prd, DUMMY_VAR__);
            current_statement_begin__ = 202;
            int rating_prd(0);
            (void) rating_prd;  // dummy to suppress unused var warning
            stan::math::fill(rating_prd, std::numeric_limits<int>::min());
            current_statement_begin__ = 203;
            int rating_n_prd(0);
            (void) rating_n_prd;  // dummy to suppress unused var warning
            stan::math::fill(rating_n_prd, std::numeric_limits<int>::min());
            current_statement_begin__ = 204;
            int rating_y_prd(0);
            (void) rating_y_prd;  // dummy to suppress unused var warning
            stan::math::fill(rating_y_prd, std::numeric_limits<int>::min());
            current_statement_begin__ = 205;
            local_scalar_t__ utility_n_prd(DUMMY_VAR__);
            (void) utility_n_prd;  // dummy to suppress unused var warning
            stan::math::initialize(utility_n_prd, DUMMY_VAR__);
            stan::math::fill(utility_n_prd, DUMMY_VAR__);
            current_statement_begin__ = 206;
            local_scalar_t__ utility_y_prd(DUMMY_VAR__);
            (void) utility_y_prd;  // dummy to suppress unused var warning
            stan::math::initialize(utility_y_prd, DUMMY_VAR__);
            stan::math::fill(utility_y_prd, DUMMY_VAR__);
            current_statement_begin__ = 207;
            local_scalar_t__ p_n_prd(DUMMY_VAR__);
            (void) p_n_prd;  // dummy to suppress unused var warning
            stan::math::initialize(p_n_prd, DUMMY_VAR__);
            stan::math::fill(p_n_prd, DUMMY_VAR__);
            current_statement_begin__ = 208;
            local_scalar_t__ p_y_prd(DUMMY_VAR__);
            (void) p_y_prd;  // dummy to suppress unused var warning
            stan::math::initialize(p_y_prd, DUMMY_VAR__);
            stan::math::fill(p_y_prd, DUMMY_VAR__);
            current_statement_begin__ = 209;
            validate_non_negative_index("decision_p_prd", "1", 1);
            validate_non_negative_index("decision_p_prd", "3", 3);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > decision_p_prd(3, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(1));
            stan::math::initialize(decision_p_prd, DUMMY_VAR__);
            stan::math::fill(decision_p_prd, DUMMY_VAR__);
            current_statement_begin__ = 210;
            validate_non_negative_index("decision_p_prd1", "3", 3);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> decision_p_prd1(3);
            stan::math::initialize(decision_p_prd1, DUMMY_VAR__);
            stan::math::fill(decision_p_prd1, DUMMY_VAR__);
            current_statement_begin__ = 211;
            int tNo_prd(0);
            (void) tNo_prd;  // dummy to suppress unused var warning
            stan::math::fill(tNo_prd, std::numeric_limits<int>::min());
            current_statement_begin__ = 213;
            stan::math::assign(tNo_prd, 1);
            current_statement_begin__ = 214;
            stan::math::assign(terminate_prd, 0);
            current_statement_begin__ = 215;
            while (as_bool((primitive_value(logical_eq(terminate_prd, 0)) && primitive_value(logical_lt(tNo_prd, (max_tNo_prd + 1)))))) {
                current_statement_begin__ = 216;
                if (as_bool((primitive_value(logical_gt(K, 0)) && primitive_value(logical_eq(deltaM_value, 8))))) {
                    current_statement_begin__ = 217;
                    if (as_bool(logical_eq(tNo_prd, 1))) {
                        current_statement_begin__ = 218;
                        stan::math::assign(X_acc_prd, to_matrix(rep_array(0, C, K)));
                    } else {
                        current_statement_begin__ = 220;
                        stan::math::assign(X_acc_prd, multiply(X_acc_prd, get_base1(deltaM, 1, "deltaM", 1)));
                        current_statement_begin__ = 221;
                        stan::math::assign(X_acc_prd, add(X_acc_prd, get_base1(X_sim, get_base1(cID_prd, (tNo_prd - 1), "cID_prd", 1), "X_sim", 1)));
                    }
                    current_statement_begin__ = 223;
                    stan::math::assign(theta_prd, multiply(X_acc_prd, beta));
                    current_statement_begin__ = 224;
                    stan::math::assign(theta_prd, add(theta_prd, alpha));
                } else if (as_bool((primitive_value(logical_gt(K, 0)) && primitive_value(logical_eq(deltaM_value, 0))))) {
                    current_statement_begin__ = 226;
                    if (as_bool(logical_eq(tNo_prd, 1))) {
                        current_statement_begin__ = 227;
                        stan::math::assign(X_acc_prd, to_matrix(rep_array(0, C, K)));
                    } else {
                        current_statement_begin__ = 229;
                        stan::math::assign(X_acc_prd, get_base1(X_sim, get_base1(cID_prd, (tNo_prd - 1), "cID_prd", 1), "X_sim", 1));
                    }
                    current_statement_begin__ = 231;
                    stan::math::assign(theta_prd, multiply(X_acc_prd, beta));
                    current_statement_begin__ = 232;
                    stan::math::assign(theta_prd, add(theta_prd, alpha));
                } else if (as_bool((primitive_value(logical_gt(K, 0)) && primitive_value(logical_eq(deltaM_value, 1))))) {
                    current_statement_begin__ = 234;
                    if (as_bool(logical_eq(tNo_prd, 1))) {
                        current_statement_begin__ = 235;
                        stan::math::assign(X_acc_prd, to_matrix(rep_array(0, C, K)));
                    } else {
                        current_statement_begin__ = 237;
                        stan::math::assign(X_acc_prd, add(X_acc_prd, get_base1(X_sim, get_base1(cID_prd, (tNo_prd - 1), "cID_prd", 1), "X_sim", 1)));
                    }
                    current_statement_begin__ = 239;
                    stan::math::assign(theta_prd, multiply(X_acc_prd, beta));
                    current_statement_begin__ = 240;
                    stan::math::assign(theta_prd, add(theta_prd, alpha));
                } else {
                    current_statement_begin__ = 242;
                    stan::math::assign(theta_prd, alpha);
                }
                current_statement_begin__ = 245;
                stan::model::assign(cID_prd, 
                            stan::model::cons_list(stan::model::index_uni(tNo_prd), stan::model::nil_index_list()), 
                            categorical_logit_rng(theta_prd, base_rng__), 
                            "assigning variable cID_prd");
                current_statement_begin__ = 247;
                stan::math::assign(rating_prd, (categorical_rng(get_base1(cluster_rating_m, get_base1(cID_prd, tNo_prd, "cID_prd", 1), "cluster_rating_m", 1), base_rng__) - 4));
                current_statement_begin__ = 249;
                if (as_bool(logical_eq(binary_value, 1))) {
                    current_statement_begin__ = 249;
                    stan::math::assign(rating_prd, sign(rating_prd, pstream__));
                }
                current_statement_begin__ = 250;
                if (as_bool(logical_eq(ar_value, 0))) {
                    current_statement_begin__ = 251;
                    stan::math::assign(rating_n_prd, std::min(rating_prd, 0));
                    current_statement_begin__ = 252;
                    stan::math::assign(rating_y_prd, std::max(rating_prd, 0));
                } else {
                    current_statement_begin__ = 254;
                    stan::math::assign(rating_n_prd, rating_prd);
                    current_statement_begin__ = 255;
                    stan::math::assign(rating_y_prd, rating_prd);
                }
                current_statement_begin__ = 258;
                if (as_bool(logical_eq(deltaD_value, 8))) {
                    current_statement_begin__ = 259;
                    if (as_bool(logical_eq(tNo_prd, 1))) {
                        current_statement_begin__ = 260;
                        stan::math::assign(utility_n_prd, rating_n_prd);
                        current_statement_begin__ = 261;
                        stan::math::assign(utility_y_prd, rating_y_prd);
                    } else {
                        current_statement_begin__ = 263;
                        stan::math::assign(utility_n_prd, (utility_n_prd * get_base1(deltaD, 1, "deltaD", 1)));
                        current_statement_begin__ = 264;
                        stan::math::assign(utility_n_prd, (utility_n_prd + rating_n_prd));
                        current_statement_begin__ = 265;
                        stan::math::assign(utility_y_prd, (utility_y_prd * get_base1(deltaD, 1, "deltaD", 1)));
                        current_statement_begin__ = 266;
                        stan::math::assign(utility_y_prd, (utility_y_prd + rating_y_prd));
                    }
                } else if (as_bool(logical_eq(deltaD_value, 0))) {
                    current_statement_begin__ = 269;
                    stan::math::assign(utility_n_prd, rating_n_prd);
                    current_statement_begin__ = 270;
                    stan::math::assign(utility_y_prd, rating_y_prd);
                } else if (as_bool(logical_eq(deltaD_value, 1))) {
                    current_statement_begin__ = 272;
                    if (as_bool(logical_eq(tNo_prd, 1))) {
                        current_statement_begin__ = 273;
                        stan::math::assign(utility_n_prd, rating_n_prd);
                        current_statement_begin__ = 274;
                        stan::math::assign(utility_y_prd, rating_y_prd);
                    } else {
                        current_statement_begin__ = 276;
                        stan::math::assign(utility_n_prd, (utility_n_prd + rating_n_prd));
                        current_statement_begin__ = 277;
                        stan::math::assign(utility_y_prd, (utility_y_prd + rating_y_prd));
                    }
                }
                current_statement_begin__ = 280;
                stan::math::assign(p_n_prd, (1 - normal_cdf(utility_n_prd, -(threshold), sigma)));
                current_statement_begin__ = 281;
                stan::math::assign(p_y_prd, normal_cdf(utility_y_prd, threshold, sigma));
                current_statement_begin__ = 282;
                stan::math::assign(decision_p_prd, decision_l(1, ar_value, to_vector(rep_array(p_n_prd, 1)), to_vector(rep_array(p_y_prd, 1)), pstream__));
                current_statement_begin__ = 283;
                for (int i = 1; i <= 3; ++i) {
                    current_statement_begin__ = 283;
                    stan::model::assign(decision_p_prd1, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                get_base1(get_base1(decision_p_prd, i, "decision_p_prd", 1), 1, "decision_p_prd", 2), 
                                "assigning variable decision_p_prd1");
                }
                current_statement_begin__ = 284;
                stan::math::assign(terminate_prd, (categorical_rng(decision_p_prd1, base_rng__) - 2));
            }
            }
            // validate, write generated quantities
            current_statement_begin__ = 167;
            size_t log_lik_m_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < log_lik_m_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik_m(j_1__));
            }
            current_statement_begin__ = 168;
            vars__.push_back(dev_m);
            current_statement_begin__ = 170;
            size_t log_lik_d_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < log_lik_d_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik_d(j_1__));
            }
            current_statement_begin__ = 171;
            size_t decision_p_j_1_max__ = N;
            size_t decision_p_k_0_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < decision_p_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < decision_p_k_0_max__; ++k_0__) {
                    vars__.push_back(decision_p[k_0__](j_1__));
                }
            }
            current_statement_begin__ = 172;
            size_t decision_no_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < decision_no_j_1_max__; ++j_1__) {
                vars__.push_back(decision_no(j_1__));
            }
            current_statement_begin__ = 173;
            size_t decision_0_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < decision_0_j_1_max__; ++j_1__) {
                vars__.push_back(decision_0(j_1__));
            }
            current_statement_begin__ = 174;
            size_t decision_yes_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < decision_yes_j_1_max__; ++j_1__) {
                vars__.push_back(decision_yes(j_1__));
            }
            current_statement_begin__ = 175;
            vars__.push_back(dev_d);
            current_statement_begin__ = 177;
            size_t cID_prd_k_0_max__ = max_tNo_prd;
            for (size_t k_0__ = 0; k_0__ < cID_prd_k_0_max__; ++k_0__) {
                vars__.push_back(cID_prd[k_0__]);
            }
            current_statement_begin__ = 178;
            vars__.push_back(decision_prd);
            current_statement_begin__ = 179;
            vars__.push_back(terminate_prd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_mmdm_threshold";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t deltaM_k_0_max__ = logical_eq(deltaM_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaM_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaM" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_raw_j_1_max__ = (C - 1);
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_raw_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t deltaD_k_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaD_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "threshold_raw";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_mult";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t alpha_j_1_max__ = C;
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_j_2_max__ = N;
            size_t theta_j_1_max__ = C;
            for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t X_acc_j_2_max__ = (K * logical_eq(deltaM_value, 8));
            size_t X_acc_j_1_max__ = C;
            for (size_t j_2__ = 0; j_2__ < X_acc_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_acc_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "X_acc" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t p_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_n_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_n" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_y_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_y" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "threshold";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        size_t log_lik_m_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_m_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik_m" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dev_m";
        param_names__.push_back(param_name_stream__.str());
        size_t log_lik_d_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_d_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik_d" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t decision_p_j_1_max__ = N;
        size_t decision_p_k_0_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < decision_p_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < decision_p_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "decision_p" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t decision_no_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < decision_no_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "decision_no" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t decision_0_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < decision_0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "decision_0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t decision_yes_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < decision_yes_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "decision_yes" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dev_d";
        param_names__.push_back(param_name_stream__.str());
        size_t cID_prd_k_0_max__ = max_tNo_prd;
        for (size_t k_0__ = 0; k_0__ < cID_prd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cID_prd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "decision_prd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "terminate_prd";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t deltaM_k_0_max__ = logical_eq(deltaM_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaM_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaM" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_raw_j_1_max__ = (C - 1);
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_raw_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t deltaD_k_0_max__ = logical_eq(deltaD_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaD_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "threshold_raw";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_mult";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t alpha_j_1_max__ = C;
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_j_2_max__ = N;
            size_t theta_j_1_max__ = C;
            for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t X_acc_j_2_max__ = (K * logical_eq(deltaM_value, 8));
            size_t X_acc_j_1_max__ = C;
            for (size_t j_2__ = 0; j_2__ < X_acc_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_acc_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "X_acc" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t p_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_n_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_n" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_y_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_y" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "threshold";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        size_t log_lik_m_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_m_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik_m" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dev_m";
        param_names__.push_back(param_name_stream__.str());
        size_t log_lik_d_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_d_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik_d" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t decision_p_j_1_max__ = N;
        size_t decision_p_k_0_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < decision_p_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < decision_p_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "decision_p" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t decision_no_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < decision_no_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "decision_no" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t decision_0_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < decision_0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "decision_0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t decision_yes_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < decision_yes_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "decision_yes" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dev_d";
        param_names__.push_back(param_name_stream__.str());
        size_t cID_prd_k_0_max__ = max_tNo_prd;
        for (size_t k_0__ = 0; k_0__ < cID_prd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cID_prd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "decision_prd";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "terminate_prd";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_mmdm_threshold_namespace::model_mmdm_threshold stan_model;
#endif
