// Generated by rstantools.  Do not edit by hand.

/*
    sampinfo is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    sampinfo is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with sampinfo.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_dm_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_dm");
    reader.add_event(142, 140, "end", "model_dm");
    return reader;
}
template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__>::type>::type, Eigen::Dynamic, 1> >
decision_l(const int& N,
               const T1__& ar_value,
               const T2__& random_value,
               const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& terminate,
               const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& p_n,
               const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& p_y,
               const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& p_end, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 10;
        validate_non_negative_index("prob_d", "N", N);
        validate_non_negative_index("prob_d", "3", 3);
        std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > prob_d(3, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(N));
        stan::math::initialize(prob_d, DUMMY_VAR__);
        stan::math::fill(prob_d, DUMMY_VAR__);
        current_statement_begin__ = 12;
        stan::model::assign(prob_d, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    elt_multiply(p_end, add(multiply(ar_value, add(p_n, multiply((random_value * .5), subtract(subtract(1, p_n), p_y)))), multiply((1 - ar_value), add(add(elt_multiply(p_n, subtract(1, p_y)), elt_multiply(multiply(.5, p_y), p_n)), elt_multiply(multiply((random_value * .5), subtract(1, p_n)), subtract(1, p_y)))))), 
                    "assigning variable prob_d");
        current_statement_begin__ = 15;
        stan::model::assign(prob_d, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    add(add(multiply(random_value, subtract(1, p_end)), multiply(((1 - random_value) * ar_value), subtract(subtract(1, p_y), p_n))), elt_multiply(multiply(((1 - random_value) * (1 - ar_value)), subtract(1, p_n)), subtract(1, p_y))), 
                    "assigning variable prob_d");
        current_statement_begin__ = 19;
        stan::model::assign(prob_d, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                    elt_multiply(p_end, add(multiply(ar_value, add(p_y, multiply((random_value * .5), subtract(subtract(1, p_n), p_y)))), multiply((1 - ar_value), add(add(elt_multiply(p_y, subtract(1, p_n)), elt_multiply(multiply(.5, p_y), p_n)), elt_multiply(multiply((random_value * .5), subtract(1, p_n)), subtract(1, p_y)))))), 
                    "assigning variable prob_d");
        current_statement_begin__ = 37;
        return stan::math::promote_scalar<fun_return_scalar_t__>(prob_d);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct decision_l_functor__ {
    template <typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__>
        std::vector<Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__, T3__, T4__, typename boost::math::tools::promote_args<T5__, T6__>::type>::type, Eigen::Dynamic, 1> >
    operator()(const int& N,
               const T1__& ar_value,
               const T2__& random_value,
               const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& terminate,
               const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& p_n,
               const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& p_y,
               const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& p_end, std::ostream* pstream__) const {
        return decision_l(N, ar_value, random_value, terminate, p_n, p_y, p_end, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_dm : public prob_grad {
private:
        double ar_value;
        double random_value;
        int deltaD_value;
        int N;
        std::vector<int> tNo;
        std::vector<int> rating;
        std::vector<int> terminate;
        std::vector<int> rating_y;
        std::vector<int> rating_n;
public:
    model_dm(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_dm(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_dm_namespace::model_dm";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 44;
            context__.validate_dims("data initialization", "ar_value", "double", context__.to_vec());
            ar_value = double(0);
            vals_r__ = context__.vals_r("ar_value");
            pos__ = 0;
            ar_value = vals_r__[pos__++];
            current_statement_begin__ = 45;
            context__.validate_dims("data initialization", "random_value", "double", context__.to_vec());
            random_value = double(0);
            vals_r__ = context__.vals_r("random_value");
            pos__ = 0;
            random_value = vals_r__[pos__++];
            current_statement_begin__ = 46;
            context__.validate_dims("data initialization", "deltaD_value", "int", context__.to_vec());
            deltaD_value = int(0);
            vals_i__ = context__.vals_i("deltaD_value");
            pos__ = 0;
            deltaD_value = vals_i__[pos__++];
            current_statement_begin__ = 47;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 48;
            validate_non_negative_index("tNo", "N", N);
            context__.validate_dims("data initialization", "tNo", "int", context__.to_vec(N));
            tNo = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("tNo");
            pos__ = 0;
            size_t tNo_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < tNo_k_0_max__; ++k_0__) {
                tNo[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 49;
            validate_non_negative_index("rating", "N", N);
            context__.validate_dims("data initialization", "rating", "int", context__.to_vec(N));
            rating = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("rating");
            pos__ = 0;
            size_t rating_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < rating_k_0_max__; ++k_0__) {
                rating[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 50;
            validate_non_negative_index("terminate", "N", N);
            context__.validate_dims("data initialization", "terminate", "int", context__.to_vec(N));
            terminate = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("terminate");
            pos__ = 0;
            size_t terminate_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < terminate_k_0_max__; ++k_0__) {
                terminate[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 51;
            validate_non_negative_index("rating_y", "N", N);
            context__.validate_dims("data initialization", "rating_y", "int", context__.to_vec(N));
            rating_y = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("rating_y");
            pos__ = 0;
            size_t rating_y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < rating_y_k_0_max__; ++k_0__) {
                rating_y[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 52;
            validate_non_negative_index("rating_n", "N", N);
            context__.validate_dims("data initialization", "rating_n", "int", context__.to_vec(N));
            rating_n = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("rating_n");
            pos__ = 0;
            size_t rating_n_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < rating_n_k_0_max__; ++k_0__) {
                rating_n[k_0__] = vals_i__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 56;
            validate_non_negative_index("deltaD", "logical_eq(deltaD_value, 9)", logical_eq(deltaD_value, 9));
            num_params_r__ += (1 * logical_eq(deltaD_value, 9));
            current_statement_begin__ = 57;
            num_params_r__ += 1;
            current_statement_begin__ = 58;
            num_params_r__ += 1;
            current_statement_begin__ = 59;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_dm() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 56;
        if (!(context__.contains_r("deltaD")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable deltaD missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("deltaD");
        pos__ = 0U;
        validate_non_negative_index("deltaD", "logical_eq(deltaD_value, 9)", logical_eq(deltaD_value, 9));
        context__.validate_dims("parameter initialization", "deltaD", "double", context__.to_vec(logical_eq(deltaD_value, 9)));
        std::vector<double> deltaD(logical_eq(deltaD_value, 9), double(0));
        size_t deltaD_k_0_max__ = logical_eq(deltaD_value, 9);
        for (size_t k_0__ = 0; k_0__ < deltaD_k_0_max__; ++k_0__) {
            deltaD[k_0__] = vals_r__[pos__++];
        }
        size_t deltaD_i_0_max__ = logical_eq(deltaD_value, 9);
        for (size_t i_0__ = 0; i_0__ < deltaD_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1.5, deltaD[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable deltaD: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 57;
        if (!(context__.contains_r("threshold_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable threshold_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("threshold_raw");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "threshold_raw", "double", context__.to_vec());
        double threshold_raw(0);
        threshold_raw = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, threshold_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable threshold_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 58;
        if (!(context__.contains_r("sigma_mult")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_mult missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_mult");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_mult", "double", context__.to_vec());
        double sigma_mult(0);
        sigma_mult = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_mult);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_mult: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 59;
        if (!(context__.contains_r("p_end_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p_end_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p_end_raw");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "p_end_raw", "double", context__.to_vec());
        double p_end_raw(0);
        p_end_raw = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, p_end_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p_end_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 56;
            std::vector<local_scalar_t__> deltaD;
            size_t deltaD_d_0_max__ = logical_eq(deltaD_value, 9);
            deltaD.reserve(deltaD_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < deltaD_d_0_max__; ++d_0__) {
                if (jacobian__)
                    deltaD.push_back(in__.scalar_lub_constrain(0, 1.5, lp__));
                else
                    deltaD.push_back(in__.scalar_lub_constrain(0, 1.5));
            }
            current_statement_begin__ = 57;
            local_scalar_t__ threshold_raw;
            (void) threshold_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                threshold_raw = in__.scalar_lb_constrain(0, lp__);
            else
                threshold_raw = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 58;
            local_scalar_t__ sigma_mult;
            (void) sigma_mult;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_mult = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_mult = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 59;
            local_scalar_t__ p_end_raw;
            (void) p_end_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                p_end_raw = in__.scalar_lub_constrain(0, 1, lp__);
            else
                p_end_raw = in__.scalar_lub_constrain(0, 1);
            // transformed parameters
            current_statement_begin__ = 63;
            validate_non_negative_index("p_n", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_n(N);
            stan::math::initialize(p_n, DUMMY_VAR__);
            stan::math::fill(p_n, DUMMY_VAR__);
            current_statement_begin__ = 64;
            validate_non_negative_index("p_y", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_y(N);
            stan::math::initialize(p_y, DUMMY_VAR__);
            stan::math::fill(p_y, DUMMY_VAR__);
            current_statement_begin__ = 66;
            local_scalar_t__ p_end;
            (void) p_end;  // dummy to suppress unused var warning
            stan::math::initialize(p_end, DUMMY_VAR__);
            stan::math::fill(p_end, DUMMY_VAR__);
            current_statement_begin__ = 67;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            current_statement_begin__ = 68;
            local_scalar_t__ threshold;
            (void) threshold;  // dummy to suppress unused var warning
            stan::math::initialize(threshold, DUMMY_VAR__);
            stan::math::fill(threshold, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 69;
            if (as_bool(logical_eq(random_value, 1))) {
                current_statement_begin__ = 70;
                stan::math::assign(threshold, 0);
                current_statement_begin__ = 71;
                stan::math::assign(p_end, p_end_raw);
            } else {
                current_statement_begin__ = 73;
                stan::math::assign(threshold, threshold_raw);
                current_statement_begin__ = 74;
                stan::math::assign(p_end, 1);
            }
            current_statement_begin__ = 76;
            if (as_bool(logical_eq(random_value, 1))) {
                current_statement_begin__ = 77;
                stan::math::assign(sigma, (sigma_mult * 10));
            } else {
                current_statement_begin__ = 79;
                stan::math::assign(sigma, (sigma_mult * threshold));
            }
            {
            current_statement_begin__ = 83;
            local_scalar_t__ utility_n(DUMMY_VAR__);
            (void) utility_n;  // dummy to suppress unused var warning
            stan::math::initialize(utility_n, DUMMY_VAR__);
            stan::math::fill(utility_n, DUMMY_VAR__);
            current_statement_begin__ = 84;
            local_scalar_t__ utility_y(DUMMY_VAR__);
            (void) utility_y;  // dummy to suppress unused var warning
            stan::math::initialize(utility_y, DUMMY_VAR__);
            stan::math::fill(utility_y, DUMMY_VAR__);
            current_statement_begin__ = 85;
            if (as_bool(logical_eq(deltaD_value, 9))) {
                current_statement_begin__ = 86;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 87;
                    if (as_bool(logical_eq(get_base1(tNo, n, "tNo", 1), 1))) {
                        current_statement_begin__ = 88;
                        stan::math::assign(utility_n, get_base1(rating_n, n, "rating_n", 1));
                        current_statement_begin__ = 89;
                        stan::math::assign(utility_y, get_base1(rating_y, n, "rating_y", 1));
                    } else {
                        current_statement_begin__ = 91;
                        stan::math::assign(utility_n, (utility_n * get_base1(deltaD, 1, "deltaD", 1)));
                        current_statement_begin__ = 92;
                        stan::math::assign(utility_n, (utility_n + get_base1(rating_n, n, "rating_n", 1)));
                        current_statement_begin__ = 93;
                        stan::math::assign(utility_y, (utility_y * get_base1(deltaD, 1, "deltaD", 1)));
                        current_statement_begin__ = 94;
                        stan::math::assign(utility_y, (utility_y + get_base1(rating_y, n, "rating_y", 1)));
                    }
                    current_statement_begin__ = 96;
                    stan::model::assign(p_n, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (1 - normal_cdf(utility_n, -(threshold), sigma)), 
                                "assigning variable p_n");
                    current_statement_begin__ = 97;
                    stan::model::assign(p_y, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                normal_cdf(utility_y, threshold, sigma), 
                                "assigning variable p_y");
                }
            } else {
                current_statement_begin__ = 100;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 101;
                    stan::model::assign(p_n, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (1 - normal_cdf(get_base1(rating_n, n, "rating_n", 1), -(threshold), sigma)), 
                                "assigning variable p_n");
                    current_statement_begin__ = 102;
                    stan::model::assign(p_y, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                normal_cdf(get_base1(rating_y, n, "rating_y", 1), threshold, sigma), 
                                "assigning variable p_y");
                }
            }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 63;
            size_t p_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_n_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_n(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_n" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_n: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 64;
            size_t p_y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_y_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p_y(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p_y" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_y: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 66;
            if (stan::math::is_uninitialized(p_end)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: p_end";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_end: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 67;
            if (stan::math::is_uninitialized(sigma)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sigma";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 68;
            if (stan::math::is_uninitialized(threshold)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: threshold";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable threshold: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            // model body
            {
            current_statement_begin__ = 111;
            validate_non_negative_index("decision_p", "N", N);
            validate_non_negative_index("decision_p", "3", 3);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > decision_p(3, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(N));
            stan::math::initialize(decision_p, DUMMY_VAR__);
            stan::math::fill(decision_p, DUMMY_VAR__);
            current_statement_begin__ = 112;
            if (as_bool(logical_eq(deltaD_value, 9))) {
                current_statement_begin__ = 113;
                lp_accum__.add(normal_log<propto__>(get_base1(deltaD, 1, "deltaD", 1), 0.8, 0.1));
                if (get_base1(deltaD, 1, "deltaD", 1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else if (get_base1(deltaD, 1, "deltaD", 1) > 1.5) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-log_diff_exp(normal_cdf_log(1.5, 0.8, 0.1), normal_cdf_log(0, 0.8, 0.1)));
            }
            current_statement_begin__ = 115;
            lp_accum__.add(normal_log<propto__>(threshold_raw, 15, 6));
            if (threshold_raw < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_ccdf_log(0, 15, 6));
            current_statement_begin__ = 116;
            lp_accum__.add(normal_log<propto__>(sigma_mult, 0.4, 0.2));
            if (sigma_mult < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_ccdf_log(0, 0.4, 0.2));
            current_statement_begin__ = 117;
            stan::math::assign(decision_p, decision_l(N, ar_value, random_value, to_vector(terminate), p_n, p_y, to_vector(rep_array(p_end, N)), pstream__));
            current_statement_begin__ = 118;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 120;
                lp_accum__.add(stan::math::log(get_base1(get_base1(decision_p, (get_base1(terminate, n, "terminate", 1) + 2), "decision_p", 1), n, "decision_p", 2)));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("deltaD");
        names__.push_back("threshold_raw");
        names__.push_back("sigma_mult");
        names__.push_back("p_end_raw");
        names__.push_back("p_n");
        names__.push_back("p_y");
        names__.push_back("p_end");
        names__.push_back("sigma");
        names__.push_back("threshold");
        names__.push_back("log_lik");
        names__.push_back("decision_p");
        names__.push_back("dev_d");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(logical_eq(deltaD_value, 9));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_dm_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> deltaD;
        size_t deltaD_d_0_max__ = logical_eq(deltaD_value, 9);
        deltaD.reserve(deltaD_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < deltaD_d_0_max__; ++d_0__) {
            deltaD.push_back(in__.scalar_lub_constrain(0, 1.5));
        }
        size_t deltaD_k_0_max__ = logical_eq(deltaD_value, 9);
        for (size_t k_0__ = 0; k_0__ < deltaD_k_0_max__; ++k_0__) {
            vars__.push_back(deltaD[k_0__]);
        }
        double threshold_raw = in__.scalar_lb_constrain(0);
        vars__.push_back(threshold_raw);
        double sigma_mult = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_mult);
        double p_end_raw = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(p_end_raw);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 63;
            validate_non_negative_index("p_n", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_n(N);
            stan::math::initialize(p_n, DUMMY_VAR__);
            stan::math::fill(p_n, DUMMY_VAR__);
            current_statement_begin__ = 64;
            validate_non_negative_index("p_y", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_y(N);
            stan::math::initialize(p_y, DUMMY_VAR__);
            stan::math::fill(p_y, DUMMY_VAR__);
            current_statement_begin__ = 66;
            double p_end;
            (void) p_end;  // dummy to suppress unused var warning
            stan::math::initialize(p_end, DUMMY_VAR__);
            stan::math::fill(p_end, DUMMY_VAR__);
            current_statement_begin__ = 67;
            double sigma;
            (void) sigma;  // dummy to suppress unused var warning
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            current_statement_begin__ = 68;
            double threshold;
            (void) threshold;  // dummy to suppress unused var warning
            stan::math::initialize(threshold, DUMMY_VAR__);
            stan::math::fill(threshold, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 69;
            if (as_bool(logical_eq(random_value, 1))) {
                current_statement_begin__ = 70;
                stan::math::assign(threshold, 0);
                current_statement_begin__ = 71;
                stan::math::assign(p_end, p_end_raw);
            } else {
                current_statement_begin__ = 73;
                stan::math::assign(threshold, threshold_raw);
                current_statement_begin__ = 74;
                stan::math::assign(p_end, 1);
            }
            current_statement_begin__ = 76;
            if (as_bool(logical_eq(random_value, 1))) {
                current_statement_begin__ = 77;
                stan::math::assign(sigma, (sigma_mult * 10));
            } else {
                current_statement_begin__ = 79;
                stan::math::assign(sigma, (sigma_mult * threshold));
            }
            {
            current_statement_begin__ = 83;
            local_scalar_t__ utility_n(DUMMY_VAR__);
            (void) utility_n;  // dummy to suppress unused var warning
            stan::math::initialize(utility_n, DUMMY_VAR__);
            stan::math::fill(utility_n, DUMMY_VAR__);
            current_statement_begin__ = 84;
            local_scalar_t__ utility_y(DUMMY_VAR__);
            (void) utility_y;  // dummy to suppress unused var warning
            stan::math::initialize(utility_y, DUMMY_VAR__);
            stan::math::fill(utility_y, DUMMY_VAR__);
            current_statement_begin__ = 85;
            if (as_bool(logical_eq(deltaD_value, 9))) {
                current_statement_begin__ = 86;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 87;
                    if (as_bool(logical_eq(get_base1(tNo, n, "tNo", 1), 1))) {
                        current_statement_begin__ = 88;
                        stan::math::assign(utility_n, get_base1(rating_n, n, "rating_n", 1));
                        current_statement_begin__ = 89;
                        stan::math::assign(utility_y, get_base1(rating_y, n, "rating_y", 1));
                    } else {
                        current_statement_begin__ = 91;
                        stan::math::assign(utility_n, (utility_n * get_base1(deltaD, 1, "deltaD", 1)));
                        current_statement_begin__ = 92;
                        stan::math::assign(utility_n, (utility_n + get_base1(rating_n, n, "rating_n", 1)));
                        current_statement_begin__ = 93;
                        stan::math::assign(utility_y, (utility_y * get_base1(deltaD, 1, "deltaD", 1)));
                        current_statement_begin__ = 94;
                        stan::math::assign(utility_y, (utility_y + get_base1(rating_y, n, "rating_y", 1)));
                    }
                    current_statement_begin__ = 96;
                    stan::model::assign(p_n, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (1 - normal_cdf(utility_n, -(threshold), sigma)), 
                                "assigning variable p_n");
                    current_statement_begin__ = 97;
                    stan::model::assign(p_y, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                normal_cdf(utility_y, threshold, sigma), 
                                "assigning variable p_y");
                }
            } else {
                current_statement_begin__ = 100;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 101;
                    stan::model::assign(p_n, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                (1 - normal_cdf(get_base1(rating_n, n, "rating_n", 1), -(threshold), sigma)), 
                                "assigning variable p_n");
                    current_statement_begin__ = 102;
                    stan::model::assign(p_y, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                                normal_cdf(get_base1(rating_y, n, "rating_y", 1), threshold, sigma), 
                                "assigning variable p_y");
                }
            }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t p_n_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < p_n_j_1_max__; ++j_1__) {
                    vars__.push_back(p_n(j_1__));
                }
                size_t p_y_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < p_y_j_1_max__; ++j_1__) {
                    vars__.push_back(p_y(j_1__));
                }
                vars__.push_back(p_end);
                vars__.push_back(sigma);
                vars__.push_back(threshold);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 124;
            validate_non_negative_index("log_lik", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(N);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            current_statement_begin__ = 125;
            validate_non_negative_index("decision_p", "N", N);
            validate_non_negative_index("decision_p", "3", 3);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > decision_p(3, Eigen::Matrix<double, Eigen::Dynamic, 1>(N));
            stan::math::initialize(decision_p, DUMMY_VAR__);
            stan::math::fill(decision_p, DUMMY_VAR__);
            current_statement_begin__ = 129;
            double dev_d;
            (void) dev_d;  // dummy to suppress unused var warning
            stan::math::initialize(dev_d, DUMMY_VAR__);
            stan::math::fill(dev_d, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 130;
            stan::math::assign(dev_d, 0);
            current_statement_begin__ = 131;
            stan::math::assign(decision_p, decision_l(N, ar_value, random_value, to_vector(terminate), p_n, p_y, to_vector(rep_array(p_end, N)), pstream__));
            current_statement_begin__ = 132;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 137;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            stan::math::log(get_base1(get_base1(decision_p, (get_base1(terminate, n, "terminate", 1) + 2), "decision_p", 1), n, "decision_p", 2)), 
                            "assigning variable log_lik");
                current_statement_begin__ = 138;
                stan::math::assign(dev_d, (dev_d + (-(2) * get_base1(log_lik, n, "log_lik", 1))));
            }
            // validate, write generated quantities
            current_statement_begin__ = 124;
            size_t log_lik_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
            current_statement_begin__ = 125;
            size_t decision_p_j_1_max__ = N;
            size_t decision_p_k_0_max__ = 3;
            for (size_t j_1__ = 0; j_1__ < decision_p_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < decision_p_k_0_max__; ++k_0__) {
                    vars__.push_back(decision_p[k_0__](j_1__));
                }
            }
            current_statement_begin__ = 129;
            vars__.push_back(dev_d);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_dm";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t deltaD_k_0_max__ = logical_eq(deltaD_value, 9);
        for (size_t k_0__ = 0; k_0__ < deltaD_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "threshold_raw";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_mult";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_end_raw";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t p_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_n_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_n" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_y_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_y" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_end";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "threshold";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t decision_p_j_1_max__ = N;
        size_t decision_p_k_0_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < decision_p_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < decision_p_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "decision_p" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dev_d";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t deltaD_k_0_max__ = logical_eq(deltaD_value, 9);
        for (size_t k_0__ = 0; k_0__ < deltaD_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaD" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "threshold_raw";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_mult";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_end_raw";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t p_n_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_n_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_n" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_y_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_y" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_end";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "threshold";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t decision_p_j_1_max__ = N;
        size_t decision_p_k_0_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < decision_p_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < decision_p_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "decision_p" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dev_d";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_dm_namespace::model_dm stan_model;
#endif
