// Generated by rstantools.  Do not edit by hand.

/*
    sampinfo is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    sampinfo is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with sampinfo.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_mm_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_mm");
    reader.add_event(84, 82, "end", "model_mm");
    return reader;
}
#include <stan_meta_header.hpp>
class model_mm : public prob_grad {
private:
        int deltaM_value;
        int condition_value;
        int C;
        int K;
        int N;
        std::vector<int> tNo;
        std::vector<matrix_d> X;
        std::vector<int> cID;
        int MC;
public:
    model_mm(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_mm(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_mm_namespace::model_mm";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "deltaM_value", "int", context__.to_vec());
            deltaM_value = int(0);
            vals_i__ = context__.vals_i("deltaM_value");
            pos__ = 0;
            deltaM_value = vals_i__[pos__++];
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "condition_value", "int", context__.to_vec());
            condition_value = int(0);
            vals_i__ = context__.vals_i("condition_value");
            pos__ = 0;
            condition_value = vals_i__[pos__++];
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "C", "int", context__.to_vec());
            C = int(0);
            vals_i__ = context__.vals_i("C");
            pos__ = 0;
            C = vals_i__[pos__++];
            check_greater_or_equal(function__, "C", C, 2);
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 9;
            validate_non_negative_index("tNo", "N", N);
            context__.validate_dims("data initialization", "tNo", "int", context__.to_vec(N));
            tNo = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("tNo");
            pos__ = 0;
            size_t tNo_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < tNo_k_0_max__; ++k_0__) {
                tNo[k_0__] = vals_i__[pos__++];
            }
            size_t tNo_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < tNo_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "tNo[i_0__]", tNo[i_0__], 1);
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("X", "C", C);
            validate_non_negative_index("X", "K", K);
            validate_non_negative_index("X", "N", N);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,C,K));
            X = std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(N, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(C, K));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = K;
            size_t X_j_1_max__ = C;
            size_t X_k_0_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < X_k_0_max__; ++k_0__) {
                        X[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                    }
                }
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("cID", "N", N);
            context__.validate_dims("data initialization", "cID", "int", context__.to_vec(N));
            cID = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("cID");
            pos__ = 0;
            size_t cID_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < cID_k_0_max__; ++k_0__) {
                cID[k_0__] = vals_i__[pos__++];
            }
            size_t cID_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < cID_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "cID[i_0__]", cID[i_0__], 1);
                check_less_or_equal(function__, "cID[i_0__]", cID[i_0__], C);
            }
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "MC", "int", context__.to_vec());
            MC = int(0);
            vals_i__ = context__.vals_i("MC");
            pos__ = 0;
            MC = vals_i__[pos__++];
            check_greater_or_equal(function__, "MC", MC, 2);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 16;
            validate_non_negative_index("deltaM", "logical_eq(deltaM_value, 8)", logical_eq(deltaM_value, 8));
            num_params_r__ += (1 * logical_eq(deltaM_value, 8));
            current_statement_begin__ = 17;
            validate_non_negative_index("alpha_raw", "(C - 1)", (C - 1));
            num_params_r__ += (C - 1);
            current_statement_begin__ = 18;
            validate_non_negative_index("beta_raw", "K", K);
            num_params_r__ += K;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_mm() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 16;
        if (!(context__.contains_r("deltaM")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable deltaM missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("deltaM");
        pos__ = 0U;
        validate_non_negative_index("deltaM", "logical_eq(deltaM_value, 8)", logical_eq(deltaM_value, 8));
        context__.validate_dims("parameter initialization", "deltaM", "double", context__.to_vec(logical_eq(deltaM_value, 8)));
        std::vector<double> deltaM(logical_eq(deltaM_value, 8), double(0));
        size_t deltaM_k_0_max__ = logical_eq(deltaM_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaM_k_0_max__; ++k_0__) {
            deltaM[k_0__] = vals_r__[pos__++];
        }
        size_t deltaM_i_0_max__ = logical_eq(deltaM_value, 8);
        for (size_t i_0__ = 0; i_0__ < deltaM_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, deltaM[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable deltaM: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 17;
        if (!(context__.contains_r("alpha_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha_raw");
        pos__ = 0U;
        validate_non_negative_index("alpha_raw", "(C - 1)", (C - 1));
        context__.validate_dims("parameter initialization", "alpha_raw", "vector_d", context__.to_vec((C - 1)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_raw((C - 1));
        size_t alpha_raw_j_1_max__ = (C - 1);
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            alpha_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(alpha_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 18;
        if (!(context__.contains_r("beta_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_raw");
        pos__ = 0U;
        validate_non_negative_index("beta_raw", "K", K);
        context__.validate_dims("parameter initialization", "beta_raw", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_raw(K);
        size_t beta_raw_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            beta_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 16;
            std::vector<local_scalar_t__> deltaM;
            size_t deltaM_d_0_max__ = logical_eq(deltaM_value, 8);
            deltaM.reserve(deltaM_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < deltaM_d_0_max__; ++d_0__) {
                if (jacobian__)
                    deltaM.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    deltaM.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 17;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha_raw;
            (void) alpha_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha_raw = in__.vector_constrain((C - 1), lp__);
            else
                alpha_raw = in__.vector_constrain((C - 1));
            current_statement_begin__ = 18;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_raw;
            (void) beta_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_raw = in__.vector_constrain(K, lp__);
            else
                beta_raw = in__.vector_constrain(K);
            // transformed parameters
            current_statement_begin__ = 22;
            validate_non_negative_index("alpha", "C", C);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha(C);
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            current_statement_begin__ = 23;
            validate_non_negative_index("beta", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta(K);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 24;
            validate_non_negative_index("theta", "C", C);
            validate_non_negative_index("theta", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> theta(C, N);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            current_statement_begin__ = 25;
            validate_non_negative_index("X_acc", "C", C);
            validate_non_negative_index("X_acc", "(K * logical_eq(deltaM_value, 8))", (K * logical_eq(deltaM_value, 8)));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> X_acc(C, (K * logical_eq(deltaM_value, 8)));
            stan::math::initialize(X_acc, DUMMY_VAR__);
            stan::math::fill(X_acc, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 27;
            stan::model::assign(alpha, 
                        stan::model::cons_list(stan::model::index_min_max(1, (C - 1)), stan::model::nil_index_list()), 
                        multiply(alpha_raw, 2), 
                        "assigning variable alpha");
            current_statement_begin__ = 28;
            stan::model::assign(alpha, 
                        stan::model::cons_list(stan::model::index_uni(C), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable alpha");
            current_statement_begin__ = 29;
            stan::math::assign(beta, multiply(beta_raw, 5));
            current_statement_begin__ = 31;
            if (as_bool((primitive_value(logical_gt(K, 0)) && primitive_value(logical_eq(deltaM_value, 8))))) {
                current_statement_begin__ = 32;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 33;
                    if (as_bool(logical_eq(get_base1(tNo, n, "tNo", 1), 1))) {
                        current_statement_begin__ = 34;
                        stan::math::assign(X_acc, to_matrix(rep_array(0, C, K)));
                    } else {
                        current_statement_begin__ = 36;
                        stan::math::assign(X_acc, multiply(X_acc, get_base1(deltaM, 1, "deltaM", 1)));
                    }
                    current_statement_begin__ = 38;
                    stan::math::assign(X_acc, add(X_acc, get_base1(X, n, "X", 1)));
                    current_statement_begin__ = 39;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                multiply(X_acc, beta), 
                                "assigning variable theta");
                }
                current_statement_begin__ = 41;
                stan::math::assign(theta, add(theta, rep_matrix(alpha, N)));
            } else if (as_bool(logical_gt(K, 0))) {
                current_statement_begin__ = 43;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 44;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                multiply(get_base1(X, n, "X", 1), beta), 
                                "assigning variable theta");
                }
                current_statement_begin__ = 46;
                stan::math::assign(theta, add(theta, rep_matrix(alpha, N)));
            } else {
                current_statement_begin__ = 48;
                stan::math::assign(theta, rep_matrix(alpha, N));
            }
            current_statement_begin__ = 51;
            if (as_bool(logical_eq(condition_value, 1))) {
                current_statement_begin__ = 52;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 53;
                    if (as_bool(logical_eq(get_base1(tNo, n, "tNo", 1), 1))) {
                        current_statement_begin__ = 54;
                        if (as_bool(logical_lt(get_base1(cID, n, "cID", 1), MC))) {
                            current_statement_begin__ = 55;
                            stan::model::assign(theta, 
                                        stan::model::cons_list(stan::model::index_min_max((MC + 1), C), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                        add(stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_min_max((MC + 1), C), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "theta"), to_vector(rep_array(-(999999), (MC - 1)))), 
                                        "assigning variable theta");
                        } else if (as_bool(logical_gt(get_base1(cID, n, "cID", 1), MC))) {
                            current_statement_begin__ = 57;
                            stan::model::assign(theta, 
                                        stan::model::cons_list(stan::model::index_min_max(1, (MC - 1)), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                        add(stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_min_max(1, (MC - 1)), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "theta"), to_vector(rep_array(-(999999), (MC - 1)))), 
                                        "assigning variable theta");
                        }
                    }
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 22;
            size_t alpha_j_1_max__ = C;
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(alpha(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: alpha" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable alpha: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 23;
            size_t beta_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(beta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 24;
            size_t theta_j_1_max__ = C;
            size_t theta_j_2_max__ = N;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(theta(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: theta" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 25;
            size_t X_acc_j_1_max__ = C;
            size_t X_acc_j_2_max__ = (K * logical_eq(deltaM_value, 8));
            for (size_t j_1__ = 0; j_1__ < X_acc_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < X_acc_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(X_acc(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: X_acc" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable X_acc: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 64;
            if (as_bool(logical_eq(deltaM_value, 8))) {
                current_statement_begin__ = 65;
                lp_accum__.add(uniform_log<propto__>(get_base1(deltaM, 1, "deltaM", 1), 0, 1));
            }
            current_statement_begin__ = 67;
            lp_accum__.add(normal_log<propto__>(alpha_raw, 0, 1));
            current_statement_begin__ = 68;
            lp_accum__.add(normal_log<propto__>(beta_raw, 0, 1));
            current_statement_begin__ = 69;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 70;
                lp_accum__.add(categorical_logit_log<propto__>(get_base1(cID, n, "cID", 1), stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "theta")));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("deltaM");
        names__.push_back("alpha_raw");
        names__.push_back("beta_raw");
        names__.push_back("alpha");
        names__.push_back("beta");
        names__.push_back("theta");
        names__.push_back("X_acc");
        names__.push_back("log_lik");
        names__.push_back("dev_m");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(logical_eq(deltaM_value, 8));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((C - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(C);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(C);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(C);
        dims__.push_back((K * logical_eq(deltaM_value, 8)));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_mm_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> deltaM;
        size_t deltaM_d_0_max__ = logical_eq(deltaM_value, 8);
        deltaM.reserve(deltaM_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < deltaM_d_0_max__; ++d_0__) {
            deltaM.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t deltaM_k_0_max__ = logical_eq(deltaM_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaM_k_0_max__; ++k_0__) {
            vars__.push_back(deltaM[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha_raw = in__.vector_constrain((C - 1));
        size_t alpha_raw_j_1_max__ = (C - 1);
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            vars__.push_back(alpha_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_raw = in__.vector_constrain(K);
        size_t beta_raw_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            vars__.push_back(beta_raw(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 22;
            validate_non_negative_index("alpha", "C", C);
            Eigen::Matrix<double, Eigen::Dynamic, 1> alpha(C);
            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha, DUMMY_VAR__);
            current_statement_begin__ = 23;
            validate_non_negative_index("beta", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> beta(K);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            current_statement_begin__ = 24;
            validate_non_negative_index("theta", "C", C);
            validate_non_negative_index("theta", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> theta(C, N);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            current_statement_begin__ = 25;
            validate_non_negative_index("X_acc", "C", C);
            validate_non_negative_index("X_acc", "(K * logical_eq(deltaM_value, 8))", (K * logical_eq(deltaM_value, 8)));
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> X_acc(C, (K * logical_eq(deltaM_value, 8)));
            stan::math::initialize(X_acc, DUMMY_VAR__);
            stan::math::fill(X_acc, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 27;
            stan::model::assign(alpha, 
                        stan::model::cons_list(stan::model::index_min_max(1, (C - 1)), stan::model::nil_index_list()), 
                        multiply(alpha_raw, 2), 
                        "assigning variable alpha");
            current_statement_begin__ = 28;
            stan::model::assign(alpha, 
                        stan::model::cons_list(stan::model::index_uni(C), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable alpha");
            current_statement_begin__ = 29;
            stan::math::assign(beta, multiply(beta_raw, 5));
            current_statement_begin__ = 31;
            if (as_bool((primitive_value(logical_gt(K, 0)) && primitive_value(logical_eq(deltaM_value, 8))))) {
                current_statement_begin__ = 32;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 33;
                    if (as_bool(logical_eq(get_base1(tNo, n, "tNo", 1), 1))) {
                        current_statement_begin__ = 34;
                        stan::math::assign(X_acc, to_matrix(rep_array(0, C, K)));
                    } else {
                        current_statement_begin__ = 36;
                        stan::math::assign(X_acc, multiply(X_acc, get_base1(deltaM, 1, "deltaM", 1)));
                    }
                    current_statement_begin__ = 38;
                    stan::math::assign(X_acc, add(X_acc, get_base1(X, n, "X", 1)));
                    current_statement_begin__ = 39;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                multiply(X_acc, beta), 
                                "assigning variable theta");
                }
                current_statement_begin__ = 41;
                stan::math::assign(theta, add(theta, rep_matrix(alpha, N)));
            } else if (as_bool(logical_gt(K, 0))) {
                current_statement_begin__ = 43;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 44;
                    stan::model::assign(theta, 
                                stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                multiply(get_base1(X, n, "X", 1), beta), 
                                "assigning variable theta");
                }
                current_statement_begin__ = 46;
                stan::math::assign(theta, add(theta, rep_matrix(alpha, N)));
            } else {
                current_statement_begin__ = 48;
                stan::math::assign(theta, rep_matrix(alpha, N));
            }
            current_statement_begin__ = 51;
            if (as_bool(logical_eq(condition_value, 1))) {
                current_statement_begin__ = 52;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 53;
                    if (as_bool(logical_eq(get_base1(tNo, n, "tNo", 1), 1))) {
                        current_statement_begin__ = 54;
                        if (as_bool(logical_lt(get_base1(cID, n, "cID", 1), MC))) {
                            current_statement_begin__ = 55;
                            stan::model::assign(theta, 
                                        stan::model::cons_list(stan::model::index_min_max((MC + 1), C), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                        add(stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_min_max((MC + 1), C), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "theta"), to_vector(rep_array(-(999999), (MC - 1)))), 
                                        "assigning variable theta");
                        } else if (as_bool(logical_gt(get_base1(cID, n, "cID", 1), MC))) {
                            current_statement_begin__ = 57;
                            stan::model::assign(theta, 
                                        stan::model::cons_list(stan::model::index_min_max(1, (MC - 1)), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                        add(stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_min_max(1, (MC - 1)), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "theta"), to_vector(rep_array(-(999999), (MC - 1)))), 
                                        "assigning variable theta");
                        }
                    }
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t alpha_j_1_max__ = C;
                for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                    vars__.push_back(alpha(j_1__));
                }
                size_t beta_j_1_max__ = K;
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    vars__.push_back(beta(j_1__));
                }
                size_t theta_j_2_max__ = N;
                size_t theta_j_1_max__ = C;
                for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                        vars__.push_back(theta(j_1__, j_2__));
                    }
                }
                size_t X_acc_j_2_max__ = (K * logical_eq(deltaM_value, 8));
                size_t X_acc_j_1_max__ = C;
                for (size_t j_2__ = 0; j_2__ < X_acc_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < X_acc_j_1_max__; ++j_1__) {
                        vars__.push_back(X_acc(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 75;
            validate_non_negative_index("log_lik", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(N);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            current_statement_begin__ = 76;
            double dev_m;
            (void) dev_m;  // dummy to suppress unused var warning
            stan::math::initialize(dev_m, DUMMY_VAR__);
            stan::math::fill(dev_m, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 77;
            stan::math::assign(dev_m, 0);
            current_statement_begin__ = 78;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 79;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            categorical_logit_log(get_base1(cID, n, "cID", 1), stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "theta")), 
                            "assigning variable log_lik");
                current_statement_begin__ = 80;
                stan::math::assign(dev_m, (dev_m + (-(2) * get_base1(log_lik, n, "log_lik", 1))));
            }
            // validate, write generated quantities
            current_statement_begin__ = 75;
            size_t log_lik_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
            current_statement_begin__ = 76;
            vars__.push_back(dev_m);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_mm";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t deltaM_k_0_max__ = logical_eq(deltaM_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaM_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaM" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_raw_j_1_max__ = (C - 1);
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_raw_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t alpha_j_1_max__ = C;
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_j_2_max__ = N;
            size_t theta_j_1_max__ = C;
            for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t X_acc_j_2_max__ = (K * logical_eq(deltaM_value, 8));
            size_t X_acc_j_1_max__ = C;
            for (size_t j_2__ = 0; j_2__ < X_acc_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_acc_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "X_acc" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dev_m";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t deltaM_k_0_max__ = logical_eq(deltaM_value, 8);
        for (size_t k_0__ = 0; k_0__ < deltaM_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "deltaM" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_raw_j_1_max__ = (C - 1);
        for (size_t j_1__ = 0; j_1__ < alpha_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_raw_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < beta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t alpha_j_1_max__ = C;
            for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t beta_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_j_2_max__ = N;
            size_t theta_j_1_max__ = C;
            for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t X_acc_j_2_max__ = (K * logical_eq(deltaM_value, 8));
            size_t X_acc_j_1_max__ = C;
            for (size_t j_2__ = 0; j_2__ < X_acc_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_acc_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "X_acc" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dev_m";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_mm_namespace::model_mm stan_model;
#endif
